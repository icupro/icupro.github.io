{"version":3,"file":"js/311.63b3a6c3.js","mappings":"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","sources":["webpack://thuc-tim-mch/./node_modules/nerdamer/Algebra.js","webpack://thuc-tim-mch/./node_modules/nerdamer/Calculus.js","webpack://thuc-tim-mch/./node_modules/nerdamer/Extra.js","webpack://thuc-tim-mch/./node_modules/nerdamer/Solve.js","webpack://thuc-tim-mch/./node_modules/nerdamer/all.js","webpack://thuc-tim-mch/./node_modules/nerdamer/nerdamer.core.js","webpack://thuc-tim-mch/./src/views/drugsCalculateDose.vue?d083","webpack://thuc-tim-mch/./src/stores/store.patients.ts","webpack://thuc-tim-mch/./src/stores/store.calculations.ts","webpack://thuc-tim-mch/./src/views/drugsCalculateDose.vue?942f","webpack://thuc-tim-mch/./src/views/drugsCalculateDose.vue"],"sourcesContent":["/*\r\n * Author : Martin Donk\r\n * Website : http://www.nerdamer.com\r\n * Email : martin.r.donk@gmail.com\r\n * License : MIT\r\n * Source : https://github.com/jiggzson/nerdamer\r\n */\r\n\r\n/* global module, Function */\r\n\r\nif((typeof module) !== 'undefined') {\r\n    var nerdamer = require('./nerdamer.core.js');\r\n    require('./Calculus.js');\r\n}\r\n\r\n(function () {\r\n    \"use strict\";\r\n\r\n    /*shortcuts*/\r\n    var core = nerdamer.getCore(),\r\n            _ = core.PARSER,\r\n            N = core.groups.N,\r\n            P = core.groups.P,\r\n            S = core.groups.S,\r\n            EX = core.groups.EX,\r\n            FN = core.groups.FN,\r\n            PL = core.groups.PL,\r\n            CP = core.groups.CP,\r\n            CB = core.groups.CB,\r\n            keys = core.Utils.keys,\r\n            even = core.Utils.even,\r\n            variables = core.Utils.variables,\r\n            format = core.Utils.format,\r\n            round = core.Utils.round,\r\n            Frac = core.Frac,\r\n            isInt = core.Utils.isInt,\r\n            Symbol = core.Symbol,\r\n            CONST_HASH = core.Settings.CONST_HASH,\r\n            math = core.Utils.importFunctions(),\r\n            evaluate = core.Utils.evaluate;\r\n    //*************** CLASSES ***************//\r\n    /**\r\n     * Converts a symbol into an equivalent polynomial arrays of \r\n     * the form [[coefficient_1, power_1],[coefficient_2, power_2], ... ]\r\n     * Univariate polymials only. \r\n     * @param {Symbol|Number} symbol\r\n     * @param {String} variable The variable name of the polynomial\r\n     * @param {int} order\r\n     */\r\n    function Polynomial(symbol, variable, order) {\r\n        if(core.Utils.isSymbol(symbol)) {\r\n            this.parse(symbol);\r\n            this.variable = this.variable || variable;\r\n        }\r\n        else if(!isNaN(symbol)) {\r\n            order = order || 0;\r\n            if(variable === undefined)\r\n                throw new core.exceptions.InvalidVariableNameError('Polynomial expects a variable name when creating using order');\r\n            this.coeffs = [];\r\n            this.coeffs[order] = symbol;\r\n            this.fill(symbol);\r\n        }\r\n        else if(typeof symbol === 'string') {\r\n            this.parse(_.parse(symbol));\r\n        }\r\n    }\r\n    /**\r\n     * Creates a Polynomial given an array of coefficients\r\n     * @param {int[]} arr\r\n     * @param {String} variable\r\n     * @returns {Polynomial}\r\n     */\r\n    Polynomial.fromArray = function (arr, variable) {\r\n        if(typeof variable === 'undefined')\r\n            throw new core.exceptions.InvalidVariableNameError('A variable name must be specified when creating polynomial from array');\r\n        var p = new Polynomial();\r\n        p.coeffs = arr;\r\n        p.variable = variable;\r\n        return p;\r\n    };\r\n\r\n    Polynomial.fit = function (c1, c2, n, base, p, variable) {\r\n        //after having looped through and mod 10 the number to get the matching factor\r\n        var terms = new Array(p + 1),\r\n                t = n - c2;\r\n        terms[0] = c2; //the constants is assumed to be correct\r\n        //constant for x^p is also assumed know so add\r\n        terms[p] = c1;\r\n        t -= c1 * Math.pow(base, p);\r\n        //start fitting\r\n        for(var i = p - 1; i > 0; i--) {\r\n            var b = Math.pow(base, i), //we want as many wholes as possible\r\n                    q = t / b,\r\n                    sign = Math.sign(q);\r\n            var c = sign * Math.floor(Math.abs(q));\r\n            t -= c * b;\r\n            terms[i] = c;\r\n        }\r\n        if(t !== 0)\r\n            return null;\r\n        for(var i = 0; i < terms.length; i++)\r\n            terms[i] = new Frac(terms[i]);\r\n\r\n        return Polynomial.fromArray(terms, variable);\r\n    };\r\n\r\n    Polynomial.prototype = {\r\n        /**\r\n         * Converts Symbol to Polynomial\r\n         * @param {Symbol} symbol\r\n         * @param {Array} c - a collector array\r\n         * @returns {Polynomial}\r\n         */\r\n        parse: function (symbol, c) {\r\n            this.variable = variables(symbol)[0];\r\n            if(!symbol.isPoly())\r\n                throw core.exceptions.NerdamerTypeError('Polynomial Expected! Received ' + core.Utils.text(symbol));\r\n            c = c || [];\r\n            if(!symbol.power.absEquals(1))\r\n                symbol = _.expand(symbol);\r\n\r\n            if(symbol.group === core.groups.N) {\r\n                c[0] = symbol.multiplier;\r\n            }\r\n            else if(symbol.group === core.groups.S) {\r\n                c[symbol.power.toDecimal()] = symbol.multiplier;\r\n            }\r\n            else {\r\n                for(var x in symbol.symbols) {\r\n                    var sub = symbol.symbols[x],\r\n                            p = sub.power;\r\n                    if(core.Utils.isSymbol(p))\r\n                        throw new core.exceptions.NerdamerTypeError('power cannot be a Symbol');\r\n\r\n                    p = sub.group === N ? 0 : p.toDecimal();\r\n                    if(sub.symbols) {\r\n                        this.parse(sub, c);\r\n                    }\r\n                    else {\r\n                        c[p] = sub.multiplier;\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.coeffs = c;\r\n\r\n            this.fill();\r\n        },\r\n        /**\r\n         * Fills in the holes in a polynomial with zeroes\r\n         * @param {Number} x - The number to fill the holes with\r\n         */\r\n        fill: function (x) {\r\n            x = Number(x) || 0;\r\n            var l = this.coeffs.length;\r\n            for(var i = 0; i < l; i++) {\r\n                if(this.coeffs[i] === undefined) {\r\n                    this.coeffs[i] = new Frac(x);\r\n                }\r\n            }\r\n            return this;\r\n        },\r\n        /**\r\n         * Removes higher order zeros or a specific coefficient\r\n         * @returns {Array}\r\n         */\r\n        trim: function () {\r\n            var l = this.coeffs.length;\r\n            while(l--) {\r\n                var c = this.coeffs[l];\r\n                var equalsZero = c.equals(0);\r\n                if(c && equalsZero) {\r\n                    if(l === 0)\r\n                        break;\r\n                    this.coeffs.pop();\r\n                }\r\n                else\r\n                    break;\r\n            }\r\n\r\n            return this;\r\n        },\r\n        /*\r\n         * Returns polynomial mod p **currently fails**\r\n         * @param {Number} p\r\n         * @returns {Polynomial}\r\n         */\r\n        modP: function (p) {\r\n            var l = this.coeffs.length;\r\n            for(var i = 0; i < l; i++) {\r\n                var c = this.coeffs[i];\r\n                if(c < 0) { //go borrow\r\n                    var b; //a coefficient > 0\r\n                    for(var j = i; j < l; j++) {//starting from where we left off\r\n                        if(this.coeffs[j] > 0) {\r\n                            b = this.coeffs[j];\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    if(b) { //if such a coefficient exists\r\n                        for(j; j > i; j--) { //go down the line and adjust using p\r\n                            this.coeffs[j] = this.coeffs[j].subtract(new Frac(1));\r\n                            this.coeffs[j - 1] = this.coeffs[j - 1].add(new Frac(p));\r\n                        }\r\n                        c = this.coeffs[i]; //reset c\r\n                    }\r\n                }\r\n\r\n                var d = c.mod(p);\r\n                var w = c.subtract(d).divide(p);\r\n                if(!w.equals(0)) {\r\n                    var up_one = i + 1;\r\n                    var next = this.coeffs[up_one] || new Frac(0);\r\n                    next = next.add(w);\r\n                    this.coeffs[up_one] = new Frac(next);\r\n                    this.coeffs[i] = new Frac(d);\r\n                }\r\n            }\r\n\r\n            return this;\r\n        },\r\n        /**\r\n         * Adds together 2 polynomials\r\n         * @param {Polynomial} poly\r\n         */\r\n        add: function (poly) {\r\n            var l = Math.max(this.coeffs.length, poly.coeffs.length);\r\n            for(var i = 0; i < l; i++) {\r\n                var a = (this.coeffs[i] || new Frac(0)),\r\n                        b = (poly.coeffs[i] || new Frac(0));\r\n                this.coeffs[i] = a.add(b);\r\n            }\r\n            return this;\r\n        },\r\n        /**\r\n         * Adds together 2 polynomials\r\n         * @param {Polynomial} poly\r\n         */\r\n        subtract: function (poly) {\r\n            var l = Math.max(this.coeffs.length, poly.coeffs.length);\r\n            for(var i = 0; i < l; i++) {\r\n                var a = (this.coeffs[i] || new Frac(0)),\r\n                        b = (poly.coeffs[i] || new Frac(0));\r\n                this.coeffs[i] = a.subtract(b);\r\n            }\r\n            return this;\r\n        },\r\n        divide: function (poly) {\r\n            var variable = this.variable,\r\n                    dividend = core.Utils.arrayClone(this.coeffs),\r\n                    divisor = core.Utils.arrayClone(poly.coeffs),\r\n                    n = dividend.length,\r\n                    mp = divisor.length - 1,\r\n                    quotient = [];\r\n\r\n            //loop through the dividend\r\n            for(var i = 0; i < n; i++) {\r\n                var p = n - (i + 1);\r\n                //get the difference of the powers\r\n                var d = p - mp;\r\n                //get the quotient of the coefficients\r\n                var q = dividend[p].divide(divisor[mp]);\r\n\r\n                if(d < 0)\r\n                    break;//the divisor is not greater than the dividend\r\n                //place it in the quotient\r\n                quotient[d] = q;\r\n\r\n                for(var j = 0; j <= mp; j++) {\r\n                    //reduce the dividend\r\n                    dividend[j + d] = dividend[j + d].subtract((divisor[j].multiply(q)));\r\n                }\r\n            }\r\n\r\n            //clean up\r\n            var p1 = Polynomial.fromArray(dividend, variable || 'x').trim(), //pass in x for safety\r\n                    p2 = Polynomial.fromArray(quotient, variable || 'x');\r\n            return [p2, p1];\r\n        },\r\n        multiply: function (poly) {\r\n            var l1 = this.coeffs.length, l2 = poly.coeffs.length,\r\n                    c = []; //array to be returned\r\n            for(var i = 0; i < l1; i++) {\r\n                var x1 = this.coeffs[i];\r\n                for(var j = 0; j < l2; j++) {\r\n                    var k = i + j, //add the powers together\r\n                            x2 = poly.coeffs[j],\r\n                            e = c[k] || new Frac(0); //get the existing term from the new array\r\n                    c[k] = e.add(x1.multiply(x2)); //multiply the coefficients and add to new polynomial array\r\n                }\r\n            }\r\n            this.coeffs = c;\r\n            return this;\r\n        },\r\n        /**\r\n         * Checks if a polynomial is zero\r\n         * @returns {Boolean}\r\n         */\r\n        isZero: function () {\r\n            var l = this.coeffs.length;\r\n            for(var i = 0; i < l; i++) {\r\n                var e = this.coeffs[i];\r\n                if(!e.equals(0))\r\n                    return false;\r\n            }\r\n            return true;\r\n        },\r\n        /** \r\n         * Substitutes in a number n into the polynomial p(n)\r\n         * @param {Number} n\r\n         * @returns {Frac}\r\n         */\r\n        sub: function (n) {\r\n            var sum = new Frac(0), l = this.coeffs.length;\r\n            for(var i = 0; i < l; i++) {\r\n                var t = this.coeffs[i];\r\n                if(!t.equals(0))\r\n                    sum = sum.add(t.multiply(new Frac(Math.pow(n, i))));\r\n            }\r\n            return sum;\r\n        },\r\n        /**\r\n         * Returns a clone of the polynomial\r\n         * @returns {Polynomial}\r\n         */\r\n        clone: function () {\r\n            var p = new Polynomial();\r\n            p.coeffs = this.coeffs;\r\n            p.variable = this.variable;\r\n            return p;\r\n        },\r\n        /**\r\n         * Gets the degree of the polynomial\r\n         * @returns {Number}\r\n         */\r\n        deg: function () {\r\n            this.trim();\r\n            return this.coeffs.length - 1;\r\n        },\r\n        /**\r\n         * Returns a lead coefficient\r\n         * @returns {Frac}\r\n         */\r\n        lc: function () {\r\n            return this.coeffs[this.deg()].clone();\r\n        },\r\n        /**\r\n         * Converts polynomial into a monic polynomial\r\n         * @returns {Polynomial}\r\n         */\r\n        monic: function () {\r\n            var lc = this.lc(), l = this.coeffs.length;\r\n            for(var i = 0; i < l; i++)\r\n                this.coeffs[i] = this.coeffs[i].divide(lc);\r\n            return this;\r\n        },\r\n        /**\r\n         * Returns the GCD of two polynomials\r\n         * @param {Polynomial} poly\r\n         * @returns {Polynomial}\r\n         */\r\n        gcd: function (poly) {\r\n            //get the maximum power of each\r\n            var mp1 = this.coeffs.length - 1,\r\n                    mp2 = poly.coeffs.length - 1,\r\n                    T;\r\n            //swap so we always have the greater power first\r\n            if(mp1 < mp2) {\r\n                return poly.gcd(this);\r\n            }\r\n            var a = this;\r\n\r\n            while(!poly.isZero()) {\r\n                var t = poly.clone();\r\n                a = a.clone();\r\n                T = a.divide(t);\r\n                poly = T[1];\r\n                a = t;\r\n            }\r\n\r\n            var gcd = core.Math2.QGCD.apply(null, a.coeffs);\r\n            if(!gcd.equals(1)) {\r\n                var l = a.coeffs.length;\r\n                for(var i = 0; i < l; i++) {\r\n                    a.coeffs[i] = a.coeffs[i].divide(gcd);\r\n                }\r\n            }\r\n            return a;\r\n        },\r\n        /**\r\n         * Differentiates the polynomial\r\n         * @returns {Polynomial}\r\n         */\r\n        diff: function () {\r\n            var new_array = [], l = this.coeffs.length;\r\n            for(var i = 1; i < l; i++)\r\n                new_array.push(this.coeffs[i].multiply(new Frac(i)));\r\n            this.coeffs = new_array;\r\n            return this;\r\n        },\r\n        /**\r\n         * Integrates the polynomial\r\n         * @returns {Polynomial} \r\n         */\r\n        integrate: function () {\r\n            var new_array = [0], l = this.coeffs.length;\r\n            for(var i = 0; i < l; i++) {\r\n                var c = new Frac(i + 1);\r\n                new_array[c] = this.coeffs[i].divide(c);\r\n            }\r\n            this.coeffs = new_array;\r\n            return this;\r\n        },\r\n        /**\r\n         * Returns the Greatest common factor of the polynomial\r\n         * @param {bool} toPolynomial - true if a polynomial is wanted\r\n         * @returns {Frac|Polynomial}\r\n         */\r\n        gcf: function (toPolynomial) {\r\n            //get the first nozero coefficient and returns its power\r\n            var fnz = function (a) {\r\n                for(var i = 0; i < a.length; i++)\r\n                    if(!a[i].equals(0))\r\n                        return i;\r\n            },\r\n                    ca = [];\r\n            for(var i = 0; i < this.coeffs.length; i++) {\r\n                var c = this.coeffs[i];\r\n                if(!c.equals(0) && ca.indexOf(c) === -1)\r\n                    ca.push(c);\r\n            }\r\n            var p = [core.Math2.QGCD.apply(undefined, ca), fnz(this.coeffs)].toDecimal();\r\n\r\n            if(toPolynomial) {\r\n                var parr = [];\r\n                parr[p[1] - 1] = p[0];\r\n                p = Polynomial.fromArray(parr, this.variable).fill();\r\n            }\r\n\r\n            return p;\r\n        },\r\n        /**\r\n         * Raises a polynomial P to a power p -> P^p. e.g. (x+1)^2\r\n         * @param {bool} incl_img - Include imaginary numbers \r\n         */\r\n        quad: function (incl_img) {\r\n            var roots = [];\r\n            if(this.coeffs.length > 3)\r\n                throw new Error('Cannot calculate quadratic order of ' + (this.coeffs.length - 1));\r\n            if(this.coeffs.length === 0)\r\n                throw new Error('Polynomial array has no terms');\r\n            var a = this.coeffs[2] || 0, b = this.coeffs[1] || 0, c = this.coeffs[0];\r\n            var dsc = b * b - 4 * a * c;\r\n            if(dsc < 0 && !incl_img)\r\n                return roots;\r\n            else {\r\n                roots[0] = (-b + Math.sqrt(dsc)) / (2 * a);\r\n                roots[1] = (-b - Math.sqrt(dsc)) / (2 * a);\r\n            }\r\n            return roots;\r\n        },\r\n        /**\r\n         * Makes polynomial square free\r\n         * @returns {Array}\r\n         */\r\n        squareFree: function () {\r\n\r\n            var a = this.clone(),\r\n                    i = 1,\r\n                    b = a.clone().diff(),\r\n                    c = a.clone().gcd(b),\r\n                    w = a.divide(c)[0];\r\n            var output = Polynomial.fromArray([new Frac(1)], a.variable);\r\n            while(!c.equalsNumber(1)) {\r\n                var y = w.gcd(c);\r\n                var z = w.divide(y)[0];\r\n                //one of the factors may have shown up since it's square but smaller than the \r\n                //one where finding\r\n                if(!z.equalsNumber(1) && i > 1) {\r\n                    var t = z.clone();\r\n                    for(var j = 1; j < i; j++)\r\n                        t.multiply(z.clone());\r\n                    z = t;\r\n                }\r\n                output = output.multiply(z);\r\n                i++;\r\n                w = y;\r\n                c = c.divide(y)[0];\r\n            }\r\n\r\n            return [output, w, i];\r\n        },\r\n        /**\r\n         * Converts polynomial to Symbol\r\n         * @returns {Symbol}\r\n         */\r\n        toSymbol: function () {\r\n            var l = this.coeffs.length,\r\n                    variable = this.variable;\r\n            if(l === 0)\r\n                return new core.Symbol(0);\r\n            var end = l - 1, str = '';\r\n\r\n            for(var i = 0; i < l; i++) {\r\n                //place the plus sign for all but the last one\r\n                var plus = i === end ? '' : '+',\r\n                        e = this.coeffs[i];\r\n                if(!e.equals(0))\r\n                    str += (e + '*' + variable + '^' + i + plus);\r\n            }\r\n            return _.parse(str);\r\n        },\r\n        /**\r\n         * Checks if polynomial is equal to a number\r\n         * @param {Number} x\r\n         * @returns {Boolean}\r\n         */\r\n        equalsNumber: function (x) {\r\n            this.trim();\r\n            return this.coeffs.length === 1 && this.coeffs[0].toDecimal() === String(x);\r\n        },\r\n        toString: function () {\r\n            return this.toSymbol().toString();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * TODO\r\n     * ===================================================================================\r\n     * THIS METHOD HAS A NASTY HIDDEN BUG. IT HAS INCONSISTENT RETURN TYPES PRIMARILY DUE TO \r\n     * WRONG ASSUMPTIONS AT THE BEGINNING. THE ASSUMPTION WAS THAT COEFFS WERE ALWAYS GOING BE NUMBERS\r\n     * NOT TAKING INTO ACCOUNT THAT IMAGINARY NUMBERS. FIXING THIS BREAKS WAY TOO MANY TESTS \r\n     * AT THEM MOMENT WHICH I DON'T HAVE TO FIX\r\n     * ===================================================================================\r\n     * If the symbols is of group PL or CP it will return the multipliers of each symbol\r\n     * as these are polynomial coefficients. CB symbols are glued together by multiplication\r\n     * so the symbol multiplier carries the coefficients for all contained symbols.\r\n     * For S it just returns it's own multiplier. This function doesn't care if it's a polynomial or not\r\n     * @param {Array} c The coefficient array\r\n     * @param {boolean} with_order \r\n     * @return {Array}\r\n     */\r\n    Symbol.prototype.coeffs = function (c, with_order) {\r\n        if(with_order && !this.isPoly(true))\r\n            _.error('Polynomial expected when requesting coefficients with order');\r\n        c = c || [];\r\n        var s = this.clone().distributeMultiplier();\r\n        if(s.isComposite()) {\r\n            for(var x in s.symbols) {\r\n                var sub = s.symbols[x];\r\n                if(sub.isComposite()) {\r\n                    sub.clone().distributeMultiplier().coeffs(c, with_order);\r\n                }\r\n                else {\r\n                    if(with_order)\r\n                        c[sub.isConstant() ? 0 : sub.power.toDecimal()] = sub.multiplier;\r\n                    else {\r\n                        c.push(sub.multiplier);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if(with_order)\r\n                c[s.isConstant(true) ? 0 : s.power.toDecimal()] = s.multiplier;\r\n            else {\r\n                if(s.group === CB && s.isImaginary()) {\r\n                    var m = new Symbol(s.multiplier);\r\n                    s.each(function (x) {\r\n                        //add the imaginary part\r\n                        if(x.isConstant(true) || x.imaginary)\r\n                            m = _.multiply(m, x);\r\n                    });\r\n                    c.push(m);\r\n                }\r\n                else\r\n                    c.push(s.multiplier);\r\n            }\r\n        }\r\n        //fill the holes\r\n        if(with_order) {\r\n            for(var i = 0; i < c.length; i++)\r\n                if(c[i] === undefined)\r\n                    c[i] = new Symbol(0);\r\n        }\r\n        return c;\r\n    };\r\n    Symbol.prototype.tBase = function (map) {\r\n        if(typeof map === 'undefined')\r\n            throw new Error('Symbol.tBase requires a map object!');\r\n        var terms = [];\r\n        var symbols = this.collectSymbols(null, null, null, true),\r\n                l = symbols.length;\r\n        for(var i = 0; i < l; i++) {\r\n            var symbol = symbols[i],\r\n                    g = symbol.group,\r\n                    nterm = new MVTerm(symbol.multiplier, [], map);\r\n            if(g === CB) {\r\n                for(var x in symbol.symbols) {\r\n                    var sym = symbol.symbols[x];\r\n                    nterm.terms[map[x]] = sym.power;\r\n                }\r\n            }\r\n            else {\r\n                nterm.terms[map[symbol.value]] = symbol.power;\r\n            }\r\n\r\n            terms.push(nterm.fill());\r\n            nterm.updateCount();\r\n        }\r\n        return terms;\r\n    };\r\n    Symbol.prototype.altVar = function (x) {\r\n        var m = this.multiplier.toString(), p = this.power.toString();\r\n        return (m === '1' ? '' : m + '*') + x + (p === '1' ? '' : '^' + p);\r\n    };\r\n    /**\r\n     * Checks to see if the symbols contain the same variables\r\n     * @param {Symbol} symbol\r\n     * @returns {Boolean}\r\n     */\r\n    Symbol.prototype.sameVars = function (symbol) {\r\n        if(!(this.symbols || this.group === symbol.group))\r\n            return false;\r\n        for(var x in this.symbols) {\r\n            var a = this.symbols[x], b = symbol.symbols[x];\r\n            if(!b)\r\n                return false;\r\n            if(a.value !== b.value)\r\n                return false;\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Groups the terms in a symbol with respect to a variable\r\n     * For instance the symbol {a*b^2*x^2+a*b*x^2+x+6} returns [6,1,a*b+a*b^2]\r\n     * @returns {Factors}\r\n     */\r\n    Symbol.prototype.groupTerms = function (x) {\r\n        x = String(x);\r\n        var f, p, egrouped;\r\n        var grouped = [];\r\n        this.each(function (e) {\r\n            if(e.group === PL) {\r\n                egrouped = e.groupTerms(x);\r\n                for(var i = 0; i < egrouped.length; i++) {\r\n                    var el = egrouped[i];\r\n                    if(el)\r\n                        grouped[i] = el;\r\n                }\r\n            }\r\n            else {\r\n                f = core.Utils.decompose_fn(e, x, true);\r\n                p = f.x.value === x ? Number(f.x.power) : 0;\r\n                //check if there's an existing value\r\n                grouped[p] = _.add(grouped[p] || new Symbol(0), f.a);\r\n            }\r\n        });\r\n        return grouped;\r\n    };\r\n    /**\r\n     * Use this to collect Factors\r\n     * @returns {Symbol[]}\r\n     */\r\n    Symbol.prototype.collectFactors = function () {\r\n        var factors = [];\r\n        if(this.group === CB)\r\n            this.each(function (x) {\r\n                factors.push(x.clone());\r\n            });\r\n        else\r\n            factors.push(this.clone());\r\n        return factors;\r\n    };\r\n    /**\r\n     * A container class for factors\r\n     * @returns {Factors}\r\n     */\r\n    function Factors() {\r\n        this.factors = {};\r\n        this.length = 0;\r\n    }\r\n    ;\r\n    Factors.prototype.getNumberSymbolics = function () {\r\n        var n = 0;\r\n        this.each(function (x) {\r\n            if(!x.isConstant(true))\r\n                n++;\r\n        });\r\n        return n;\r\n    };\r\n    /**\r\n     * Adds the factors to the factor object\r\n     * @param {Symbo} s\r\n     * @returns {Factors}\r\n     */\r\n    Factors.prototype.add = function (s) {\r\n        if(s.equals(0))\r\n            return this; //nothing to add\r\n\r\n        //we don't want to carry -1 as a factor. If a factor already exists,\r\n        //then add the minus one to that factor and return.\r\n        if(s.equals(-1) && this.length > 0) {\r\n            var fo = core.Utils.firstObject(this.factors, null, true);\r\n            this.add(_.symfunction(core.Settings.PARENTHESIS, [fo.obj]).negate());\r\n            delete this.factors[fo.key];\r\n            this.length--;\r\n            return this;\r\n        }\r\n\r\n        if(s.group === CB) {\r\n            var factors = this;\r\n            if(!s.multiplier.equals(1))\r\n                factors.add(new Symbol(s.multiplier));\r\n            s.each(function (x) {\r\n                factors.add(x);\r\n            });\r\n        }\r\n        else {\r\n            if(this.preAdd) //if a preAdd function was defined call it to do prep\r\n                s = this.preAdd(s);\r\n            if(this.pFactor) //if the symbol isn't linear add back the power\r\n                s = _.pow(s, new Symbol(this.pFactor));\r\n\r\n            var is_constant = s.isConstant();\r\n            if(is_constant && s.equals(1))\r\n                return this; //don't add 1\r\n            var v = is_constant ? s.value : s.text();\r\n            if(v in this.factors) {\r\n                this.factors[v] = _.multiply(this.factors[v], s);\r\n                //did the addition cancel out the existing factor? If so remove it and decrement the length\r\n                if(this.factors[v].equals(1)) {\r\n                    delete this.factors[v];\r\n                    this.length--;\r\n                }\r\n            }\r\n            else {\r\n                this.factors[v] = s;\r\n                this.length++;\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * Converts the factor object to a Symbol\r\n     * @returns {Symbol}\r\n     */\r\n    Factors.prototype.toSymbol = function () {\r\n        var factored = new Symbol(1);\r\n        var factors = Object.values(this.factors).sort(function (a, b) {\r\n            return a.group > b.group;\r\n        });\r\n\r\n        for(var i = 0, l = factors.length; i < l; i++) {\r\n            var f = factors[i];\r\n\r\n            //don't wrap group S or FN\r\n            var factor = f.power.equals(1) && f.fname !== '' /* don't wrap it twice */ ?\r\n                    _.symfunction(core.PARENTHESIS, [f]) : f;\r\n\r\n            factored = _.multiply(factored, factor);\r\n        }\r\n        if(factored.fname === '')\r\n            factored = Symbol.unwrapPARENS(factored);\r\n        return factored;\r\n    };\r\n    /**\r\n     * Merges 2 factor objects into one\r\n     * @param {Factor} o\r\n     * @returns {Factors}\r\n     */\r\n    Factors.prototype.merge = function (o) {\r\n        for(var x in o) {\r\n            if(x in this.factors)\r\n                this.factors[x] = _.multiply(this.factors[x], o[x]);\r\n            else\r\n                this.factors[x] = o[x];\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * The iterator for the factor object\r\n     * @param {Function} f - callback\r\n     * @returns {Factor}\r\n     */\r\n    Factors.prototype.each = function (f) {\r\n        for(var x in this.factors) {\r\n            var factor = this.factors[x];\r\n            if(factor.fname === core.PARENTHESIS && factor.isLinear())\r\n                factor = factor.args[0];\r\n            f.call(this, factor, x);\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * Return the number of factors contained in the factor object\r\n     * @returns {int}\r\n     */\r\n    Factors.prototype.count = function () {\r\n        return keys(this.factors).length;\r\n    };\r\n    /**\r\n     * Cleans up factors from -1\r\n     * @returns {undefined}\r\n     */\r\n    Factors.prototype.clean = function () {\r\n        try {\r\n            var h = core.Settings.CONST_HASH;\r\n            if(this.factors[h].lessThan(0)) {\r\n                if(this.factors[h].equals(-1))\r\n                    delete this.factors[h];\r\n                else\r\n                    this.factors[h].negate();\r\n                this.each(function (x) {\r\n                    x.negate();\r\n                });\r\n            }\r\n        }\r\n        catch(e) {\r\n        }\r\n        ;\r\n    };\r\n    Factors.prototype.toString = function () {\r\n        return this.toSymbol().toString();\r\n    };\r\n\r\n    //a wrapper for performing multivariate division\r\n    function MVTerm(coeff, terms, map) {\r\n        this.terms = terms || [];\r\n        this.coeff = coeff;\r\n        this.map = map; //careful! all maps are the same object\r\n        this.sum = new core.Frac(0);\r\n        this.image = undefined;\r\n    }\r\n    ;\r\n    MVTerm.prototype.updateCount = function () {\r\n        this.count = this.count || 0;\r\n        for(var i = 0; i < this.terms.length; i++) {\r\n            if(!this.terms[i].equals(0))\r\n                this.count++;\r\n        }\r\n        return this;\r\n    };\r\n    MVTerm.prototype.getVars = function () {\r\n        var vars = [];\r\n        for(var i = 0; i < this.terms.length; i++) {\r\n            var term = this.terms[i],\r\n                    rev_map = this.getRevMap();\r\n            if(!term.equals(0))\r\n                vars.push(this.rev_map[i]);\r\n        }\r\n        return vars.join(' ');\r\n    };\r\n    MVTerm.prototype.len = function () {\r\n        if(typeof this.count === 'undefined') {\r\n            this.updateCount();\r\n        }\r\n        return this.count;\r\n    };\r\n    MVTerm.prototype.toSymbol = function (rev_map) {\r\n        rev_map = rev_map || this.getRevMap();\r\n        var symbol = new Symbol(this.coeff);\r\n        for(var i = 0; i < this.terms.length; i++) {\r\n            var v = rev_map[i],\r\n                    t = this.terms[i];\r\n            if(t.equals(0) || v === CONST_HASH)\r\n                continue;\r\n            var mapped = new Symbol(v);\r\n            mapped.power = t;\r\n            symbol = _.multiply(symbol, mapped);\r\n        }\r\n        return symbol;\r\n    };\r\n    MVTerm.prototype.getRevMap = function () {\r\n        if(this.rev_map)\r\n            return this.rev_map;\r\n        var o = {};\r\n        for(var x in this.map)\r\n            o[this.map[x]] = x;\r\n        this.rev_map = o;\r\n        return o;\r\n    };\r\n    MVTerm.prototype.generateImage = function () {\r\n        this.image = this.terms.join(' ');\r\n        return this;\r\n    },\r\n            MVTerm.prototype.getImg = function () {\r\n                if(!this.image)\r\n                    this.generateImage();\r\n                return this.image;\r\n            },\r\n            MVTerm.prototype.fill = function () {\r\n                var l = this.map.length;\r\n                for(var i = 0; i < l; i++) {\r\n                    if(typeof this.terms[i] === 'undefined')\r\n                        this.terms[i] = new core.Frac(0);\r\n                    else {\r\n                        this.sum = this.sum.add(this.terms[i]);\r\n                    }\r\n                }\r\n                return this;\r\n            };\r\n    MVTerm.prototype.divide = function (mvterm) {\r\n        var c = this.coeff.divide(mvterm.coeff),\r\n                l = this.terms.length,\r\n                new_mvterm = new MVTerm(c, [], this.map);\r\n        for(var i = 0; i < l; i++) {\r\n            new_mvterm.terms[i] = this.terms[i].subtract(mvterm.terms[i]);\r\n            new_mvterm.sum = new_mvterm.sum.add(new_mvterm.terms[i]);\r\n        }\r\n        return new_mvterm;\r\n    };\r\n    MVTerm.prototype.multiply = function (mvterm) {\r\n        var c = this.coeff.multiply(mvterm.coeff),\r\n                l = this.terms.length,\r\n                new_mvterm = new MVTerm(c, [], this.map);\r\n        for(var i = 0; i < l; i++) {\r\n            new_mvterm.terms[i] = this.terms[i].add(mvterm.terms[i]);\r\n            new_mvterm.sum = new_mvterm.sum.add(new_mvterm.terms[i]);\r\n        }\r\n        return new_mvterm;\r\n    };\r\n    MVTerm.prototype.isZero = function () {\r\n        return this.coeff.equals(0);\r\n    };\r\n    MVTerm.prototype.toString = function () {\r\n        return '{ coeff: ' + this.coeff.toString() + ', terms: [' +\r\n                this.terms.join(',') + ']: sum: ' + this.sum.toString() + ', count: ' + this.count + '}';\r\n    };\r\n\r\n    core.Utils.toMapObj = function (arr) {\r\n        var c = 0, o = {};\r\n        for(var i = 0; i < arr.length; i++) {\r\n            var v = arr[i];\r\n            if(typeof o[v] === 'undefined') {\r\n                o[v] = c;\r\n                c++;\r\n            }\r\n        }\r\n        o.length = c;\r\n        return o;\r\n    };\r\n    core.Utils.filledArray = function (v, n, clss) {\r\n        var a = [];\r\n        while(n--) {\r\n            a[n] = clss ? new clss(v) : v;\r\n        }\r\n        return a;\r\n    };\r\n    core.Utils.arrSum = function (arr) {\r\n        var sum = 0, l = arr.length;\r\n        for(var i = 0; i < l; i++)\r\n            sum += arr[i];\r\n        return sum;\r\n    };\r\n    /**\r\n     * Determines if 2 arrays have intersecting elements.\r\n     * @param {Array} a\r\n     * @param {Array} b\r\n     * @returns {Boolean} True if a and b have intersecting elements.\r\n     */\r\n    core.Utils.haveIntersection = function (a, b) {\r\n        var t;\r\n        if(b.length > a.length)\r\n            t = b, b = a, a = t; // indexOf to loop over shorter\r\n        return a.some(function (e) {\r\n            return b.indexOf(e) > -1;\r\n        });\r\n    };\r\n    /**\r\n     * Substitutes out functions as variables so they can be used in regular algorithms\r\n     * @param {Symbol} symbol\r\n     * @param {Object} map\r\n     * @returns {String} The expression string\r\n     */\r\n    core.Utils.subFunctions = function (symbol, map) {\r\n        map = map || {};\r\n        var subbed = [];\r\n        symbol.each(function (x) {\r\n            if(x.group === FN || x.previousGroup === FN) {\r\n                //we need a new variable name so why not use one of the existing\r\n                var val = core.Utils.text(x, 'hash'), tvar = map[val];\r\n                if(!tvar) {\r\n                    //generate a unique enough name\r\n                    var t = x.fname + keys(map).length;\r\n                    map[val] = t;\r\n                    subbed.push(x.altVar(t));\r\n                }\r\n                else\r\n                    subbed.push(x.altVar(tvar));\r\n            }\r\n            else if(x.group === CB || x.group === PL || x.group === CP) {\r\n                subbed.push(core.Utils.subFunctions(x, map));\r\n            }\r\n            else\r\n                subbed.push(x.text());\r\n        });\r\n        if(symbol.group === CP || symbol.group === PL)\r\n            return symbol.altVar(core.Utils.inBrackets(subbed.join('+')));\r\n        ;\r\n        if(symbol.group === CB)\r\n            return symbol.altVar(core.Utils.inBrackets(subbed.join('*')));\r\n        return symbol.text();\r\n    };\r\n    core.Utils.getFunctionsSubs = function (map) {\r\n        var subs = {};\r\n        //prepare substitutions\r\n        for(var x in map)\r\n            subs[map[x]] = _.parse(x);\r\n        return subs;\r\n    };\r\n\r\n    var __ = core.Algebra = {\r\n        version: '1.4.6',\r\n        proots: function (symbol, decp) {\r\n            //the roots will be rounded up to 7 decimal places.\r\n            //if this causes trouble you can explicitly pass in a different number of places\r\n            //rarr for polynomial of power n is of format [n, coeff x^n, coeff x^(n-1), ..., coeff x^0]\r\n            decp = decp || 7;\r\n            var zeros = 0;\r\n            var known_roots = [];\r\n            var get_roots = function (rarr, powers, max) {\r\n                var roots = calcroots(rarr, powers, max).concat(known_roots);\r\n                for(var i = 0; i < zeros; i++)\r\n                    roots.unshift(0);\r\n                return roots;\r\n            };\r\n\r\n            if(symbol instanceof Symbol && symbol.isPoly()) {\r\n                symbol.distributeMultiplier();\r\n                //make it so the symbol has a constants as the lowest term\r\n                if(symbol.group === PL) {\r\n                    var lowest_pow = core.Utils.arrayMin(keys(symbol.symbols));\r\n                    var lowest_symbol = symbol.symbols[lowest_pow].clone().toUnitMultiplier();\r\n                    symbol = _.expand(_.divide(symbol, lowest_symbol));\r\n                    known_roots.push(0); //add zero since this is a known root\r\n                }\r\n                if(symbol.group === core.groups.S) {\r\n                    return [0];\r\n                }\r\n                else if(symbol.group === core.groups.PL) {\r\n                    var powers = keys(symbol.symbols),\r\n                            minpower = core.Utils.arrayMin(powers),\r\n                            symbol = core.PARSER.divide(symbol, core.PARSER.parse(symbol.value + '^' + minpower));\r\n                }\r\n\r\n                var variable = keys(symbol.symbols).sort().pop(),\r\n                        sym = symbol.group === core.groups.PL ? symbol.symbols : symbol.symbols[variable],\r\n                        g = sym.group,\r\n                        powers = g === S ? [sym.power.toDecimal()] : keys(sym.symbols),\r\n                        rarr = [],\r\n                        max = core.Utils.arrayMax(powers); //maximum power and degree of polynomial to be solved\r\n\r\n                // Prepare the data\r\n                for(var i = 1; i <= max; i++) {\r\n                    var c = 0; //if there is no power then the hole must be filled with a zero\r\n                    if(powers.indexOf(i + '') !== -1) {\r\n                        if(g === S) {\r\n                            c = sym.multiplier;\r\n                        }\r\n                        else {\r\n                            c = sym.symbols[i].multiplier;\r\n                        }\r\n                    }\r\n                    // Insert the coeffient but from the front\r\n                    rarr.unshift(c);\r\n                }\r\n\r\n                rarr.push(symbol.symbols[CONST_HASH].multiplier);\r\n\r\n                if(sym.group === S)\r\n                    rarr[0] = sym.multiplier;//the symbol maybe of group CP with one variable\r\n\r\n                return get_roots(rarr, powers, max);\r\n            }\r\n            else if(core.Utils.isArray(symbol)) {\r\n                var parr = symbol;\r\n                var rarr = [],\r\n                        powers = [],\r\n                        last_power = 0;\r\n                for(var i = 0; i < parr.length; i++) {\r\n\r\n                    var coeff = parr[i][0],\r\n                            pow = parr[i][1],\r\n                            d = pow - last_power - 1;\r\n                    //insert the zeros\r\n                    for(var j = 0; j < d; j++)\r\n                        rarr.unshift(0);\r\n\r\n                    rarr.unshift(coeff);\r\n                    if(pow !== 0)\r\n                        powers.push(pow);\r\n                    last_power = pow;\r\n                }\r\n                var max = Math.max.apply(undefined, powers);\r\n\r\n                return get_roots(rarr, powers, max);\r\n            }\r\n            else {\r\n                throw new core.exceptions.NerdamerTypeError('Cannot calculate roots. Symbol must be a polynomial!');\r\n            }\r\n\r\n            function calcroots(rarr, powers, max) {\r\n                var MAXDEGREE = 100; // Degree of largest polynomial accepted by this script.\r\n\r\n                // Make a clone of the coefficients before appending the max power\r\n                var p = rarr.slice(0);\r\n\r\n                // Divide the string up into its individual entries, which--presumably--are separated by whitespace\r\n                rarr.unshift(max);\r\n\r\n                if(max > MAXDEGREE) {\r\n                    throw new core.exceptions.ValueLimitExceededError(\"This utility accepts polynomials of degree up to \" + MAXDEGREE + \". \");\r\n                }\r\n\r\n                var zeroi = [], // Vector of imaginary components of roots\r\n                        degreePar = {};    // degreePar is a dummy variable for passing the parameter POLYDEGREE by reference\r\n                degreePar.Degree = max;\r\n\r\n                for(i = 0; i < max; i++) {\r\n                    zeroi.push(0);\r\n                }\r\n                var zeror = zeroi.slice(0); // Vector of real components of roots\r\n\r\n                // Find the roots\r\n                //--> Begin Jenkins-Traub\r\n\r\n                /*\r\n                 * A verbatim copy of Mr. David Binner's Jenkins-Traub port\r\n                 */\r\n                function QuadSD_ak1(NN, u, v, p, q, iPar) {\r\n                    // Divides p by the quadratic 1, u, v placing the quotient in q and the remainder in a, b\r\n                    // iPar is a dummy variable for passing in the two parameters--a and b--by reference\r\n                    q[0] = iPar.b = p[0];\r\n                    q[1] = iPar.a = -(u * iPar.b) + p[1];\r\n\r\n                    for(var i = 2; i < NN; i++) {\r\n                        q[i] = -(u * iPar.a + v * iPar.b) + p[i];\r\n                        iPar.b = iPar.a;\r\n                        iPar.a = q[i];\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                function calcSC_ak1(DBL_EPSILON, N, a, b, iPar, K, u, v, qk) {\r\n                    // This routine calculates scalar quantities used to compute the next K polynomial and\r\n                    // new estimates of the quadratic coefficients.\r\n                    // calcSC -\tinteger variable set here indicating how the calculations are normalized\r\n                    // to avoid overflow.\r\n                    // iPar is a dummy variable for passing in the nine parameters--a1, a3, a7, c, d, e, f, g, and h --by reference\r\n\r\n                    // sdPar is a dummy variable for passing the two parameters--c and d--into QuadSD_ak1 by reference\r\n                    var sdPar = new Object(),\r\n                            // TYPE = 3 indicates the quadratic is almost a factor of K\r\n                            dumFlag = 3;\r\n\r\n                    // Synthetic division of K by the quadratic 1, u, v\r\n                    sdPar.b = sdPar.a = 0.0;\r\n                    QuadSD_ak1(N, u, v, K, qk, sdPar);\r\n                    iPar.c = sdPar.a;\r\n                    iPar.d = sdPar.b;\r\n\r\n                    if(Math.abs(iPar.c) <= (100.0 * DBL_EPSILON * Math.abs(K[N - 1]))) {\r\n                        if(Math.abs(iPar.d) <= (100.0 * DBL_EPSILON * Math.abs(K[N - 2])))\r\n                            return dumFlag;\r\n                    }\r\n\r\n                    iPar.h = v * b;\r\n                    if(Math.abs(iPar.d) >= Math.abs(iPar.c)) {\r\n                        // TYPE = 2 indicates that all formulas are divided by d\r\n                        dumFlag = 2;\r\n                        iPar.e = a / (iPar.d);\r\n                        iPar.f = (iPar.c) / (iPar.d);\r\n                        iPar.g = u * b;\r\n                        iPar.a3 = (iPar.e) * ((iPar.g) + a) + (iPar.h) * (b / (iPar.d));\r\n                        iPar.a1 = -a + (iPar.f) * b;\r\n                        iPar.a7 = (iPar.h) + ((iPar.f) + u) * a;\r\n                    }\r\n                    else {\r\n                        // TYPE = 1 indicates that all formulas are divided by c;\r\n                        dumFlag = 1;\r\n                        iPar.e = a / (iPar.c);\r\n                        iPar.f = (iPar.d) / (iPar.c);\r\n                        iPar.g = (iPar.e) * u;\r\n                        iPar.a3 = (iPar.e) * a + ((iPar.g) + (iPar.h) / (iPar.c)) * b;\r\n                        iPar.a1 = -(a * ((iPar.d) / (iPar.c))) + b;\r\n                        iPar.a7 = (iPar.g) * (iPar.d) + (iPar.h) * (iPar.f) + a;\r\n                    }\r\n                    return dumFlag;\r\n                }\r\n\r\n                function nextK_ak1(DBL_EPSILON, N, tFlag, a, b, iPar, K, qk, qp) {\r\n                    // Computes the next K polynomials using the scalars computed in calcSC_ak1\r\n                    // iPar is a dummy variable for passing in three parameters--a1, a3, and a7\r\n                    var temp;\r\n                    if(tFlag == 3) {\t// Use unscaled form of the recurrence\r\n                        K[1] = K[0] = 0.0;\r\n                        for(var i = 2; i < N; i++) {\r\n                            K[i] = qk[i - 2];\r\n                        }\r\n                        return;\r\n                    }\r\n\r\n                    temp = ((tFlag == 1) ? b : a);\r\n                    if(Math.abs(iPar.a1) > (10.0 * DBL_EPSILON * Math.abs(temp))) {\r\n                        // Use scaled form of the recurrence\r\n                        iPar.a7 /= iPar.a1;\r\n                        iPar.a3 /= iPar.a1;\r\n                        K[0] = qp[0];\r\n                        K[1] = -(qp[0] * iPar.a7) + qp[1];\r\n                        for(var i = 2; i < N; i++)\r\n                            K[i] = -(qp[i - 1] * iPar.a7) + qk[i - 2] * iPar.a3 + qp[i];\r\n                    }\r\n                    else {\r\n                        // If a1 is nearly zero, then use a special form of the recurrence\r\n                        K[0] = 0.0;\r\n                        K[1] = -(qp[0] * iPar.a7);\r\n                        for(var i = 2; i < N; i++) {\r\n                            K[i] = -(qp[i - 1] * iPar.a7) + qk[i - 2] * iPar.a3;\r\n                        }\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                function newest_ak1(tFlag, iPar, a, a1, a3, a7, b, c, d, f, g, h, u, v, K, N, p) {\r\n                    // Compute new estimates of the quadratic coefficients using the scalars computed in calcSC_ak1\r\n                    // iPar is a dummy variable for passing in the two parameters--uu and vv--by reference\r\n                    // iPar.a = uu, iPar.b = vv\r\n\r\n                    var a4, a5, b1, b2, c1, c2, c3, c4, temp;\r\n                    iPar.b = iPar.a = 0.0;// The quadratic is zeroed\r\n\r\n                    if(tFlag != 3) {\r\n                        if(tFlag != 2) {\r\n                            a4 = a + u * b + h * f;\r\n                            a5 = c + (u + v * f) * d;\r\n                        }\r\n                        else {\r\n                            a4 = (a + g) * f + h;\r\n                            a5 = (f + u) * c + v * d;\r\n                        }\r\n\r\n                        // Evaluate new quadratic coefficients\r\n                        b1 = -(K[N - 1] / p[N]);\r\n                        b2 = -(K[N - 2] + b1 * p[N - 1]) / p[N];\r\n                        c1 = v * b2 * a1;\r\n                        c2 = b1 * a7;\r\n                        c3 = b1 * b1 * a3;\r\n                        c4 = -(c2 + c3) + c1;\r\n                        temp = -c4 + a5 + b1 * a4;\r\n                        if(temp != 0.0) {\r\n                            iPar.a = -((u * (c3 + c2) + v * (b1 * a1 + b2 * a7)) / temp) + u;\r\n                            iPar.b = v * (1.0 + c4 / temp);\r\n                        }\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                function Quad_ak1(a, b1, c, iPar) {\r\n                    // Calculates the zeros of the quadratic a*Z^2 + b1*Z + c\r\n                    // The quadratic formula, modified to avoid overflow, is used to find the larger zero if the\r\n                    // zeros are real and both zeros are complex. The smaller real zero is found directly from\r\n                    // the product of the zeros c/a.\r\n\r\n                    // iPar is a dummy variable for passing in the four parameters--sr, si, lr, and li--by reference\r\n\r\n                    var b, d, e;\r\n                    iPar.sr = iPar.si = iPar.lr = iPar.li = 0.0;\r\n\r\n                    if(a == 0) {\r\n                        iPar.sr = ((b1 != 0) ? -(c / b1) : iPar.sr);\r\n                        return;\r\n                    }\r\n                    if(c == 0) {\r\n                        iPar.lr = -(b1 / a);\r\n                        return;\r\n                    }\r\n\r\n                    // Compute discriminant avoiding overflow\r\n                    b = b1 / 2.0;\r\n                    if(Math.abs(b) < Math.abs(c)) {\r\n                        e = ((c >= 0) ? a : -a);\r\n                        e = -e + b * (b / Math.abs(c));\r\n                        d = Math.sqrt(Math.abs(e)) * Math.sqrt(Math.abs(c));\r\n                    }\r\n                    else {\r\n                        e = -((a / b) * (c / b)) + 1.0;\r\n                        d = Math.sqrt(Math.abs(e)) * (Math.abs(b));\r\n                    }\r\n\r\n                    if(e >= 0) {\r\n                        // Real zeros\r\n                        d = ((b >= 0) ? -d : d);\r\n                        iPar.lr = (-b + d) / a;\r\n                        iPar.sr = ((iPar.lr != 0) ? (c / (iPar.lr)) / a : iPar.sr);\r\n                    }\r\n                    else {\r\n                        // Complex conjugate zeros\r\n                        iPar.lr = iPar.sr = -(b / a);\r\n                        iPar.si = Math.abs(d / a);\r\n                        iPar.li = -(iPar.si);\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                function QuadIT_ak1(DBL_EPSILON, N, iPar, uu, vv, qp, NN, sdPar, p, qk, calcPar, K) {\r\n                    // Variable-shift K-polynomial iteration for a quadratic factor converges only if the\r\n                    // zeros are equimodular or nearly so.\r\n                    // iPar is a dummy variable for passing in the five parameters--NZ, lzi, lzr, szi, and szr--by reference\r\n                    // sdPar is a dummy variable for passing the two parameters--a and b--in by reference\r\n                    // calcPar is a dummy variable for passing the nine parameters--a1, a3, a7, c, d, e, f, g, and h --in by reference\r\n\r\n                    // qPar is a dummy variable for passing the four parameters--szr, szi, lzr, and lzi--into Quad_ak1 by reference\r\n                    var qPar = new Object(),\r\n                            ee, mp, omp, relstp, t, u, ui, v, vi, zm,\r\n                            i, j = 0, tFlag, triedFlag = 0;   // Integer variables\r\n\r\n                    iPar.NZ = 0;// Number of zeros found\r\n                    u = uu; // uu and vv are coefficients of the starting quadratic\r\n                    v = vv;\r\n\r\n                    do {\r\n                        qPar.li = qPar.lr = qPar.si = qPar.sr = 0.0;\r\n                        Quad_ak1(1.0, u, v, qPar);\r\n                        iPar.szr = qPar.sr;\r\n                        iPar.szi = qPar.si;\r\n                        iPar.lzr = qPar.lr;\r\n                        iPar.lzi = qPar.li;\r\n\r\n                        // Return if roots of the quadratic are real and not close to multiple or nearly\r\n                        // equal and of opposite sign.\r\n                        if(Math.abs(Math.abs(iPar.szr) - Math.abs(iPar.lzr)) > 0.01 * Math.abs(iPar.lzr))\r\n                            break;\r\n\r\n                        // Evaluate polynomial by quadratic synthetic division\r\n\r\n                        QuadSD_ak1(NN, u, v, p, qp, sdPar);\r\n\r\n                        mp = Math.abs(-((iPar.szr) * (sdPar.b)) + (sdPar.a)) + Math.abs((iPar.szi) * (sdPar.b));\r\n\r\n                        // Compute a rigorous bound on the rounding error in evaluating p\r\n\r\n                        zm = Math.sqrt(Math.abs(v));\r\n                        ee = 2.0 * Math.abs(qp[0]);\r\n                        t = -((iPar.szr) * (sdPar.b));\r\n\r\n                        for(i = 1; i < N; i++) {\r\n                            ee = ee * zm + Math.abs(qp[i]);\r\n                        }\r\n\r\n                        ee = ee * zm + Math.abs(t + sdPar.a);\r\n                        ee = (9.0 * ee + 2.0 * Math.abs(t) - 7.0 * (Math.abs((sdPar.a) + t) + zm * Math.abs((sdPar.b)))) * DBL_EPSILON;\r\n\r\n                        // Iteration has converged sufficiently if the polynomial value is less than 20 times this bound\r\n                        if(mp <= 20.0 * ee) {\r\n                            iPar.NZ = 2;\r\n                            break;\r\n                        }\r\n\r\n                        j++;\r\n                        // Stop iteration after 20 steps\r\n                        if(j > 20)\r\n                            break;\r\n                        if(j >= 2) {\r\n                            if((relstp <= 0.01) && (mp >= omp) && (!triedFlag)) {\r\n                                // A cluster appears to be stalling the convergence. Five fixed shift\r\n                                // steps are taken with a u, v close to the cluster.\r\n                                relstp = ((relstp < DBL_EPSILON) ? Math.sqrt(DBL_EPSILON) : Math.sqrt(relstp));\r\n                                u -= u * relstp;\r\n                                v += v * relstp;\r\n\r\n                                QuadSD_ak1(NN, u, v, p, qp, sdPar);\r\n                                for(i = 0; i < 5; i++) {\r\n                                    tFlag = calcSC_ak1(DBL_EPSILON, N, sdPar.a, sdPar.b, calcPar, K, u, v, qk);\r\n                                    nextK_ak1(DBL_EPSILON, N, tFlag, sdPar.a, sdPar.b, calcPar, K, qk, qp);\r\n                                }\r\n\r\n                                triedFlag = 1;\r\n                                j = 0;\r\n\r\n                            }\r\n                        }\r\n                        omp = mp;\r\n\r\n                        // Calculate next K polynomial and new u and v\r\n                        tFlag = calcSC_ak1(DBL_EPSILON, N, sdPar.a, sdPar.b, calcPar, K, u, v, qk);\r\n                        nextK_ak1(DBL_EPSILON, N, tFlag, sdPar.a, sdPar.b, calcPar, K, qk, qp);\r\n                        tFlag = calcSC_ak1(DBL_EPSILON, N, sdPar.a, sdPar.b, calcPar, K, u, v, qk);\r\n                        newest_ak1(tFlag, sdPar, sdPar.a, calcPar.a1, calcPar.a3, calcPar.a7, sdPar.b, calcPar.c, calcPar.d, calcPar.f, calcPar.g, calcPar.h, u, v, K, N, p);\r\n                        ui = sdPar.a;\r\n                        vi = sdPar.b;\r\n\r\n                        // If vi is zero, the iteration is not converging\r\n                        if(vi != 0) {\r\n                            relstp = Math.abs((-v + vi) / vi);\r\n                            u = ui;\r\n                            v = vi;\r\n                        }\r\n                    }\r\n                    while(vi != 0);\r\n                    return;\r\n                }\r\n\r\n                function RealIT_ak1(DBL_EPSILON, iPar, sdPar, N, p, NN, qp, K, qk) {\r\n                    // Variable-shift H-polynomial iteration for a real zero\r\n                    // sss\t- starting iterate = sdPar.a\r\n                    // NZ\t\t- number of zeros found = iPar.NZ\r\n                    // dumFlag\t- flag to indicate a pair of zeros near real axis, returned to iFlag\r\n\r\n                    var ee, kv, mp, ms, omp, pv, s, t,\r\n                            dumFlag, i, j, nm1 = N - 1;   // Integer variables\r\n\r\n                    iPar.NZ = j = dumFlag = 0;\r\n                    s = sdPar.a;\r\n\r\n                    for(; ; ) {\r\n                        pv = p[0];\r\n\r\n                        // Evaluate p at s\r\n                        qp[0] = pv;\r\n                        for(i = 1; i < NN; i++) {\r\n                            qp[i] = pv = pv * s + p[i];\r\n                        }\r\n                        mp = Math.abs(pv);\r\n\r\n                        // Compute a rigorous bound on the error in evaluating p\r\n                        ms = Math.abs(s);\r\n                        ee = 0.5 * Math.abs(qp[0]);\r\n                        for(i = 1; i < NN; i++) {\r\n                            ee = ee * ms + Math.abs(qp[i]);\r\n                        }\r\n\r\n                        // Iteration has converged sufficiently if the polynomial value is less than\r\n                        // 20 times this bound\r\n                        if(mp <= 20.0 * DBL_EPSILON * (2.0 * ee - mp)) {\r\n                            iPar.NZ = 1;\r\n                            iPar.szr = s;\r\n                            iPar.szi = 0.0;\r\n                            break;\r\n                        }\r\n                        j++;\r\n                        // Stop iteration after 10 steps\r\n                        if(j > 10)\r\n                            break;\r\n\r\n                        if(j >= 2) {\r\n                            if((Math.abs(t) <= 0.001 * Math.abs(-t + s)) && (mp > omp)) {\r\n                                // A cluster of zeros near the real axis has been encountered.\r\n                                // Return with iFlag set to initiate a quadratic iteration.\r\n                                dumFlag = 1;\r\n                                iPar.a = s;\r\n                                break;\r\n                            } // End if ((fabs(t) <= 0.001*fabs(s - t)) && (mp > omp))\r\n                        } //End if (j >= 2)\r\n\r\n                        // Return if the polynomial value has increased significantly\r\n                        omp = mp;\r\n\r\n                        // Compute t, the next polynomial and the new iterate\r\n                        qk[0] = kv = K[0];\r\n                        for(i = 1; i < N; i++) {\r\n                            qk[i] = kv = kv * s + K[i];\r\n                        }\r\n\r\n                        if(Math.abs(kv) > Math.abs(K[nm1]) * 10.0 * DBL_EPSILON) {\r\n                            // Use the scaled form of the recurrence if the value of K at s is non-zero\r\n                            t = -(pv / kv);\r\n                            K[0] = qp[0];\r\n                            for(i = 1; i < N; i++) {\r\n                                K[i] = t * qk[i - 1] + qp[i];\r\n                            }\r\n                        }\r\n                        else {\r\n                            // Use unscaled form\r\n                            K[0] = 0.0;\r\n                            for(i = 1; i < N; i++)\r\n                                K[i] = qk[i - 1];\r\n                        }\r\n\r\n                        kv = K[0];\r\n                        for(i = 1; i < N; i++) {\r\n                            kv = kv * s + K[i];\r\n                        }\r\n                        t = ((Math.abs(kv) > (Math.abs(K[nm1]) * 10.0 * DBL_EPSILON)) ? -(pv / kv) : 0.0);\r\n                        s += t;\r\n                    }\r\n                    return dumFlag;\r\n                }\r\n\r\n                function Fxshfr_ak1(DBL_EPSILON, MDP1, L2, sr, v, K, N, p, NN, qp, u, iPar) {\r\n\r\n                    // Computes up to L2 fixed shift K-polynomials, testing for convergence in the linear or\r\n                    // quadratic case. Initiates one of the variable shift iterations and returns with the\r\n                    // number of zeros found.\r\n                    // L2\tlimit of fixed shift steps\r\n                    // iPar is a dummy variable for passing in the five parameters--NZ, lzi, lzr, szi, and szr--by reference\r\n                    // NZ\tnumber of zeros found\r\n                    var sdPar = new Object(), // sdPar is a dummy variable for passing the two parameters--a and b--into QuadSD_ak1 by reference\r\n                            calcPar = new Object(),\r\n                            // calcPar is a dummy variable for passing the nine parameters--a1, a3, a7, c, d, e, f, g, and h --into calcSC_ak1 by reference\r\n\r\n                            qk = new Array(MDP1),\r\n                            svk = new Array(MDP1),\r\n                            a, b, betas, betav, oss, ots, otv, ovv, s, ss, ts, tss, tv, tvv, ui, vi, vv,\r\n                            fflag, i, iFlag = 1, j, spass, stry, tFlag, vpass, vtry;     // Integer variables\r\n\r\n                    iPar.NZ = 0;\r\n                    betav = betas = 0.25;\r\n                    oss = sr;\r\n                    ovv = v;\r\n\r\n                    //Evaluate polynomial by synthetic division\r\n                    sdPar.b = sdPar.a = 0.0;\r\n                    QuadSD_ak1(NN, u, v, p, qp, sdPar);\r\n                    a = sdPar.a;\r\n                    b = sdPar.b;\r\n                    calcPar.h = calcPar.g = calcPar.f = calcPar.e = calcPar.d = calcPar.c = calcPar.a7 = calcPar.a3 = calcPar.a1 = 0.0;\r\n                    tFlag = calcSC_ak1(DBL_EPSILON, N, a, b, calcPar, K, u, v, qk);\r\n\r\n                    for(j = 0; j < L2; j++) {\r\n                        fflag = 1;\r\n\r\n                        // Calculate next K polynomial and estimate v\r\n                        nextK_ak1(DBL_EPSILON, N, tFlag, a, b, calcPar, K, qk, qp);\r\n                        tFlag = calcSC_ak1(DBL_EPSILON, N, a, b, calcPar, K, u, v, qk);\r\n\r\n                        // Use sdPar for passing in uu and vv instead of defining a brand-new variable.\r\n                        // sdPar.a = ui, sdPar.b = vi\r\n                        newest_ak1(tFlag, sdPar, a, calcPar.a1, calcPar.a3, calcPar.a7, b, calcPar.c, calcPar.d, calcPar.f, calcPar.g, calcPar.h, u, v, K, N, p);\r\n                        ui = sdPar.a;\r\n                        vv = vi = sdPar.b;\r\n\r\n                        // Estimate s\r\n                        ss = ((K[N - 1] != 0.0) ? -(p[N] / K[N - 1]) : 0.0);\r\n                        ts = tv = 1.0;\r\n\r\n                        if((j != 0) && (tFlag != 3)) {\r\n                            // Compute relative measures of convergence of s and v sequences\r\n                            tv = ((vv != 0.0) ? Math.abs((vv - ovv) / vv) : tv);\r\n                            ts = ((ss != 0.0) ? Math.abs((ss - oss) / ss) : ts);\r\n\r\n                            // If decreasing, multiply the two most recent convergence measures\r\n                            tvv = ((tv < otv) ? tv * otv : 1.0);\r\n                            tss = ((ts < ots) ? ts * ots : 1.0);\r\n\r\n                            // Compare with convergence criteria\r\n                            vpass = ((tvv < betav) ? 1 : 0);\r\n                            spass = ((tss < betas) ? 1 : 0);\r\n\r\n                            if((spass) || (vpass)) {\r\n\r\n                                // At least one sequence has passed the convergence test.\r\n                                // Store variables before iterating\r\n\r\n                                for(i = 0; i < N; i++) {\r\n                                    svk[i] = K[i];\r\n                                }\r\n                                s = ss;\r\n\r\n                                // Choose iteration according to the fastest converging sequence\r\n\r\n                                stry = vtry = 0;\r\n\r\n                                for(; ; ) {\r\n                                    if((fflag && ((fflag = 0) == 0)) && ((spass) && (!vpass || (tss < tvv)))) {\r\n                                        ;// Do nothing. Provides a quick \"short circuit\".\r\n                                    }\r\n                                    else {\r\n                                        QuadIT_ak1(DBL_EPSILON, N, iPar, ui, vi, qp, NN, sdPar, p, qk, calcPar, K);\r\n                                        a = sdPar.a;\r\n                                        b = sdPar.b;\r\n\r\n                                        if((iPar.NZ) > 0)\r\n                                            return;\r\n\r\n                                        // Quadratic iteration has failed. Flag that it has been tried and decrease the\r\n                                        // convergence criterion\r\n                                        iFlag = vtry = 1;\r\n                                        betav *= 0.25;\r\n\r\n                                        // Try linear iteration if it has not been tried and the s sequence is converging\r\n                                        if(stry || (!spass)) {\r\n                                            iFlag = 0;\r\n                                        }\r\n                                        else {\r\n                                            for(i = 0; i < N; i++)\r\n                                                K[i] = svk[i];\r\n                                        }\r\n                                    }\r\n                                    //fflag = 0;\r\n                                    if(iFlag != 0) {\r\n                                        // Use sdPar for passing in s instead of defining a brand-new variable.\r\n                                        // sdPar.a = s\r\n                                        sdPar.a = s;\r\n                                        iFlag = RealIT_ak1(DBL_EPSILON, iPar, sdPar, N, p, NN, qp, K, qk);\r\n                                        s = sdPar.a;\r\n\r\n                                        if((iPar.NZ) > 0)\r\n                                            return;\r\n\r\n                                        // Linear iteration has failed. Flag that it has been tried and decrease the\r\n                                        // convergence criterion\r\n                                        stry = 1;\r\n                                        betas *= 0.25;\r\n\r\n                                        if(iFlag != 0) {\r\n                                            // If linear iteration signals an almost double real zero, attempt quadratic iteration\r\n                                            ui = -(s + s);\r\n                                            vi = s * s;\r\n                                            continue;\r\n\r\n                                        }\r\n                                    }\r\n\r\n                                    // Restore variables\r\n                                    for(i = 0; i < N; i++)\r\n                                        K[i] = svk[i];\r\n\r\n                                    // Try quadratic iteration if it has not been tried and the v sequence is converging\r\n                                    if(!vpass || vtry)\r\n                                        break;\t\t// Break out of infinite for loop\r\n\r\n                                }\r\n\r\n                                // Re-compute qp and scalar values to continue the second stage\r\n\r\n                                QuadSD_ak1(NN, u, v, p, qp, sdPar);\r\n                                a = sdPar.a;\r\n                                b = sdPar.b;\r\n\r\n                                tFlag = calcSC_ak1(DBL_EPSILON, N, a, b, calcPar, K, u, v, qk);\r\n                            }\r\n                        }\r\n                        ovv = vv;\r\n                        oss = ss;\r\n                        otv = tv;\r\n                        ots = ts;\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                function rpSolve(degPar, p, zeror, zeroi) {\r\n                    var N = degPar.Degree,\r\n                            RADFAC = 3.14159265358979323846 / 180, // Degrees-to-radians conversion factor = PI/180\r\n                            LB2 = Math.LN2, // Dummy variable to avoid re-calculating this value in loop below\r\n                            MDP1 = degPar.Degree + 1,\r\n                            K = new Array(MDP1),\r\n                            pt = new Array(MDP1),\r\n                            qp = new Array(MDP1),\r\n                            temp = new Array(MDP1),\r\n                            // qPar is a dummy variable for passing the four parameters--sr, si, lr, and li--by reference\r\n                            qPar = new Object(),\r\n                            // Fxshfr_Par is a dummy variable for passing parameters by reference : NZ, lzi, lzr, szi, szr);\r\n                            Fxshfr_Par = new Object(),\r\n                            bnd, DBL_EPSILON, df, dx, factor, ff, moduli_max, moduli_min, sc, x, xm,\r\n                            aa, bb, cc, sr, t, u, xxx,\r\n                            j, jj, l, NM1, NN, zerok;// Integer variables\r\n\r\n                    // Calculate the machine epsilon and store in the variable DBL_EPSILON.\r\n                    // To calculate this value, just use existing variables rather than create new ones that will be used only for this code block\r\n                    aa = 1.0;\r\n                    do {\r\n                        DBL_EPSILON = aa;\r\n                        aa /= 2;\r\n                        bb = 1.0 + aa;\r\n                    }\r\n                    while(bb > 1.0);\r\n\r\n                    var LO = Number.MIN_VALUE / DBL_EPSILON,\r\n                            cosr = Math.cos(94.0 * RADFAC), // = -0.069756474\r\n                            sinr = Math.sin(94.0 * RADFAC), // = 0.99756405\r\n                            xx = Math.sqrt(0.5), // = 0.70710678\r\n                            yy = -xx;\r\n\r\n                    Fxshfr_Par.NZ = j = 0;\r\n                    Fxshfr_Par.szr = Fxshfr_Par.szi = Fxshfr_Par.lzr = Fxshfr_Par.lzi = 0.0;\r\n\r\n                    // Remove zeros at the origin, if any\r\n                    while(p[N] == 0) {\r\n                        zeror[j] = zeroi[j] = 0;\r\n                        N--;\r\n                        j++;\r\n                    }\r\n                    NN = N + 1;\r\n\r\n                    // >>>>> Begin Main Loop <<<<<\r\n                    while(N >= 1) { // Main loop\r\n                        // Start the algorithm for one zero\r\n                        if(N <= 2) {\r\n                            // Calculate the final zero or pair of zeros\r\n                            if(N < 2) {\r\n                                zeror[degPar.Degree - 1] = -(p[1] / p[0]);\r\n                                zeroi[degPar.Degree - 1] = 0;\r\n                            }\r\n                            else {\r\n                                qPar.li = qPar.lr = qPar.si = qPar.sr = 0.0;\r\n                                Quad_ak1(p[0], p[1], p[2], qPar);\r\n                                zeror[degPar.Degree - 2] = qPar.sr;\r\n                                zeroi[degPar.Degree - 2] = qPar.si;\r\n                                zeror[degPar.Degree - 1] = qPar.lr;\r\n                                zeroi[degPar.Degree - 1] = qPar.li;\r\n                            }\r\n                            break;\r\n                        }\r\n\r\n                        // Find the largest and smallest moduli of the coefficients\r\n                        moduli_max = 0.0;\r\n                        moduli_min = Number.MAX_VALUE;\r\n\r\n                        for(i = 0; i < NN; i++) {\r\n                            x = Math.abs(p[i]);\r\n                            if(x > moduli_max)\r\n                                moduli_max = x;\r\n                            if((x != 0) && (x < moduli_min))\r\n                                moduli_min = x;\r\n                        }\r\n\r\n                        // Scale if there are large or very small coefficients\r\n                        // Computes a scale factor to multiply the coefficients of the polynomial. The scaling\r\n                        // is done to avoid overflow and to avoid undetected underflow interfering with the\r\n                        // convergence criterion.\r\n                        // The factor is a power of the base.\r\n                        sc = LO / moduli_min;\r\n\r\n                        if(((sc <= 1.0) && (moduli_max >= 10)) || ((sc > 1.0) && (Number.MAX_VALUE / sc >= moduli_max))) {\r\n                            sc = ((sc == 0) ? Number.MIN_VALUE : sc);\r\n                            l = Math.floor(Math.log(sc) / LB2 + 0.5);\r\n                            factor = Math.pow(2.0, l);\r\n                            if(factor != 1.0) {\r\n                                for(i = 0; i < NN; i++)\r\n                                    p[i] *= factor;\r\n                            }\r\n                        }\r\n\r\n                        // Compute lower bound on moduli of zeros\r\n                        for(var i = 0; i < NN; i++)\r\n                            pt[i] = Math.abs(p[i]);\r\n                        pt[N] = -(pt[N]);\r\n                        NM1 = N - 1;\r\n\r\n                        // Compute upper estimate of bound\r\n                        x = Math.exp((Math.log(-pt[N]) - Math.log(pt[0])) / N);\r\n\r\n                        if(pt[NM1] != 0) {\r\n                            // If Newton step at the origin is better, use it\r\n                            xm = -pt[N] / pt[NM1];\r\n                            x = ((xm < x) ? xm : x);\r\n                        }\r\n\r\n                        // Chop the interval (0, x) until ff <= 0\r\n                        xm = x;\r\n                        do {\r\n                            x = xm;\r\n                            xm = 0.1 * x;\r\n                            ff = pt[0];\r\n                            for(var i = 1; i < NN; i++) {\r\n                                ff = ff * xm + pt[i];\r\n                            }\r\n                        }\r\n                        while(ff > 0); // End do-while loop\r\n\r\n                        dx = x;\r\n                        // Do Newton iteration until x converges to two decimal places\r\n\r\n                        do {\r\n                            df = ff = pt[0];\r\n                            for(var i = 1; i < N; i++) {\r\n                                ff = x * ff + pt[i];\r\n                                df = x * df + ff;\r\n                            } // End for i\r\n                            ff = x * ff + pt[N];\r\n                            dx = ff / df;\r\n                            x -= dx;\r\n                        }\r\n                        while(Math.abs(dx / x) > 0.005); // End do-while loop\r\n\r\n                        bnd = x;\r\n\r\n                        // Compute the derivative as the initial K polynomial and do 5 steps with no shift\r\n                        for(var i = 1; i < N; i++)\r\n                            K[i] = (N - i) * p[i] / N;\r\n                        K[0] = p[0];\r\n                        aa = p[N];\r\n                        bb = p[NM1];\r\n                        zerok = ((K[NM1] == 0) ? 1 : 0);\r\n\r\n                        for(jj = 0; jj < 5; jj++) {\r\n                            cc = K[NM1];\r\n                            if(zerok) {\r\n                                // Use unscaled form of recurrence\r\n                                for(var i = 0; i < NM1; i++) {\r\n                                    j = NM1 - i;\r\n                                    K[j] = K[j - 1];\r\n                                } // End for i\r\n                                K[0] = 0;\r\n                                zerok = ((K[NM1] == 0) ? 1 : 0);\r\n                            }\r\n                            else {\r\n                                // Used scaled form of recurrence if value of K at 0 is nonzero\r\n                                t = -aa / cc;\r\n                                for(var i = 0; i < NM1; i++) {\r\n                                    j = NM1 - i;\r\n                                    K[j] = t * K[j - 1] + p[j];\r\n                                } // End for i\r\n                                K[0] = p[0];\r\n                                zerok = ((Math.abs(K[NM1]) <= Math.abs(bb) * DBL_EPSILON * 10.0) ? 1 : 0);\r\n                            }\r\n                        }\r\n\r\n                        // Save K for restarts with new shifts\r\n                        for(var i = 0; i < N; i++)\r\n                            temp[i] = K[i];\r\n\r\n                        // Loop to select the quadratic corresponding to each new shift\r\n                        for(jj = 1; jj <= 20; jj++) {\r\n\r\n                            // Quadratic corresponds to a double shift to a non-real point and its\r\n                            // complex conjugate. The point has modulus BND and amplitude rotated\r\n                            // by 94 degrees from the previous shift.\r\n\r\n                            xxx = -(sinr * yy) + cosr * xx;\r\n                            yy = sinr * xx + cosr * yy;\r\n                            xx = xxx;\r\n                            sr = bnd * xx;\r\n                            u = -(2.0 * sr);\r\n\r\n                            // Second stage calculation, fixed quadratic\r\n                            Fxshfr_ak1(DBL_EPSILON, MDP1, 20 * jj, sr, bnd, K, N, p, NN, qp, u, Fxshfr_Par);\r\n\r\n                            if(Fxshfr_Par.NZ != 0) {\r\n                                // The second stage jumps directly to one of the third stage iterations and\r\n                                // returns here if successful. Deflate the polynomial, store the zero or\r\n                                // zeros, and return to the main algorithm.\r\n                                j = degPar.Degree - N;\r\n                                zeror[j] = Fxshfr_Par.szr;\r\n                                zeroi[j] = Fxshfr_Par.szi;\r\n                                NN = NN - Fxshfr_Par.NZ;\r\n                                N = NN - 1;\r\n                                for(var i = 0; i < NN; i++)\r\n                                    p[i] = qp[i];\r\n                                if(Fxshfr_Par.NZ != 1) {\r\n                                    zeror[j + 1] = Fxshfr_Par.lzr;\r\n                                    zeroi[j + 1] = Fxshfr_Par.lzi;\r\n                                }\r\n                                break;\r\n                            }\r\n                            else {\r\n                                // If the iteration is unsuccessful, another quadratic is chosen after restoring K\r\n                                for(var i = 0; i < N; i++) {\r\n                                    K[i] = temp[i];\r\n                                }\r\n                            }\r\n                        }\r\n                        // Return with failure if no convergence with 20 shifts\r\n                        if(jj > 20) {\r\n                            degPar.Degree -= N;\r\n                            break;\r\n                        }\r\n                    }\r\n                    // >>>>> End Main Loop <<<<<\r\n                    return;\r\n                }\r\n                //--> End Jenkins-Traub\r\n                rpSolve(degreePar, p, zeror, zeroi);\r\n\r\n                var l = zeroi.length;\r\n                //format the output\r\n                for(i = 0; i < l; i++) {\r\n                    // We round the imaginary part to avoid having something crazy like 5.67e-16.\r\n                    var img = round(zeroi[i], decp + 8),\r\n                            real = round(zeror[i], decp + 8);\r\n                    // Did the rounding pay off? If the rounding did nothing more than chop off a few digits then no.\r\n                    // If the rounding results in a a number at least 3 digits shorter we'll keep it else we'll keep \r\n                    // the original otherwise the rounding was worth it.\r\n                    real = decp - String(real).length > 2 ? real : zeror[i];\r\n                    var sign = img < 0 ? '-' : '';\r\n\r\n                    // Remove the zeroes\r\n                    if(real === 0) {\r\n                        real = '';\r\n                    }\r\n                    if(img === 0) {\r\n                        img = '';\r\n                    }\r\n\r\n                    // Remove 1 as the multiplier and discard imaginary part if there isn't one.\r\n                    img = Math.abs(img) === 1 ? sign + 'i' : (img ? img + '*i' : '');\r\n\r\n                    var num = (real && img) ? real + '+' + img : real + img;\r\n                    zeror[i] = num.replace(/\\+\\-/g, '-');\r\n                }\r\n                return zeror;\r\n            }\r\n        },\r\n        roots: function (symbol) {\r\n\r\n            if(symbol.isConstant(true, true)) {\r\n                return core.Utils.nroots(symbol);\r\n            }\r\n            var roots = __.proots(symbol).map(function (x) {\r\n                return _.parse(x);\r\n            });\r\n            return core.Vector.fromArray(roots);\r\n        },\r\n        froot: function (f, guess, dx) {\r\n            var newtonraph = function (xn) {\r\n                var mesh = 1e-12,\r\n                        // If the derivative was already provided then don't recalculate.\r\n                        df = dx ? dx : core.Utils.build(core.Calculus.diff(f.clone())),\r\n                        // If the function was passed in as a function then don't recalculate.\r\n                        fn = f instanceof Function ? f : core.Utils.build(f),\r\n                        max = 10000,\r\n                        done = false,\r\n                        safety = 0;\r\n                while(!done) {\r\n                    var x = xn - (fn(xn) / df(xn));\r\n                    //absolute values for both x & xn ensures that we indeed have the radius    \r\n                    var r = Math.abs(x) - Math.abs(xn),\r\n                            delta = Math.abs(r);\r\n                    xn = x;\r\n\r\n                    if(delta < mesh)\r\n                        done = true;\r\n                    else if(safety > max) {\r\n                        xn = null;\r\n                        done = true;\r\n                    }\r\n\r\n                    safety++;\r\n                }\r\n                return xn;\r\n            };\r\n            return newtonraph(Number(guess));\r\n        },\r\n        quad: function (a, b, c) {\r\n            var q = function (a, b, c, sign) {\r\n                return _.parse('-(' + b + '+' + sign + '*sqrt((' + b + ')^2-4*(' + a + ')*(' + c + ')))/(2*' + a + ')');\r\n            };\r\n            return [q(a, b, c, 1), q(a, b, c, -1)];\r\n        },\r\n        sumProd: function (a, b) {\r\n            return __.quad(-b, a, -1).map(function (x) {\r\n                return x.invert();\r\n            });\r\n        },\r\n        coeffs: function (symbol, wrt, coeffs) {\r\n            wrt = String(wrt);\r\n            symbol = _.expand(symbol);\r\n            coeffs = coeffs || [new Symbol(0)];\r\n            //we cannot get coeffs for group EX\r\n            if(symbol.group === EX && symbol.contains(wrt, true))\r\n                _.error('Unable to get coefficients using expression ' + symbol.toString());\r\n            var vars = variables(symbol);\r\n            if(vars.length === 1 && vars[0] === wrt && !symbol.isImaginary()) {\r\n                var a = new Polynomial(symbol).coeffs.map(function (x) {\r\n                    return new Symbol(x);\r\n                });\r\n\r\n                for(var i = 0, l = a.length; i < l; i++) {\r\n                    var coeff = a[i],\r\n                            e = coeffs[i];\r\n                    if(e)\r\n                        coeff = _.add(e, coeff);\r\n                    coeffs[i] = coeff; //transfer it all over\r\n                }\r\n            }\r\n            else {\r\n                if(!wrt)\r\n                    _.error('Polynomial contains more than one variable. Please specify which variable is to be used!');\r\n                //if the variable isn't part of this polynomial then we're looking at x^0\r\n\r\n                if(vars.indexOf(wrt) === -1) {\r\n                    coeffs[0] = _.add(symbol, coeffs[0]);\r\n                }\r\n                else {\r\n                    coeffs = coeffs || [new Symbol(0)];\r\n                    if(symbol.group === CB) {\r\n                        var s = symbol.symbols[wrt];\r\n                        if(!s)\r\n                            _.error('Expression is not a polynomial!');\r\n                        var p = Number(s.power);\r\n                        coeff = _.divide(symbol.clone(), s.clone());\r\n                        if(coeff.contains(wrt, true) || p < 0 || !isInt(p))\r\n                            _.error('Expression is not a polynomial!');\r\n                        var e = coeffs[p];\r\n                        if(e)\r\n                            coeff = _.add(e, coeff);\r\n                        coeffs[p] = coeff;\r\n                    }\r\n                    else if(symbol.group === CP) {\r\n                        symbol.each(function (x) {\r\n                            __.coeffs(x.clone(), wrt, coeffs);\r\n                        }, true);\r\n                    }\r\n                }\r\n            }\r\n            //fill holes\r\n            for(var i = 0, l = coeffs.length; i < l; i++)\r\n                if(typeof coeffs[i] === 'undefined')\r\n                    coeffs[i] = new Symbol(0);\r\n\r\n            return coeffs;\r\n        },\r\n        /**\r\n         * Get's all the powers of a particular polynomial including the denominators. The denominators powers\r\n         * are returned as negative. All remaining polynomials are returned as zero order polynomials.\r\n         * for example polyPowers(x^2+1/x+y+t) will return [ '-1', 0, '2' ]\r\n         * @param {Symbol} e\r\n         * @param {String} for_variable\r\n         * @param {Array} powers\r\n         * @returns {Array} An array of the powers\r\n         */\r\n        //assumes you've already verified that it's a polynomial\r\n        polyPowers: function (e, for_variable, powers) {\r\n            powers = powers || [];\r\n            var g = g = e.group;\r\n            if(g === PL && for_variable === e.value) {\r\n                powers = powers.concat(keys(e.symbols));\r\n            }\r\n            else if(g === CP) {\r\n                for(var s in e.symbols) {\r\n                    var symbol = e.symbols[s];\r\n                    var g = symbol.group, v = symbol.value;\r\n                    if(g === S && for_variable === v)\r\n                        powers.push(symbol.power);\r\n                    else if(g === PL || g === CP)\r\n                        powers = __.polyPowers(symbol, for_variable, powers);\r\n                    else if(g === CB && symbol.contains(for_variable)) {\r\n                        var t = symbol.symbols[for_variable];\r\n                        if(t)\r\n                            powers.push((t.power));\r\n                    }\r\n                    else if(g === N || for_variable !== v)\r\n                        powers.push(0);\r\n                }\r\n            }\r\n            else if(g === CB && e.contains(for_variable)) {\r\n                powers.push(core.Utils.decompose_fn(e, for_variable, true).x.power);\r\n            }\r\n            return core.Utils.arrayUnique(powers).sort();\r\n        },\r\n        //The factor object\r\n        Factor: {\r\n            //splits the symbol in symbol and constant\r\n            split: function (symbol) {\r\n                var c = new Symbol(1); //the constants part\r\n                var s = new Symbol(1); //the symbolic part\r\n                __.Factor.factor(symbol, new Factors()).each(function (x) {\r\n                    var t = _.parse(x);\r\n                    if(x.isConstant(true)) {\r\n                        c = _.multiply(c, t);\r\n                    }\r\n                    else {\r\n                        s = _.multiply(s, t);\r\n                    }\r\n                });\r\n                return [c, s];\r\n            },\r\n            mix: function (o, include_negatives) {\r\n                var factors = keys(o);\r\n                var l = factors.length;\r\n                var m = [];//create a row which we'r going to be mixing\r\n                for(var i = 0; i < l; i++) {\r\n                    var factor = factors[i],\r\n                            p = o[factor];\r\n                    var ll = m.length;\r\n                    for(var j = 0; j < ll; j++) {\r\n                        var t = m[j] * factor;\r\n                        m.push(t);\r\n                        if(include_negatives)\r\n                            m.push(-t);\r\n                    }\r\n\r\n                    for(var j = 1; j <= p; j++)\r\n                        m.push(Math.pow(factor, j));\r\n                }\r\n                return m;\r\n            },\r\n            //TODO: this method is to replace common factoring\r\n            common: function (symbol, factors) {\r\n                try {\r\n                    if(symbol.group === CP) {\r\n                        //this may have the unfortunate side effect of expanding and factoring again\r\n                        //to only end up with the same result. \r\n                        //TODO: try to avoid this\r\n                        //collect the symbols and sort to have the longest first. Thinking is that the longest terms \r\n                        //has to contain the variable in order for it to be factorable\r\n                        var symbols = _.expand(symbol.clone(), true).collectSymbols(null, null, function (a, b) {\r\n                            return (b.length || 1) - (a.length || 1);\r\n                        });\r\n\r\n                        var map = {}; //create a map of common factors\r\n                        var coeffs = [];\r\n                        for(var i = 0; i < symbols.length; i++) {\r\n                            var sym = symbols[i];\r\n                            coeffs.push(sym.multiplier.clone());\r\n                            sym.each(function (x) {\r\n                                var p = Number(x.power);\r\n                                //This check exits since we have a symbolic power.\r\n                                //For the future... think about removing this check and modify for symbolic powers\r\n                                if(isNaN(p))\r\n                                    throw new Error('exiting');\r\n                                //loop through the symbols and lump together common terms\r\n                                if(x.value in map) {\r\n                                    if(p < map[x.value][0])\r\n                                        map[x.value][0] = p;\r\n                                    map[x.value][1].push(x);\r\n                                }\r\n                                else\r\n                                    map[x.value] = [p, [x]];\r\n                            });\r\n                        }\r\n                        //the factor\r\n                        var factor = new Symbol(1);\r\n                        for(var x in map) {\r\n                            //if this factor is found in all terms since the length of \r\n                            //matching variable terms matches the number of original terms\r\n                            if(map[x][1].length === symbols.length) {\r\n                                //generate a symbol and multiply into the factor\r\n                                factor = _.multiply(factor, _.pow(new Symbol(x), new Symbol(map[x][0])));\r\n                            }\r\n                        }\r\n                        //get coefficient factor\r\n                        var c = core.Math2.QGCD.apply(null, coeffs);\r\n\r\n                        if(!c.equals(1)) {\r\n                            factors.add(new Symbol(c));\r\n                            for(var i = 0; i < symbols.length; i++) {\r\n                                symbols[i].multiplier = symbols[i].multiplier.divide(c);\r\n                            }\r\n                        }\r\n\r\n                        //if we actuall found any factors\r\n                        if(!factor.equals(1)) {\r\n                            factors.add(factor);\r\n                            symbol = new Symbol(0);\r\n                            for(var i = 0; i < symbols.length; i++) {\r\n                                symbol = _.add(symbol, _.divide(symbols[i], factor.clone()));\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                catch(e) {\r\n                    ;\r\n                }\r\n\r\n                return symbol;\r\n            },\r\n            zeroes: function (symbol, factors) {\r\n                var exit = function () {\r\n                    throw new core.exceptions.ValueLimitExceededError('Exiting');\r\n                };\r\n                try {\r\n                    var vars, term, sum, p, e;\r\n                    symbol = _.expand(symbol.clone());\r\n                    e = symbol.toString();\r\n                    vars = variables(symbol);\r\n\r\n                    sum = new Symbol(0);\r\n\r\n                    var terms = [];\r\n                    var powers = [];\r\n\r\n                    //start setting each variable to zero\r\n                    for(var i = 0, l = vars.length; i < vars.length; i++) {\r\n                        var subs = {};\r\n                        //we want to create a subs object with all but the current variable set to zero\r\n                        for(var j = 0; j < l; j++)\r\n                            if(i !== j) //make sure we're not looking at the same variable\r\n                                subs[vars[j]] = 0;\r\n                        term = _.parse(e, subs);\r\n                        var tp = term.power;\r\n                        //the temporary power has to be an integer as well\r\n                        if(!isInt(tp))\r\n                            exit();\r\n                        terms.push(term);\r\n                        powers.push(term.power);\r\n                    }\r\n\r\n                    //get the gcd. This will be the p in (a^n+b^m)^p\r\n                    //if the gcd equals 1 meaning n = m then we need a tie breakder\r\n                    if(core.Utils.allSame(powers)) {\r\n                        //get p given x number of terms\r\n                        var n_terms = symbol.length;\r\n                        //the number of zeroes determines\r\n                        var n_zeroes = terms.length;\r\n                        if(n_zeroes === 2) {\r\n                            p = new Frac(powers[0] / (n_terms - 1));\r\n                        }\r\n                        if(n_zeroes === 3) {\r\n                            p = new Frac(powers[0] / Math.round((Math.sqrt(8 * n_terms - 1) - 3) / 2));\r\n                        }\r\n                        /*\r\n                         //get the lowest possible power\r\n                         //e.g. given b^4+2*a^2*b^2+a^4, the power we're looking for would be 2\r\n                         symbol.each(function(x) {\r\n                         if(x.group === CB)\r\n                         x.each(function(y) {\r\n                         if(!p || y.power.lessThan(p))\r\n                         //p = Number(y.power);\r\n                         p = y.power;\r\n                         });\r\n                         else if(!p || x.power.lessThan(p))\r\n                         //p = Number(x.power);\r\n                         p = x.power;\r\n                         });\r\n                         */\r\n                    }\r\n                    else\r\n                        //p is just the gcd of the powers\r\n                        p = core.Math2.QGCD.apply(null, powers);\r\n\r\n                    //if we don't have an integer then exit\r\n                    if(!isInt(p))\r\n                        exit();\r\n\r\n                    //build the factor\r\n                    for(var i = 0; i < terms.length; i++) {\r\n                        var t = terms[i];\r\n                        var n = t.power.clone().divide(p);\r\n                        t.multiplier = new Frac(Math.pow(t.multiplier, 1 / n));\r\n                        t.power = p.clone();\r\n                        sum = _.add(sum, t);\r\n                    }\r\n\r\n                    //by now we have the factor of zeroes. We'll know if we got it right because \r\n                    //we'll get a remainder of zero each time we divide by it\r\n                    if(sum.group !== CP)\r\n                        return symbol; //nothing to do\r\n\r\n                    while(true) {\r\n                        var d = __.div(symbol.clone(), sum.clone());\r\n                        if(d[1].equals(0)) {\r\n                            symbol = d[0];\r\n                            factors.add(sum.clone());\r\n                            if(symbol.equals(1)) //we've reached 1 so done.\r\n                                break;\r\n                        }\r\n                        else\r\n                            break;\r\n                    }\r\n                }\r\n                catch(e) {\r\n                }\r\n                ;\r\n\r\n                return symbol;\r\n            },\r\n            factor: function (symbol, factors) {\r\n                // Don't try to factor constants\r\n                if(symbol.isConstant()) {\r\n                    return core.Math2.factor(symbol);\r\n                }\r\n\r\n                var _symbol = _.parse(symbol);\r\n                var retval = __.Factor._factor(_symbol, factors);\r\n                if(retval.equals(symbol)) {\r\n                    return retval;\r\n                }\r\n\r\n                if(retval.group === CB) {\r\n                    var t = new Symbol(1);\r\n                    var p = _.parse(retval.power);\r\n                    //store the multiplier and strip it\r\n                    var m = _.parse(retval.multiplier);\r\n\r\n                    retval.toUnitMultiplier();\r\n\r\n                    /* \r\n                     * NOTE: for sign issues with factor START DEBUGGING HERE\r\n                     */\r\n                    //move the sign to t\r\n                    if(retval.multiplier.lessThan(0)) {\r\n                        t.negate();\r\n                        retval.negate();\r\n                    }\r\n\r\n                    retval.each(function (x) {\r\n                        // Related to #566. Since the symbol's group may not have been properly\r\n                        // updated, it's easier to just parse the symbol and have the parser \r\n                        // do the update for us.\r\n                        var factored = _.parse(__.Factor._factor(x));\r\n\r\n                        if(factored.group === CB) {\r\n                            // Include the multiplier\r\n                            m = _.multiply(m, Symbol.create(factored.multiplier));\r\n                            factored.each(function (y) {\r\n                                var _factored = _.parse(__.Factor._factor(y));\r\n                                t = _.multiply(t, _factored);\r\n                                if(_factored.group === CB) {\r\n                                    m = _.multiply(m, Symbol.create(_factored.multiplier));\r\n                                }\r\n                            });\r\n                        }\r\n                        else {\r\n                            t = _.multiply(t, factored);\r\n                        }\r\n                    });\r\n\r\n                    //put back the multiplier and power\r\n                    retval = _.pow(_.multiply(m, t), p);\r\n                }\r\n\r\n                return retval;\r\n            },\r\n            quadFactor: function (symbol, factors) {\r\n                if(symbol.isPoly() && __.degree(symbol.equals(2))) {\r\n                    //We've  already checked that we're dealing with a polynomial\r\n                    var v = core.Utils.variables(symbol)[0]; //get the variable\r\n                    var coeffs = __.coeffs(symbol, v);\r\n                    //factor the lead coefficient\r\n                    var cf = __.Factor._factor(coeffs[2].clone());\r\n                    //check if we have factors\r\n                    if(cf.group === CB) {\r\n                        var symbols = cf.collectSymbols();\r\n                        //if the factors are greater than 2 we're done so exit\r\n                        if(symbols.length > 2)\r\n                            return symbol;\r\n                        //if we have two factors then attempt to factor the polynomial\r\n                        //let the factors be f1 and f1\r\n                        //let the factors be (ax+b)(cx+d)\r\n                        //let the coefficients be c1x^2+c2x+c3\r\n                        //then a(x1)+c(x2)=c2 and x1*x2=c3\r\n                        //we can solve for x1 and x2\r\n                        var c = _.multiply(_.parse(coeffs[0]), _.parse(symbols[0]));\r\n                        var b = _.parse(coeffs[1]).negate();\r\n                        var a = _.parse(symbols[1]);\r\n                        //solve the system\r\n                        var root = __.quad(a, b, c).filter(function (x) {\r\n                            if(core.Utils.isInt(x))\r\n                                return x;\r\n                        });\r\n                        //if we have one root then find the other one by dividing the constant\r\n                        if(root.length === 1) {\r\n                            var root1 = root[0];\r\n                            var root2 = _.divide(coeffs[0], _.parse(root1));\r\n                            if(core.Utils.isInt(root2)) {\r\n                                //we found them both\r\n                                factors.add(_.parse(format('({0})*({1})+({2})', symbols[1], v, root2)));\r\n                                factors.add(_.parse(format('({0})*({1})+({2})', symbols[0], v, root1)));\r\n                                symbol = new Symbol(1);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                return symbol;\r\n            },\r\n            cubeFactor: function (symbol, factors) {\r\n                if(symbol.isComposite()) {\r\n                    var symbols = symbol.collectSymbols();\r\n                    // The symbol should be in the form of a^3+-b^3. The length\r\n                    // should therefore only be two. If it's any different from this\r\n                    // then we're done\r\n                    if(symbols.length === 2) {\r\n                        // Store the signs and then strip them from the symbols\r\n                        var sign_a = symbols[0].sign();\r\n                        var a = symbols[0].clone().abs();\r\n                        var sign_b = symbols[1].sign();\r\n                        var b = symbols[1].clone().abs();\r\n                        // Check if they're cube\r\n                        if(a.isCube() && b.isCube()) {\r\n                            // Keep the negative sign on the right, meaning b is always negative.\r\n                            if(sign_a < sign_b) {\r\n                                // Swap the signs and then the values\r\n                                [sign_a, sign_b] = [sign_b, sign_a];\r\n                                [a, b] = [b, a];\r\n                            }\r\n\r\n                            // Get teh roots\r\n                            var m_root_a = _.parse(a.getNth(3));\r\n                            var m_root_b = _.parse(b.getNth(3));\r\n\r\n                            // Remove the cube for both\r\n                            var x = _.multiply(_.expand(_.pow(a.clone().toUnitMultiplier(), _.parse('1/3'))), m_root_a);\r\n                            var y = _.multiply(_.expand(_.pow(b.clone().toUnitMultiplier(), _.parse('1/3'))), m_root_b);\r\n\r\n                            if(sign_a === 1 && sign_b === -1) {\r\n                                // Apply difference of cubes rule\r\n                                factors.add(_.parse(format('(({0})-({1}))', x, y)));\r\n                                factors.add(_.parse(format('(({0})^2+({0})*({1})+({1})^2)', x, y)));\r\n                                symbol = Symbol(1);\r\n                            }\r\n                            else if(sign_a === 1 && sign_b === 1) {\r\n                                // Apply sum of cubes rule\r\n                                factors.add(_.parse(format('(({0})+({1}))', x, y)));\r\n                                factors.add(_.parse(format('(({0})^2-({0})*({1})+({1})^2)', x, y)));\r\n                                symbol = Symbol(1);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return symbol;\r\n            },\r\n            _factor: function (symbol, factors) {\r\n                var g = symbol.group;\r\n                //some items cannot be factored any further so return those right away\r\n                if(symbol.group === FN) {\r\n                    var arg = symbol.args[0];\r\n                    if(arg.group === S && arg.isSimple()) {\r\n                        return symbol;\r\n                    }\r\n                }\r\n                else if(symbol.group === S && symbol.isSimple()) {\r\n                    return symbol;\r\n                }\r\n\r\n                // Expand the symbol to get it in a predictable form. If this step\r\n                // is skipped some factors are missed.\r\n                //if(symbol.group === CP && !(even(symbol.power) && symbol.multiplier.lessThan(0))) {\r\n                if(symbol.group === CP) {\r\n                    symbol.distributeMultiplier(true);\r\n                    var t = new Symbol(0);\r\n                    symbol.each(function (x) {\r\n                        if((x.group === CP && x.power.greaterThan(1) || x.group === CB))\r\n                            x = _.expand(x);\r\n                        t = _.add(t, x);\r\n                    });\r\n                    t.power = symbol.power;\r\n\r\n                    symbol = t;\r\n                }\r\n\r\n                if(symbol.group === FN && symbol.fname !== 'sqrt') {\r\n                    symbol = core.Utils.evaluate(symbol);\r\n                }\r\n\r\n                //make a copy of the symbol to return if something goes wrong\r\n                var untouched = symbol.clone();\r\n                try {\r\n                    if(symbol.group === CB) {\r\n                        var p = _.parse(symbol.power);\r\n\r\n                        var den_array, num_array, den, num, dfact, nfact;\r\n                        //grab the denominator and strip the multiplier and power. Store them in an array\r\n                        den_array = __.Simplify.strip(symbol.getDenom());\r\n                        num_array = __.Simplify.strip(symbol.getNum());\r\n\r\n                        den = den_array.pop();\r\n                        num = num_array.pop();\r\n\r\n                        //if the numerator equals the symbol then we've hit the simplest form and then we're done\r\n                        if(num.equals(symbol)) {\r\n                            return symbol;\r\n                        }\r\n                        nfact = __.Factor.factor(num);\r\n                        dfact = __.Factor.factor(den);\r\n\r\n                        var n = __.Simplify.unstrip(num_array, nfact);\r\n                        var d = __.Simplify.unstrip(den_array, dfact);\r\n\r\n                        var retval = _.divide(n, d);\r\n\r\n                        return retval;\r\n                    }\r\n                    if(symbol.group === S) {\r\n                        return symbol; //absolutely nothing to do\r\n                    }\r\n\r\n                    if(symbol.isConstant()) {\r\n                        if(symbol.equals(1))\r\n                            return symbol.clone();\r\n                        var ret = core.Math2.factor(symbol);\r\n                        return ret;\r\n                    }\r\n\r\n                    var p = symbol.power.clone();\r\n\r\n                    if(isInt(p) && !(p.lessThan(0) && symbol.group === FN)) {\r\n                        var sign = p.sign();\r\n                        symbol.toLinear();\r\n                        factors = factors || new Factors();\r\n                        var map = {};\r\n                        symbol = _.parse(core.Utils.subFunctions(symbol, map));\r\n                        if(keys(map).length > 0) { //it might have functions\r\n                            factors.preAdd = function (factor) {\r\n                                var ret = _.parse(factor, core.Utils.getFunctionsSubs(map));\r\n                                return ret;\r\n                            };\r\n                        }\r\n\r\n                        //strip the power\r\n                        if(!symbol.isLinear()) {\r\n                            factors.pFactor = symbol.power.toString();\r\n                            symbol.toLinear();\r\n                        }\r\n\r\n                        var vars = variables(symbol);\r\n                        //bypass for imaginary. TODO: find a better solution\r\n                        if(symbol.isImaginary()) {\r\n                            vars.push(core.Settings.IMAGINARY);\r\n                        }\r\n                        var multiVar = vars.length > 1;\r\n\r\n                        //minor optimization. Seems to cut factor time by half in some cases.\r\n                        if(multiVar) {\r\n                            var all_S = true, all_unit = true;\r\n                            symbol.each(function (x) {\r\n                                if(x.group !== S)\r\n                                    all_S = false;\r\n                                if(!x.multiplier.equals(1))\r\n                                    all_unit = false;\r\n                            });\r\n\r\n                            if(all_S && all_unit) {\r\n                                return _.pow(_.parse(symbol, core.Utils.getFunctionsSubs(map)), _.parse(p));\r\n                            }\r\n                        }\r\n\r\n                        //factor the coefficients\r\n                        var coeff_factors = new Factors();\r\n\r\n                        symbol = __.Factor.coeffFactor(symbol, coeff_factors);\r\n\r\n                        coeff_factors.each(function (x) {\r\n                            // If the factor was negative but was within a square then it becomes positive\r\n                            if(even(p) && x.lessThan(0)) {\r\n                                x.negate();\r\n                            }\r\n\r\n                            if(sign < 0)\r\n                                x.invert();\r\n                            factors.add(x);\r\n                        });\r\n\r\n                        //factor the power\r\n                        var power_factors = new Factors();\r\n                        symbol = __.Factor.powerFactor(symbol, power_factors);\r\n                        power_factors.each(function (x) {\r\n                            if(sign < 0)\r\n                                x.invert();\r\n                            factors.add(x);\r\n                        });\r\n\r\n                        if(!multiVar) {\r\n                            //pass in vars[0] for safety\r\n                            var v = vars[0];\r\n\r\n                            symbol = __.Factor.squareFree(symbol, factors, v);\r\n\r\n                            var t_factors = new Factors();\r\n\r\n                            symbol = __.Factor.trialAndError(symbol, t_factors, v);\r\n\r\n                            //generate a symbol based off the last factors\r\n                            var tf_symbol = t_factors.toSymbol();\r\n                            //if nothing was factored then return the factors\r\n                            if(tf_symbol.equals(untouched)) {\r\n                                return tf_symbol;\r\n                            }\r\n\r\n                            for(var x in t_factors.factors) {\r\n                                //store the current factor in t_factor\r\n                                var t_factor = t_factors.factors[x];\r\n                                factors.add(_.pow(t_factor, _.parse(p)));\r\n                            }\r\n                            //if we still don't have a factor and it's quadratic then let's just do a quad factor\r\n                            if(symbol.equals(untouched)) {\r\n                                symbol = __.Factor.quadFactor(symbol, factors);\r\n                            }\r\n\r\n                        }\r\n                        else {\r\n                            // Try sum and difference of cubes\r\n                            symbol = __.Factor.cubeFactor(symbol, factors);\r\n\r\n                            symbol = __.Factor.mfactor(symbol, factors);\r\n\r\n                            //put back the sign of power\r\n                            factors.each(function (x) {\r\n                                if(sign < 0)\r\n                                    x.power.negate();\r\n                            });\r\n                        }\r\n\r\n                        //last minute clean up\r\n                        symbol = _.parse(symbol, core.Utils.getFunctionsSubs(map));\r\n                        \r\n                        var addPower = factors.length === 1;\r\n                        \r\n                        factors.add(_.pow(symbol, _.parse(p)));\r\n\r\n                        var retval = factors.toSymbol();\r\n                        \r\n                        // We may have only factored out the symbol itself so we end up with a factor of one \r\n                        // where the power needs to be placed back\r\n                        // e.g. factor((2*y+p)^2). Here we end up having a factor of 1 remaining and a p of 2.\r\n                        if(addPower && symbol.equals(1) && retval.isLinear()) {\r\n                            retval = _.pow(retval, _.parse(p));\r\n                        }\r\n                        \r\n                        return retval;\r\n                    }\r\n\r\n                    return symbol;\r\n                }\r\n                catch(e) {\r\n                    //no need to stop the show because something went wrong :). Just return the unfactored.\r\n                    return untouched;\r\n                }\r\n            },\r\n            reduce: function (symbol, factors) {\r\n                if(symbol.group === CP && symbol.length === 2) {\r\n                    var symbols = symbol.collectSymbols().sort(function (a, b) {\r\n                        return b.multiplier - a.multiplier;\r\n                    });\r\n                    if(symbols[0].power.equals(symbols[1].power)) {\r\n                        //x^n-a^n\r\n                        var n = _.parse(symbols[0].power),\r\n                                a = symbols[0].clone().toLinear(),\r\n                                b = symbols[1].clone().toLinear();\r\n\r\n                        //apply rule: (a-b)*sum(a^(n-i)*b^(i-1),1,n)\r\n                        factors.add(_.add(a.clone(), b.clone()));\r\n                        //flip the sign\r\n                        b.negate();\r\n                        //turn n into a number\r\n                        var nn = Number(n);\r\n                        //the remainder\r\n                        var result = new Symbol(0);\r\n                        for(var i = 1; i <= nn; i++) {\r\n                            var aa = _.pow(a.clone(), _.subtract(n.clone(), new Symbol(i))),\r\n                                    bb = _.pow(b.clone(), _.subtract(new Symbol(i), new Symbol(1)));\r\n                            result = _.add(result, _.multiply(aa, bb));\r\n                        }\r\n                        return result;\r\n                    }\r\n                }\r\n                return symbol;\r\n            },\r\n            /**\r\n             * Makes Symbol square free\r\n             * @param {Symbol} symbol\r\n             * @param {Factors} factors\r\n             * @@param {String} variable The variable which is being factored \r\n             * @returns {[Symbol, Factor]}\r\n             */\r\n            squareFree: function (symbol, factors, variable) {\r\n                if(symbol.isConstant() || symbol.group === S)\r\n                    return symbol;\r\n\r\n                var poly = new Polynomial(symbol, variable);\r\n                var sqfr = poly.squareFree();\r\n                var p = sqfr[2];\r\n                //if we found a square then the p entry in the array will be non-unit\r\n                if(p !== 1) {\r\n                    //make sure the remainder doesn't have factors\r\n                    var t = sqfr[1].toSymbol();\r\n                    t.power = t.power.multiply(new Frac(p));\r\n                    //send the factor to be fatored to be sure it's completely factored\r\n                    factors.add(__.Factor.factor(t));\r\n\r\n                    var retval = __.Factor.squareFree(sqfr[0].toSymbol(), factors);\r\n\r\n                    return retval;\r\n                }\r\n\r\n                return symbol;\r\n            },\r\n            /**\r\n             * Factors the powers such that the lowest power is a constant\r\n             * @param {Symbol} symbol\r\n             * @param {Factors} factors\r\n             * @returns {[Symbol, Factor]}\r\n             */\r\n            powerFactor: function (symbol, factors) {\r\n                //only PL need apply\r\n                if(symbol.group !== PL || symbol.previousGroup === EX)\r\n                    return symbol;\r\n                var k = keys(symbol.symbols);\r\n                //we expect only numeric powers so return all else\r\n                if(!core.Utils.allNumeric(k))\r\n                    return symbol;\r\n\r\n                var d = core.Utils.arrayMin(k);\r\n                var retval = new Symbol(0);\r\n                var q = _.parse(symbol.value + '^' + d);\r\n                symbol.each(function (x) {\r\n                    x = _.divide(x, q.clone());\r\n                    retval = _.add(retval, x);\r\n                });\r\n\r\n                factors.add(q);\r\n                return retval;\r\n            },\r\n            /**\r\n             * Removes GCD from coefficients\r\n             * @param {Symbol} symbol\r\n             * @param {Factor} factors\r\n             * @returns {Symbol}\r\n             */\r\n            coeffFactor: function (symbol, factors) {\r\n                if(symbol.isComposite()) {\r\n                    var gcd = core.Math2.QGCD.apply(null, symbol.coeffs());\r\n\r\n                    if(!gcd.equals(1)) {\r\n                        symbol.each(function (x) {\r\n                            if(x.isComposite()) {\r\n                                x.each(function (y) {\r\n                                    y.multiplier = y.multiplier.divide(gcd);\r\n                                });\r\n                            }\r\n                            else\r\n                                x.multiplier = x.multiplier.divide(gcd);\r\n                        });\r\n                        symbol.updateHash();\r\n                    }\r\n                    else {\r\n                        // TODO: This should probably go to the prototype\r\n                        var power = function (symbol) {\r\n                            var p;\r\n                            if(symbol.group === CB) {\r\n                                p = 0;\r\n                                symbol.each(function (x) {\r\n                                    p += x.power;\r\n                                });\r\n                            }\r\n                            else {\r\n                                p = Number(symbol.power);\r\n                            }\r\n                            return p;\r\n                        };\r\n                        // Factor out negatives from the lead term\r\n                        var terms = symbol.collectSymbols(null, null, null, true).sort(function (a, b) {\r\n                            // Push constants to the back\r\n                            if(a.isConstant(true))\r\n                                return 1;\r\n                            return b.power - a.power;\r\n                        });\r\n\r\n                        var LT = terms[0];\r\n\r\n                        // Check if the LT is indeed the greatest\r\n                        if(power(LT) > power(terms[1]) || terms[1].isConstant(true)) {\r\n                            if(LT.multiplier.lessThan(0)) {\r\n                                // Although the symbol should always be linear at this point, remove the negative for squares\r\n                                // to be safe.\r\n                                factors.add(new Symbol(-1));\r\n\r\n                                symbol.each(function (x) {\r\n                                    x.negate();\r\n                                }, true);\r\n                            }\r\n                        }\r\n\r\n                    }\r\n\r\n                    if(factors) {\r\n                        factors.add(new Symbol(gcd));\r\n                    }\r\n                }\r\n\r\n                return symbol;\r\n            },\r\n            /**\r\n             * The name says it all :)\r\n             * @param {Symbol} symbol\r\n             * @param {Factor} factors\r\n             * @@param {String} variable \r\n             * @returns {Symbol}\r\n             */\r\n            trialAndError: function (symbol, factors, variable) {\r\n                var untouched = symbol.clone();\r\n                try {\r\n                    // At temp holder for the factors. If all goes well then\r\n                    // they'll be moved to the actual factors.\r\n                    var factor_array = [];\r\n\r\n                    if(symbol.isConstant() || symbol.group === S)\r\n                        return symbol;\r\n                    var poly = new Polynomial(symbol, variable),\r\n                            cnst = poly.coeffs[0],\r\n                            cfactors = core.Math2.ifactor(cnst),\r\n                            roots = __.proots(symbol);\r\n                    for(var i = 0; i < roots.length; i++) {\r\n                        var r = roots[i],\r\n                                p = 1;\r\n                        if(!isNaN(r)) { //if it's a number\r\n                            for(var x in cfactors) {\r\n                                //check it's raised to a power\r\n                                var n = core.Utils.round(Math.log(x) / Math.log(Math.abs(r)), 8);\r\n                                if(isInt(n)) {\r\n                                    r = x; //x must be the root since n gave us a whole\r\n                                    p = n;\r\n                                    break;\r\n                                }\r\n                            }\r\n                            var root = new Frac(r),\r\n                                    terms = [new Frac(root.num).negate()];\r\n                            terms[p] = new Frac(root.den);\r\n                            //convert to Frac. The den is coeff of LT and the num is coeff of constant\r\n                            var div = Polynomial.fromArray(terms, poly.variable).fill(),\r\n                                    t = poly.divide(div);\r\n                            if(t[1].equalsNumber(0)) { //if it's zero we have a root and divide it out\r\n                                poly = t[0];\r\n                                // factors.add(div.toSymbol());\r\n                                factor_array.push(div.toSymbol());\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if(!poly.equalsNumber(1)) {\r\n                        poly = __.Factor.search(poly, factors);\r\n                    }\r\n\r\n                    // Move the factors over since all went well.\r\n                    factor_array.forEach(function (x) {\r\n                        factors.add(x);\r\n                    });\r\n\r\n                    return poly.toSymbol();\r\n                }\r\n                catch(e) {\r\n                    return untouched;\r\n                }\r\n            },\r\n            search: function (poly, factors, base) {\r\n                base = base || 10; //I like 10 because numbers exhibit similar behaviours at 10\r\n                var v = poly.variable; //the polynmial variable name\r\n                /**\r\n                 * Attempt to remove a root by division given a number by first creating\r\n                 * a polynomial fromt he given information\r\n                 * @param {int} c1 - coeffient for the constant\r\n                 * @param {int} c2 - coefficient for the LT\r\n                 * @param {int} n - the number to be used to construct the polynomial\r\n                 * @param {int} p - the power at which to create the polynomial\r\n                 * @returns {null|Polynomial} - returns polynomial if successful otherwise null\r\n                 */\r\n                var check = function (c1, c2, n, p) {\r\n                    var candidate = Polynomial.fit(c1, c2, n, base, p, v);\r\n                    if(candidate && candidate.coeffs.length > 1) {\r\n                        var t = poly.divide(candidate);\r\n                        if(t[1].equalsNumber(0)) {\r\n                            factors.add(candidate.toSymbol());\r\n                            return [t[0], candidate];\r\n                        }\r\n                    }\r\n                    return null;\r\n                };\r\n                var cnst = poly.coeffs[0];\r\n                var cfactors = core.Math2.ifactor(cnst);\r\n                var lc = poly.lc();\r\n                var ltfactors = core.Math2.ifactor(lc);\r\n                var subbed = poly.sub(base);\r\n                var isubbed = core.Math2.ifactor(subbed);\r\n                var nfactors = __.Factor.mix(isubbed, subbed < 0);\r\n                var cp = Math.ceil(poly.coeffs.length / 2);\r\n                var lc_is_neg = lc.lessThan(0);\r\n                var cnst_is_neg = cnst.lessThan(0);\r\n                ltfactors['1'] = 1;\r\n                cfactors['1'] = 1;\r\n                while(cp--) {\r\n                    for(var x in ltfactors) {\r\n                        for(var y in cfactors) {\r\n                            for(var i = 0; i < nfactors.length; i++) {\r\n                                var factor_found = check(x, y, nfactors[i], cp);\r\n                                if(factor_found) {\r\n                                    poly = factor_found[0];\r\n                                    if(!core.Utils.isPrime(poly.sub(base)))\r\n                                        poly = __.Factor.search(poly, factors);\r\n                                    return poly;\r\n                                }\r\n                                else if(!factor_found) {\r\n                                    if(lc_is_neg && cnst_is_neg)\r\n                                        factor_found = check(-x, -y, nfactors[i], cp);\r\n                                    else if(lc_is_neg)\r\n                                        factor_found = check(-x, y, nfactors[i], cp); //check a negative lc\r\n                                    else if(cnst_is_neg)\r\n                                        factor_found = check(x, -y, nfactors[i], cp); //check a negative constant\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                return poly;\r\n            },\r\n            /**\r\n             * Equivalent of square free factor for multivariate polynomials\r\n             * @param {type} symbol\r\n             * @param {type} factors\r\n             * @returns {AlgebraL#18.Factor.mSqfrFactor.symbol|Array|AlgebraL#18.__.Factor.mSqfrFactor.d}\r\n             */\r\n            mSqfrFactor: function (symbol, factors) {\r\n                if(symbol.group !== FN) {\r\n                    var vars = variables(symbol).reverse();\r\n\r\n                    // Loop through all the variable and remove the partial derivatives\r\n                    for(var i = 0; i < vars.length; i++) {\r\n                        do {\r\n                            if(vars[i] === symbol.value) {\r\n                                //the derivative tells us nothing since this symbol is already the factor\r\n                                factors.add(symbol);\r\n                                symbol = new Symbol(1);\r\n                                continue;\r\n                            }\r\n\r\n                            var diff = core.Calculus.diff(symbol, vars[i]);\r\n\r\n                            var d = __.Factor.coeffFactor(diff);\r\n\r\n                            if(d.equals(0))\r\n                                break;\r\n\r\n                            //trial division to see if factors have whole numbers. \r\n                            //This can be optimized by stopping as soon as can_divide is false\r\n                            //this will also need utilize big number at some point\r\n                            var can_divide = true;\r\n                            if(d.isConstant() && symbol.isComposite()) {\r\n                                //check the coefficients\r\n\r\n                                symbol.each(function (x) {\r\n                                    if(x.multiplier % d !== 0)\r\n                                        can_divide = false;\r\n                                }, true);\r\n                            }\r\n\r\n                            //if we can divide then do so\r\n                            if(can_divide) {\r\n\r\n                                var div = __.div(symbol, d.clone()),\r\n                                        is_factor = div[1].equals(0);\r\n                                \r\n                                // Break infinite loop for factoring e^t*x-1\r\n                                if((symbol.equals(div[0]) && div[1].equals(0))) {\r\n                                    break;\r\n                                }\r\n                                \r\n                                if(div[0].isConstant()) {\r\n                                    factors.add(div[0]);\r\n                                    break;\r\n                                }\r\n                                \r\n                            }\r\n                            else\r\n                                is_factor = false;\r\n\r\n                            if(is_factor) {\r\n                                factors.add(div[0]);\r\n                                symbol = d;\r\n                            }\r\n                        }\r\n                        while(is_factor)\r\n                    }\r\n                }\r\n\r\n                return symbol;\r\n            },\r\n            //difference of squares factorization\r\n            sqdiff: function (symbol, factors) {\r\n                if(symbol.isConstant('all')) {\r\n                    // Nothing to do\r\n                    return symbol;\r\n                }\r\n\r\n                try {\r\n                    var remove_square = function (x) {\r\n                        return core.Utils.block('POSITIVE_MULTIPLIERS', function () {\r\n                            return Symbol.unwrapPARENS(math.sqrt(math.abs(x)));\r\n                        }, true);\r\n                    };\r\n                    var separated = core.Utils.separate(symbol.clone());\r\n\r\n                    var obj_array = [];\r\n\r\n                    //get the unique variables\r\n                    for(var x in separated) {\r\n                        if(x !== 'constants') {\r\n                            obj_array.push(separated[x]);\r\n                        }\r\n                    }\r\n                    obj_array.sort(function (a, b) {\r\n                        return b.power - a.power;\r\n                    });\r\n\r\n                    //if we have the same number of variables as unique variables then we can apply the difference of squares\r\n                    if(obj_array.length === 2) {\r\n                        var a, b;\r\n                        a = obj_array.pop();\r\n                        b = obj_array.pop();\r\n\r\n                        if(even(a.power) && even(b.power)\r\n                                && a.sign() === b.sign()\r\n                                && a.group === S && b.group === S) {\r\n                            throw new Error('Unable to factor');\r\n                        }\r\n                        ;\r\n\r\n                        if(a.isComposite() && b.power.equals(2)) {\r\n                            //remove the square from b\r\n                            b = remove_square(b);\r\n                            var f = __.Factor.factor(_.add(a, separated.constants));\r\n                            if(f.power.equals(2)) {\r\n                                f.toLinear();\r\n                                factors.add(_.subtract(f.clone(), b.clone()));\r\n                                factors.add(_.add(f, b));\r\n                                symbol = new Symbol(1);\r\n                            }\r\n                        }\r\n                        else {\r\n                            a = a.powSimp();\r\n                            b = b.powSimp();\r\n\r\n                            if((a.group === S || a.fname === '') && a.power.equals(2) && (b.group === S || b.fname === '') && b.power.equals(2) && !separated.constants) {\r\n                                if(a.multiplier.lessThan(0)) {\r\n                                    var t = b;\r\n                                    b = a;\r\n                                    a = t;\r\n                                }\r\n                                if(a.multiplier.greaterThan(0)) {\r\n                                    a = remove_square(a);\r\n                                    b = remove_square(b);\r\n                                }\r\n\r\n                                factors.add(_.subtract(a.clone(), b.clone()));\r\n                                factors.add(_.add(a, b));\r\n                                symbol = new Symbol(1);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                catch(e) {\r\n                    ;\r\n                }\r\n\r\n                return symbol;\r\n            },\r\n            //factoring for multivariate\r\n            mfactor: function (symbol, factors) {\r\n\r\n                if(symbol.group === FN) {\r\n                    if(symbol.fname === 'sqrt') {\r\n                        var factors2 = new Factors(),\r\n                                arg = __.Factor.common(symbol.args[0].clone(), factors2);\r\n                        arg = __.Factor.coeffFactor(arg, factors2);\r\n                        symbol = _.multiply(_.symfunction('sqrt', [arg]), _.parse(symbol.multiplier));\r\n                        factors2.each(function (x) {\r\n                            symbol = _.multiply(symbol, _.parse(core.Utils.format('sqrt({0})', x)));\r\n                        });\r\n                    }\r\n                    else\r\n                        factors.add(symbol);\r\n                }\r\n                else {\r\n\r\n                    //square free factorization\r\n                    symbol = __.Factor.mSqfrFactor(symbol, factors);\r\n\r\n                    //try factor out common factors\r\n                    //symbol = __.Factor.common(symbol, factors);\r\n\r\n                    var vars = variables(symbol),\r\n                            symbols = symbol.collectSymbols().map(function (x) {\r\n                        return Symbol.unwrapSQRT(x);\r\n                    }),\r\n                            sorted = {},\r\n                            maxes = {},\r\n                            l = vars.length, n = symbols.length;\r\n                    //take all the variables in the symbol and organize by variable name\r\n                    //e.g. a^2+a^2+b*a -> {a: {a^3, a^2, b*a}, b: {b*a}}\r\n\r\n                    for(var i = 0; i < l; i++) {\r\n                        var v = vars[i];\r\n                        sorted[v] = new Symbol(0);\r\n                        for(var j = 0; j < n; j++) {\r\n                            var s = symbols[j];\r\n                            if(s.contains(v)) {\r\n                                var p = s.value === v ? s.power.toDecimal() : s.symbols[v].power.toDecimal();\r\n                                if(!maxes[v] || p < maxes[v])\r\n                                    maxes[v] = p;\r\n                                sorted[v] = _.add(sorted[v], s.clone());\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    for(var x in sorted) {\r\n                        var r = _.parse(x + '^' + maxes[x]);\r\n                        var div = _.divide(sorted[x], r);\r\n                        var new_factor = _.expand(div);\r\n\r\n                        if(new_factor.equals(1))\r\n                            break; //why divide by one. Just move \r\n                        var divided = __.div(symbol.clone(), new_factor);\r\n\r\n                        if(divided[0].equals(0)) {\r\n                            //cant factor anymore\r\n                            break;\r\n                        }\r\n\r\n                        // We potentially ended up with fractional coefficients when the\r\n                        // trial division was performed. We need to remove \r\n                        // This check will more then likely become superfluous with improvements\r\n                        // to polynomial division\r\n                        if(divided[1].equals(0)) {\r\n                            var has_fractions = false;\r\n\r\n                            divided[0].each(function (x) {\r\n                                if(!isInt(x.multiplier)) {\r\n                                    has_fractions = true;\r\n                                }\r\n                            });\r\n\r\n                            // The factor isn't really a factor and needs to be put back\r\n                            if(has_fractions) {\r\n                                divided[1] = _.expand(_.multiply(divided[1], new_factor));\r\n                                // Since the new factor is not just one, we exit.\r\n                                break;\r\n                            }\r\n                        }\r\n\r\n                        var neg_numeric_factor = isInt(new_factor) && new_factor.lessThan(0);\r\n\r\n                        if(divided[1].equals(0) && !neg_numeric_factor) { //we found at least one factor\r\n\r\n                            //factors.add(new_factor);\r\n                            var d = __.div(symbol.clone(), divided[0].clone());\r\n                            var r = d[0];\r\n\r\n                            // Nothing left to do since we didn't get a reduction\r\n                            if(r.equals(0)) {\r\n                                return symbol;\r\n                            }\r\n\r\n                            symbol = d[1];\r\n                            //we don't want to just flip the sign. If the remainder is -1 then we accomplished nothing\r\n                            //and we just return the symbol;\r\n                            //If r equals zero then there's nothing left to do so we're done\r\n\r\n                            if(r.equals(-1) && !symbol.equals(0))\r\n                                return symbol;\r\n\r\n                            var factor = divided[0];\r\n\r\n                            if(symbol.equals(factor)) {\r\n                                var rem = __.Factor.reduce(factor, factors);\r\n\r\n                                if(!symbol.equals(rem))\r\n                                    return __.Factor.mfactor(rem, factors);\r\n\r\n                                return rem;\r\n                            }\r\n                            else {\r\n                                factors.add(factor);\r\n                                //if the remainder of the symbol is zero then we're done. TODO: Rethink this logic a bit.\r\n                                if(symbol.equals(0))\r\n                                    return r;\r\n                            }\r\n\r\n                            if(r.isConstant('all')) {\r\n                                factors.add(r);\r\n                                return r;\r\n                            }\r\n\r\n                            return __.Factor.mfactor(r, factors);\r\n                        }\r\n                    }\r\n\r\n                }\r\n\r\n                //difference of squares factorization\r\n                symbol = __.Factor.sqdiff(symbol, factors);\r\n\r\n                //factors by fishing for zeroes\r\n                symbol = __.Factor.zeroes(symbol, factors);\r\n\r\n                return symbol;\r\n            }\r\n        },\r\n        /**\r\n         * Checks to see if a set of \"equations\" is linear. \r\n         * @param {type} set\r\n         * @returns {Boolean}\r\n         */\r\n        allLinear: function (set) {\r\n            var l = set.length;\r\n            for(var i = 0; i < l; i++) {\r\n                if(!__.isLinear(set[i]))\r\n                    return false;\r\n            }\r\n            return true;\r\n        },\r\n        /*\r\n         * Checks to see if the \"equation\" is linear\r\n         * @param {Symbol} e\r\n         * @returns {boolean}\r\n         */\r\n        isLinear: function (e) {\r\n            var status = false, g = e.group;\r\n            if(g === PL || g === CP) {\r\n                status = true;\r\n                for(var s in e.symbols) {\r\n                    var symbol = e.symbols[s], sg = symbol.group;\r\n                    if(sg === FN || sg === EX) {\r\n                        status = false;\r\n                    }\r\n                    if(sg === CB) {\r\n                        //needs further checking since it might be imaginary\r\n                        status = variables(symbol).length === 1;\r\n                    }\r\n                    else {\r\n                        if(sg === PL || sg === CP)\r\n                            status = __.isLinear(symbol);\r\n                        else {\r\n                            if(symbol.group !== N && symbol.power.toString() !== '1') {\r\n                                status = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else if(g === S && e.power === 1)\r\n                status = true;\r\n            return status;\r\n        },\r\n        gcd: function () {\r\n            var args;\r\n            if(arguments.length === 1 && arguments[0] instanceof core.Vector)\r\n                args = arguments[0].elements;\r\n            else\r\n                args = core.Utils.arguments2Array(arguments);\r\n\r\n            //short-circuit early\r\n            if(args.length === 0)\r\n                return new Symbol(1);\r\n            else if(args.length === 1)\r\n                return args[0];\r\n\r\n            var appeared = [], evaluate = false;\r\n            for(var i = 0; i < args.length; i++) {\r\n                if(args[i].group === FN && args[i].fname === 'gcd')\r\n                {\r\n                    //compress gcd(a,gcd(b,c)) into gcd(a,b,c)\r\n                    args = args.concat(arguments[i].args);\r\n                    //do not keep gcd in args\r\n                    args.splice(i, 1);\r\n                }\r\n                else\r\n                {\r\n                    //Look if there are any common variables such that\r\n                    //gcd(a,b) => gcd(a,b); gcd(a,a) => a\r\n                    var vars = variables(args[i]);\r\n                    if(core.Utils.haveIntersection(vars, appeared))\r\n                    {\r\n                        //Ok, there are common variables\r\n                        evaluate = true;\r\n                        break;\r\n                    }\r\n                    else\r\n                        appeared = appeared.concat(vars);\r\n                }\r\n            }\r\n\r\n            //appeared.length is 0 when all arguments are group N\r\n            if(evaluate || appeared.length === 0) {\r\n                //TODO: distribute exponent so that (a^-1*b^-1)^-1 => a*b\r\n                if(args.every(function (symbol) {\r\n                    return symbol.getDenom().equals(1)\r\n                })) {\r\n                    var aggregate = args[0];\r\n\r\n                    for(var i = 1; i < args.length; i++) {\r\n                        aggregate = __.gcd_(args[i], aggregate);\r\n                    }\r\n                    return aggregate;\r\n                }\r\n                else {\r\n                    //gcd_ cannot handle denominators correctly\r\n                    return _.divide(__.gcd.apply(null, args.map(function (symbol) {\r\n                        return symbol.getNum();\r\n                    })),\r\n                            __.lcm.apply(null, args.map(function (symbol) {\r\n                                return symbol.getDenom();\r\n                            })));\r\n                }\r\n            }\r\n            else\r\n                return _.symfunction('gcd', args);\r\n        },\r\n        gcd_: function (a, b) {\r\n            if(a.group === FN || a.group === P)\r\n                a = core.Utils.block('PARSE2NUMBER', function () {\r\n                    return _.parse(a);\r\n                });\r\n\r\n            if(b.group === FN)\r\n                b = core.Utils.block('PARSE2NUMBER', function () {\r\n                    return _.parse(b);\r\n                });\r\n\r\n            if(a.isConstant() && b.isConstant()) {\r\n                // return core.Math2.QGCD(new Frac(+a), new Frac(+b));\r\n                return new Symbol(core.Math2.QGCD(new Frac(+a), new Frac(+b)));\r\n            }\r\n\r\n            var den = _.multiply(a.getDenom() || new Symbol(1), b.getDenom() || new Symbol(1)).invert();\r\n            a = _.multiply(a.clone(), den.clone());\r\n            b = _.multiply(b.clone(), den.clone());\r\n\r\n            //feels counter intuitive but it works. Issue #123 (nerdamer(\"gcd(x+y,(x+y)^2)\"))\r\n            a = _.expand(a);\r\n            b = _.expand(b);\r\n\r\n            if(a.group === CB || b.group === CB) {\r\n                var q = _.divide(a.clone(), b.clone()); //get the quotient\r\n                var t = _.multiply(b.clone(), q.getDenom().invert());//multiply by the denominator\r\n                //if they have a common factor then the result will not equal one \r\n                if(!t.equals(1))\r\n                    return t;\r\n            }\r\n\r\n            //just take the gcd of each component when either of them is in group EX\r\n            if(a.group === EX || b.group === EX)\r\n            {\r\n                var gcd_m = new Symbol(core.Math2.GCD(a.multiplier, b.multiplier));\r\n                var gcd_v = __.gcd_(a.value === CONST_HASH ? new Symbol(1) : _.parse(a.value), b.value === CONST_HASH ? new Symbol(1) : _.parse(b.value));\r\n                var gcd_p = __.gcd_(_.parse(a.power), _.parse(b.power));\r\n                return _.multiply(gcd_m, _.pow(gcd_v, gcd_p));\r\n            }\r\n\r\n            if(a.length < b.length) { //swap'm\r\n                var t = a;\r\n                a = b;\r\n                b = t;\r\n            }\r\n            var vars_a = variables(a), vars_b = variables(b);\r\n            if((vars_a.length === vars_b.length && vars_a.length === 1 && vars_a[0] === vars_b[0])\r\n                    || vars_a.length === 1 && vars_b.length === 0\r\n                    || vars_a.length === 0 && vars_b.length === 1) {\r\n                a = new Polynomial(a);\r\n                b = new Polynomial(b);\r\n                return _.divide(a.gcd(b).toSymbol(), den);\r\n            }\r\n            else {\r\n                //get the gcd of the multipiers\r\n                //get rid of gcd in coeffs\r\n                var multipliers = [];\r\n                a.each(function (x) {\r\n                    multipliers.push(x.multiplier);\r\n                });\r\n                b.each(function (x) {\r\n                    multipliers.push(x.multiplier);\r\n                });\r\n\r\n                var T;\r\n                while(!b.equals(0)) {\r\n                    var t = b.clone();\r\n                    a = a.clone();\r\n                    T = __.div(a, t);\r\n\r\n                    b = T[1];\r\n                    if(T[0].equals(0)) {\r\n                        //return _.multiply(new Symbol(core.Math2.QGCD(a.multiplier, b.multiplier)), b);\r\n                        return _.divide(new Symbol(core.Math2.QGCD(a.multiplier, b.multiplier)), den);\r\n                    }\r\n                    a = t;\r\n                }\r\n\r\n                var gcd = core.Math2.QGCD.apply(undefined, multipliers);\r\n\r\n                if(!gcd.equals(1)) {\r\n                    a.each(function (x) {\r\n                        x.multiplier = x.multiplier.divide(gcd);\r\n                    });\r\n                }\r\n\r\n                //return symbolic function for gcd in indeterminate form\r\n                if(a.equals(1) && !a.isConstant() && !b.isConstant())\r\n                    return _.divide(_.symfunction('gcd', arguments), den);\r\n\r\n                return _.divide(a, den);\r\n            }\r\n        },\r\n        lcm: function () {\r\n            //https://math.stackexchange.com/a/319310\r\n            //generalization of the 2-variable formula of lcm\r\n\r\n            var args;\r\n            if(arguments.length === 1)\r\n                if(arguments[0] instanceof core.Vector)\r\n                    args = arguments[0].elements;\r\n                else\r\n                    _.error('lcm expects either 1 vector or 2 or more arguments');\r\n            else\r\n                args = core.Utils.arguments2Array(arguments);\r\n\r\n            //product of all arguments\r\n            //start with new Symbol(1) so that prev.clone() which makes unnessesary clones can be avoided\r\n            var numer = args.reduce(function (prev, curr) {\r\n                return _.multiply(prev, curr.clone())\r\n            }, new Symbol(1));\r\n\r\n            //gcd of complementary terms\r\n            var denom_args =\r\n                    //https://stackoverflow.com/a/18223072\r\n                //take all complementary terms, e.g.\r\n                //[a,b,c] => [a*b, b*c, a*c]\r\n                //[a,b,c,d] => [a*b*c, a*b*d, a*c*d, b*c*d]\r\n                (function (input, size) {\r\n                        size = Number(size);\r\n                        var results = [], result, mask, i, total = Math.pow(2, input.length);\r\n                        for(mask = size; mask < total; mask++) {\r\n                            result = [];\r\n                            i = input.length - 1;\r\n\r\n                            do {\r\n                                if((mask & (1 << i)) !== 0) {\r\n                                    result.push(input[i]);\r\n                                }\r\n                            }\r\n                            while(i--);\r\n\r\n                            if(result.length === size) {\r\n                                results.push(result);\r\n                            }\r\n                        }\r\n                        return results;\r\n                        //start with new Symbol(1) so that prev.clone() which makes unnessesary clones can be avoided\r\n                    })(arguments, arguments.length - 1).map(function (x) {\r\n                return x.reduce(function (prev, curr) {\r\n                    return _.multiply(prev, curr.clone())\r\n                }, new Symbol(1))\r\n            });\r\n\r\n            var denom;\r\n            //don't eat the gcd term if all arguments are symbols\r\n            if(args.every(function (x) {\r\n                return core.Utils.isVariableSymbol(x)\r\n            }))\r\n                denom = _.symfunction('gcd', core.Utils.arrayUnique(denom_args));\r\n            else\r\n                denom = __.gcd.apply(null, denom_args);\r\n            //divide product of all arguments by gcd of complementary terms\r\n            var div = _.divide(numer, denom);\r\n            return div;\r\n        },\r\n        /**\r\n         * Divides one expression by another\r\n         * @param {Symbol} symbol1\r\n         * @param {Symbol} symbol2\r\n         * @returns {Array}\r\n         */\r\n        divide: function (symbol1, symbol2) {\r\n            var result, remainder, factored, den;\r\n            factored = core.Algebra.Factor.factor(symbol1.clone());\r\n            den = factored.getDenom();\r\n            if(!den.isConstant('all')) {\r\n                symbol1 = _.expand(Symbol.unwrapPARENS(_.multiply(factored, den.clone())));\r\n            }\r\n            else\r\n                //reset the denominator since we're not dividing by it anymore\r\n                den = new Symbol(1);\r\n            result = __.div(symbol1, symbol2);\r\n            remainder = _.divide(result[1], symbol2);\r\n            return _.divide(_.add(result[0], remainder), den);\r\n        },\r\n        div: function (symbol1, symbol2) {\r\n            // If all else fails then assume that division failed with\r\n            // a remainder of zero and the original quotient\r\n            var fail = [new Symbol(0), symbol1.clone()];\r\n\r\n            try {\r\n\r\n                // Division by constants\r\n                if(symbol2.isConstant('all')) {\r\n                    symbol1.each(function (x) {\r\n                        x.multiplier = x.multiplier.divide(symbol2.multiplier);\r\n                    });\r\n                    return [symbol1, new Symbol(0)];\r\n                }\r\n                // So that factorized symbols don't affect the result\r\n                symbol1 = _.expand(symbol1);\r\n                symbol2 = _.expand(symbol2);\r\n                // Special case. May need revisiting\r\n                if(symbol1.group === S && symbol2.group === CP) {\r\n                    var x = symbol1.value;\r\n                    var f = core.Utils.decompose_fn(symbol2.clone(), x, true);\r\n                    if(symbol1.isLinear() && f.x && f.x.isLinear() && symbol2.isLinear()) {\r\n                        var k = Symbol.create(symbol1.multiplier);\r\n                        return [_.divide(k.clone(), f.a.clone()), _.divide(_.multiply(k, f.b), f.a).negate()];\r\n                    }\r\n                }\r\n                if(symbol1.group === S && symbol2.group === S) {\r\n                    var r = _.divide(symbol1.clone(), symbol2.clone());\r\n                    if(r.isConstant()) //we have a whole\r\n                        return [r, new Symbol(0)];\r\n                    return [new Symbol(0), symbol1.clone()];\r\n                }\r\n                var symbol1_has_func = symbol1.hasFunc(),\r\n                        symbol2_has_func = symbol2.hasFunc(),\r\n                        parse_funcs = false;\r\n\r\n                //substitute out functions so we can treat them as regular variables\r\n                if(symbol1_has_func || symbol2_has_func) {\r\n                    parse_funcs = true;\r\n                    var map = {},\r\n                            symbol1 = _.parse(core.Utils.subFunctions(symbol1, map)),\r\n                            symbol2 = _.parse(core.Utils.subFunctions(symbol2, map)),\r\n                            subs = core.Utils.getFunctionsSubs(map);\r\n                }\r\n                //get a list of the variables\r\n                var vars = core.Utils.arrayUnique(variables(symbol1).concat(variables(symbol2))),\r\n                        quot, rem;\r\n\r\n                //treat imaginary numbers as variables\r\n                if(symbol1.isImaginary() || symbol2.isImaginary()) {\r\n                    vars.push(core.Settings.IMAGINARY);\r\n                }\r\n\r\n                if(vars.length === 1) {\r\n                    var q = new Polynomial(symbol1).divide(new Polynomial(symbol2));\r\n                    quot = q[0].toSymbol();\r\n                    rem = q[1].toSymbol();\r\n                }\r\n                else {\r\n                    vars.push(CONST_HASH); //this is for the numbers\r\n                    var reconvert = function (arr) {\r\n                        var symbol = new Symbol(0);\r\n                        for(var i = 0; i < arr.length; i++) {\r\n                            var x = arr[i].toSymbol();\r\n                            symbol = _.add(symbol, x);\r\n                        }\r\n                        return symbol;\r\n                    };\r\n\r\n                    // Silly Martin. This is why you document. I don't remember now\r\n                    var get_unique_max = function (term, any) {\r\n                        var max = Math.max.apply(null, term.terms),\r\n                                count = 0, idx;\r\n\r\n                        if(!any) {\r\n                            for(var i = 0; i < term.terms.length; i++) {\r\n                                if(term.terms[i].equals(max)) {\r\n                                    idx = i;\r\n                                    count++;\r\n                                }\r\n                                if(count > 1)\r\n                                    return;\r\n                            }\r\n                        }\r\n                        if(any) {\r\n                            for(i = 0; i < term.terms.length; i++)\r\n                                if(term.terms[i].equals(max)) {\r\n                                    idx = i;\r\n                                    break;\r\n                                }\r\n                        }\r\n                        return [max, idx, term];\r\n                    };\r\n\r\n                    // Tries to find an LT in the dividend that will satisfy division\r\n                    var get_det = function (s, lookat) {\r\n                        lookat = lookat || 0;\r\n                        var det = s[lookat], l = s.length;\r\n                        if(!det)\r\n                            return;\r\n                        //eliminate the first term if it doesn't apply\r\n                        var umax = get_unique_max(det);\r\n                        for(var i = lookat + 1; i < l; i++) {\r\n                            var term = s[i],\r\n                                    is_equal = det.sum.equals(term.sum);\r\n                            if(!is_equal && umax) {\r\n                                break;\r\n                            }\r\n                            if(is_equal) {\r\n                                // Check the differences of their maxes. The one with the biggest difference governs\r\n                                // e.g. x^2*y^3 vs x^2*y^3 is unclear but this isn't the case in x*y and x^2\r\n                                var max1, max2, idx1, idx2, l2 = det.terms.length;\r\n                                for(var j = 0; j < l2; j++) {\r\n                                    var item1 = det.terms[j], item2 = term.terms[j];\r\n                                    if(typeof max1 === 'undefined' || item1.greaterThan(max1)) {\r\n                                        max1 = item1;\r\n                                        idx1 = j;\r\n                                    }\r\n                                    if(typeof max2 === 'undefined' || item2.greaterThan(max2)) {\r\n                                        max2 = item2;\r\n                                        idx2 = j;\r\n                                    }\r\n                                }\r\n                                //check their differences\r\n                                var d1 = max1.subtract(term.terms[idx1]),\r\n                                        d2 = max2.subtract(det.terms[idx2]);\r\n                                if(d2 > d1) {\r\n                                    umax = [max2, idx2, term];\r\n                                    break;\r\n                                }\r\n                                if(d1 > d2) {\r\n                                    umax = [max1, idx1, det];\r\n                                    break;\r\n                                }\r\n                            }\r\n                            else {\r\n                                //check if it's a suitable pick to determine the order\r\n                                umax = get_unique_max(term);\r\n                                //if(umax) return umax;\r\n                                if(umax)\r\n                                    break;\r\n                            }\r\n                            umax = get_unique_max(term); //calculate a new unique max\r\n                        }\r\n\r\n                        //if still no umax then any will do since we have a tie\r\n                        if(!umax)\r\n                            return get_unique_max(s[0], true);\r\n                        var e, idx;\r\n                        for(var i = 0; i < s2.length; i++) {\r\n                            var cterm = s2[i].terms;\r\n                            //confirm that this is a good match for the denominator\r\n                            idx = umax[1];\r\n                            if(idx === cterm.length - 1)\r\n                                return;\r\n                            e = cterm[idx];\r\n                            if(!e.equals(0))\r\n                                break;\r\n                        }\r\n                        if(e.equals(0))\r\n                            return get_det(s, ++lookat); //look at the next term\r\n\r\n                        return umax;\r\n                    };\r\n\r\n                    var t_map = core.Utils.toMapObj(vars);\r\n                    var init_sort = function (a, b) {\r\n                        return b.sum.subtract(a.sum);\r\n                    };\r\n                    var is_larger = function (a, b) {\r\n                        if(!a || !b)\r\n                            return false; //it's empty so...\r\n                        for(var i = 0; i < a.terms.length; i++) {\r\n                            if(a.terms[i].lessThan(b.terms[i]))\r\n                                return false;\r\n                        }\r\n                        return true;\r\n                    };\r\n\r\n                    var s1 = symbol1.tBase(t_map).sort(init_sort),\r\n                            s2 = symbol2.tBase(t_map).sort(init_sort);\r\n                    var target = is_larger(s1[0], s2[0]) && s1[0].count > s2[0].count ? s2 : s1; //since the num is already larger than we can get the det from denom\r\n                    var det = get_det(target);//we'll begin by assuming that this will let us know which term \r\n                    var quotient = [];\r\n                    if(det) {\r\n                        var lead_var = det[1];\r\n                        var can_divide = function (a, b) {\r\n                            if(a[0].sum.equals(b[0].sum))\r\n                                return a.length >= b.length;\r\n                            return true;\r\n                        };\r\n\r\n                        var try_better_lead_var = function (s1, s2, lead_var) {\r\n                            var checked = [];\r\n                            for(var i = 0; i < s1.length; i++) {\r\n                                var t = s1[i];\r\n                                for(var j = 0; j < t.terms.length; j++) {\r\n                                    var cf = checked[j], tt = t.terms[j];\r\n                                    if(i === 0)\r\n                                        checked[j] = tt; //add the terms for the first one\r\n                                    else if(cf && !cf.equals(tt))\r\n                                        checked[j] = undefined;\r\n                                }\r\n                            }\r\n                            for(var i = 0; i < checked.length; i++) {\r\n                                var t = checked[i];\r\n                                if(t && !t.equals(0))\r\n                                    return i;\r\n                            }\r\n                            return lead_var;\r\n                        };\r\n                        var sf = function (a, b) {\r\n                            var l1 = a.len(), l2 = b.len();\r\n                            var blv = b.terms[lead_var], alv = a.terms[lead_var];\r\n                            if(l2 > l1 && blv.greaterThan(alv))\r\n                                return l2 - l1;\r\n                            return blv.subtract(alv);\r\n                        };\r\n\r\n                        //check to see if there's a better lead_var\r\n                        lead_var = try_better_lead_var(s1, s2, lead_var);\r\n                        //reorder both according to the max power\r\n                        s1.sort(sf); //sort them both according to the leading variable power\r\n                        s2.sort(sf);\r\n\r\n                        //try to adjust if den is larger\r\n                        var fdt = s2[0], fnt = s1[0];\r\n\r\n                        var den = new MVTerm(new Frac(1), [], fnt.map);\r\n                        if(fdt.sum.greaterThan(fnt.sum) && fnt.len() > 1) {\r\n                            for(var i = 0; i < fnt.terms.length; i++) {\r\n                                var d = fdt.terms[i].subtract(fnt.terms[i]);\r\n                                if(!d.equals(0)) {\r\n                                    var nd = d.add(new Frac(1));\r\n                                    den.terms[i] = d;\r\n                                    for(var j = 0; j < s1.length; j++) {\r\n                                        s1[j].terms[i] = s1[j].terms[i].add(nd);\r\n                                    }\r\n                                }\r\n                                else\r\n                                    den.terms[i] = new Frac(0);\r\n                            }\r\n                        }\r\n\r\n                        var dividend_larger = is_larger(s1[0], s2[0]);\r\n\r\n                        var safety = 0;\r\n                        var max = 200;\r\n\r\n                        while(dividend_larger && can_divide(s1, s2)) {\r\n                            if(safety++ > max) {\r\n                                throw new core.exceptions.InfiniteLoopError('Unable to compute!');\r\n                            }\r\n\r\n                            var q = s1[0].divide(s2[0]);\r\n\r\n                            quotient.push(q); //add what's divided to the quotient\r\n                            s1.shift();//the first one is guaranteed to be gone so remove from dividend\r\n                            for(var i = 1; i < s2.length; i++) { //loop through the denominator\r\n                                var t = s2[i].multiply(q).generateImage(),\r\n                                        l2 = s1.length;\r\n                                //if we're subtracting from 0\r\n                                if(l2 === 0) {\r\n                                    t.coeff = t.coeff.neg();\r\n                                    s1.push(t);\r\n                                    s1.sort(sf);\r\n                                }\r\n\r\n                                for(var j = 0; j < l2; j++) {\r\n                                    var cur = s1[j];\r\n                                    if(cur.getImg() === t.getImg()) {\r\n                                        cur.coeff = cur.coeff.subtract(t.coeff);\r\n                                        if(cur.coeff.equals(0)) {\r\n                                            core.Utils.remove(s1, j);\r\n                                            j--; //adjust the iterator\r\n                                        }\r\n                                        break;\r\n                                    }\r\n                                    if(j === l2 - 1) {\r\n                                        t.coeff = t.coeff.neg();\r\n                                        s1.push(t);\r\n                                        s1.sort(sf);\r\n                                    }\r\n                                }\r\n                            }\r\n                            dividend_larger = is_larger(s1[0], s2[0]);\r\n\r\n                            if(!dividend_larger && s1.length >= s2.length) {\r\n                                //One more try since there might be a terms that is larger than the LT of the divisor\r\n                                for(var i = 1; i < s1.length; i++) {\r\n                                    dividend_larger = is_larger(s1[i], s2[0]);\r\n                                    if(dividend_larger) {\r\n                                        //take it from its current position and move it to the front\r\n                                        s1.unshift(core.Utils.remove(s1, i));\r\n                                        break;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    quot = reconvert(quotient);\r\n                    rem = reconvert(s1);\r\n\r\n                    if(typeof den !== 'undefined') {\r\n                        den = den.toSymbol();\r\n                        quot = _.divide(quot, den.clone());\r\n                        rem = _.divide(rem, den);\r\n                    }\r\n                }\r\n\r\n                //put back the functions\r\n                if(parse_funcs) {\r\n                    quot = _.parse(quot.text(), subs);\r\n                    rem = _.parse(rem.text(), subs);\r\n                }\r\n\r\n                return [quot, rem];\r\n            }\r\n            catch(e) {\r\n                return fail;\r\n            }\r\n\r\n        },\r\n        line: function (v1, v2, x) {\r\n            if(core.Utils.isArray(v1))\r\n                v1 = core.Utils.convertToVector(v1);\r\n            if(core.Utils.isArray(v2))\r\n                v2 = core.Utils.convertToVector(v2);\r\n            x = _.parse(x || 'x');\r\n            if(!core.Utils.isVector(v1) || !core.Utils.isVector(v2))\r\n                _.error('Line expects a vector! Received \"' + v1 + '\" & \"' + v2 + '\"');\r\n            var dx = _.subtract(v2.e(1).clone(), v1.e(1).clone()),\r\n                    dy = _.subtract(v2.e(2).clone(), v1.e(2).clone()),\r\n                    m = _.divide(dy, dx),\r\n                    a = _.multiply(x, m.clone()),\r\n                    b = _.multiply(v1.e(1).clone(), m);\r\n            return _.add(_.subtract(a, b), v1.e(2).clone());\r\n        },\r\n        PartFrac: {\r\n            createTemplate: function (den, denom_factors, f_array, v) {\r\n                //clean up the denominator function by factors so it reduces nicely\r\n                den = __.Factor.factor(den);\r\n\r\n                //clean up factors. This is so inefficient but factors are wrapped in parens for safety\r\n                den.each(function (x, key) {\r\n                    if(x.group === FN && x.fname === '' && x.args[0].group === S) {\r\n                        var y = x.args[0];\r\n                        if(this.symbols) {\r\n                            delete this.symbols[key];\r\n                            this.symbols[y.value] = y;\r\n                        }\r\n                        else {\r\n                            den = x.args[0];\r\n                        }\r\n                    }\r\n                });\r\n\r\n                var factors, factors_vec, f, p, deg, degrees, m;\r\n                factors = denom_factors.collectFactors();\r\n                factors_vec = []; //a vector for the template\r\n                degrees = [];\r\n                m = new Symbol(1);\r\n\r\n                for(var i = 0; i < factors.length; i++) { //loop through the factors\r\n                    var factor = Symbol.unwrapPARENS(factors[i]);\r\n                    //if in he for P^n where P is polynomial and n = integer\r\n                    if(factor.power.greaterThan(1)) {\r\n                        p = Number(factor.power);\r\n                        f = factor.clone().toLinear(); //remove the power so we have only the function\r\n                        deg = Number(__.degree(f, v)); //get the degree of f\r\n                        //expand the factor\r\n                        for(var j = 0; j < p; j++) {\r\n                            var efactor = _.pow(f.clone(), new Symbol(j + 1));\r\n                            f_array.push(efactor.clone());\r\n                            var d = _.divide(den.clone(), efactor.clone());\r\n                            degrees.push(deg);\r\n                            factors_vec.push(d);\r\n                        }\r\n                    }\r\n                    /*\r\n                     Possible bug.\r\n                     Removed: causes 1/(20+24*x+4*x^2) to result in (-1/64)*(5+x)^(-1)+(1/64)*(1+x)^(-1)\r\n                     else if(factor.isConstant('all')) {\r\n                     m = _.multiply(m, factor);\r\n                     }\r\n                     */\r\n                    else {\r\n                        //get the degree of the factor so we tack it on tot he factor. This should probably be an array\r\n                        //but for now we note it on the symbol\r\n                        deg = Number(__.degree(factor, v));\r\n                        f_array.push(factor);\r\n                        var d = _.divide(den.clone(), factor.clone());\r\n                        d = _.expand(Symbol.unwrapPARENS(d));\r\n                        degrees.push(deg);\r\n                        factors_vec.push(d);\r\n                    }\r\n                }\r\n                //put back the constant\r\n                f_array = f_array.map(function (x) {\r\n                    return _.multiply(x, m.clone());\r\n                });\r\n                return [f_array, factors_vec, degrees];\r\n            },\r\n            partfrac: function (symbol, v, as_array) {\r\n\r\n                var vars = variables(symbol);\r\n\r\n                v = v || _.parse(vars[0]); //make wrt optional and assume first variable\r\n                try {\r\n                    var num, den, factors, tfactors, ofactors, nterms, degrees,\r\n                            dterms, max, M, c, powers, div, r, factors_vec, ks,\r\n                            template, tfactors;\r\n                    num = _.expand(symbol.getNum());\r\n                    den = _.expand(symbol.getDenom().toUnitMultiplier());\r\n                    //move the entire multipier to the numerator\r\n                    num.multiplier = symbol.multiplier;\r\n                    //we only have a meaningful change if n factors > 1. This means that\r\n                    //the returned group will be a CB\r\n                    //collect the terms wrt the x\r\n                    nterms = num.groupTerms(v);\r\n                    //divide out wholes if top is larger\r\n                    if(Number(__.degree(num, v)) >= Number(__.degree(den, v))) {\r\n                        div = __.div(num.clone(), _.expand(den.clone()));\r\n                        r = div[0]; //remove the wholes\r\n                        num = div[1]; //work with the remainder\r\n                        nterms = num.groupTerms(v); //recalculate the nterms\r\n                    }\r\n                    else\r\n                        r = new Symbol(0);\r\n\r\n                    if(Number(__.degree(den, v)) === 1) {\r\n                        var q = _.divide(num, den);\r\n                        if(as_array)\r\n                            return [r, q];\r\n                        return _.add(r, q);\r\n                    }\r\n                    //first factor the denominator. This means that the strength of this\r\n                    //algorithm depends on how well we can factor the denominator. \r\n                    ofactors = __.Factor.factor(den);\r\n                    //create the template. This method will create the template for solving \r\n                    //the partial fractions. So given x/(x-1)^2 the template creates A/(x-1)+B/(x-1)^2\r\n                    template = __.PartFrac.createTemplate(den.clone(), ofactors, [], v);\r\n                    tfactors = template[0]; //grab the factors\r\n                    factors_vec = template[1]; //grab the factor vectors\r\n                    degrees = template[2]; //grab the degrees\r\n                    //make note of the powers of each term\r\n                    powers = [nterms.length];\r\n                    //create the dterms vector\r\n                    dterms = [];\r\n                    factors = [];\r\n                    ks = [];\r\n                    var factor, deg;\r\n                    factors_vec.map(function (x, idx) {\r\n                        factor = tfactors[idx];\r\n                        deg = degrees[idx];\r\n                        for(var i = 0; i < deg; i++) {\r\n                            factors.push(factor.clone());\r\n                            var k = Symbol.create(v, i);\r\n                            var t = _.expand(_.multiply(x, k.clone())).groupTerms(v);\r\n                            //make a note of the power which corresponds to the length of the array\r\n                            var p = t.length;\r\n                            powers.push(p);\r\n                            dterms.push(t);\r\n                            ks.push(k.clone());\r\n                        }\r\n                    });\r\n                    //get the max power\r\n                    max = core.Utils.arrayMax(powers);\r\n\r\n                    //fill the holes and create a matrix\r\n                    c = new core.Matrix(core.Utils.fillHoles(nterms, max)).transpose();\r\n                    //for each of the factors we do the same\r\n                    M = new core.Matrix();\r\n                    for(var i = 0; i < dterms.length; i++) {\r\n                        M.elements.push(core.Utils.fillHoles(dterms[i], max));\r\n                    }\r\n\r\n                    //solve the system of equations\r\n                    var partials = _.multiply(M.transpose().invert(), c);\r\n                    //the results are backwards to reverse it\r\n                    //partials.elements.reverse();\r\n                    //convert it all back\r\n                    var retval = as_array ? [r] : r;\r\n                    partials.each(function (e, i) {\r\n                        var term = _.multiply(ks[i], _.divide(e, factors[i]));\r\n                        if(as_array)\r\n                            retval.push(term);\r\n                        else\r\n                            retval = _.add(retval, term);\r\n                    });\r\n\r\n                    //done\r\n                    return retval;\r\n                }\r\n                catch(e) {\r\n                    //try to group symbols\r\n                    try {\r\n                        if(symbol.isComposite()) {\r\n                            //group denominators\r\n                            var denominators = {};\r\n\r\n                            symbol.each(function (x) {\r\n                                var d = x.getDenom();\r\n                                var n = x.getNum();\r\n                                var e = denominators[d];\r\n                                denominators[d] = e ? _.add(e, n) : n;\r\n                            });\r\n\r\n                            var t = new Symbol(0);\r\n\r\n                            for(var x in denominators) {\r\n                                t = _.add(t, _.divide(denominators[x], _.parse(x)));\r\n                            }\r\n\r\n                            symbol = t;\r\n                        }\r\n                    }\r\n                    catch(e2) {\r\n                    }\r\n                    ;\r\n                }\r\n                ;\r\n\r\n                return symbol;\r\n            }\r\n        },\r\n        degree: function (symbol, v, o) {\r\n            o = o || {\r\n                nd: [], //numeric\r\n                sd: [], //symbolic\r\n                depth: 0 //call depth\r\n            };\r\n\r\n            if(!v) {\r\n                var vars = variables(symbol);\r\n                //The user must specify the variable for multivariate\r\n                if(vars.length > 1)\r\n                    throw new Error('You must specify the variable for multivariate polynomials!');\r\n                //if it's empty then we're dealing with a constant\r\n                if(vars.length === 0)\r\n                    return new Symbol(0);\r\n                //assume the variable for univariate\r\n                v = _.parse(vars[0]);\r\n            }\r\n\r\n            //store the group\r\n            var g = symbol.group;\r\n            //we're going to trust the user and assume no EX. Calling isPoly \r\n            //would eliminate this but no sense in checking twice. \r\n            if(symbol.isComposite()) {\r\n                symbol = symbol.clone();\r\n                symbol.distributeExponent();\r\n                symbol.each(function (x) {\r\n                    o.depth++; //mark a depth increase\r\n                    __.degree(x, v, o);\r\n                    o.depth--; //we're back\r\n                });\r\n            }\r\n            else if(symbol.group === CB) {\r\n                symbol.each(function (x) {\r\n                    o.depth++;\r\n                    __.degree(x, v, o);\r\n                    o.depth++;\r\n                });\r\n            }\r\n            else if(g === EX && symbol.value === v.value) {\r\n                o.sd.push(symbol.power.clone());\r\n            }\r\n            else if(g === S && symbol.value === v.value) {\r\n                o.nd.push(_.parse(symbol.power));\r\n            }\r\n            else\r\n                o.nd.push(new Symbol(0));\r\n\r\n            //get the max out of the array\r\n            var deg = o.nd.length > 0 ? core.Utils.arrayMax(o.nd) : undefined;\r\n\r\n            if(o.depth === 0 && o.sd.length > 0) {\r\n                if(deg !== undefined)\r\n                    o.sd.unshift(deg);\r\n                return _.symfunction('max', o.sd);\r\n            }\r\n            if(!core.Utils.isSymbol(deg))\r\n                deg = _.parse(deg);\r\n            //return the degree\r\n            return deg;\r\n        },\r\n        /**\r\n         * Attempts to complete the square of a polynomial\r\n         * @param {type} symbol\r\n         * @param {type} v\r\n         * @param {type} raw\r\n         * @throws {Error} \r\n         * @returns {Object|Symbol[]}\r\n         */\r\n        sqComplete: function (symbol, v, raw) {\r\n            if(!core.Utils.isSymbol(v))\r\n                v = _.parse(v);\r\n            var stop = function (msg) {\r\n                msg = msg || 'Stopping';\r\n                throw new core.exceptions.ValueLimitExceededError(msg);\r\n            };\r\n            //if not CP then nothing to do\r\n            if(!symbol.isPoly(true))\r\n                stop('Must be a polynomial!');\r\n\r\n            //declare vars\r\n            var deg, a, b, c, d, e, coeffs, sign, br, sym, sqrt_a;\r\n\r\n            br = core.Utils.inBrackets;\r\n            //make a copy\r\n            symbol = symbol.clone();\r\n            deg = core.Algebra.degree(symbol, v); //get the degree of polynomial\r\n            //must be in form ax^2 +/- bx +/- c\r\n            if(!deg.equals(2))\r\n                stop('Cannot complete square for degree ' + deg);\r\n            //get the coeffs\r\n            coeffs = core.Algebra.coeffs(symbol, v);\r\n            a = coeffs[2];\r\n            //store the sign\r\n            sign = coeffs[1].sign();\r\n            //divide the linear term by two and square it\r\n            b = _.divide(coeffs[1], new Symbol(2));\r\n            //add the difference to the constant\r\n            c = _.pow(b.clone(), new Symbol(2));\r\n            if(raw)\r\n                return [a, b, d];\r\n            sqrt_a = math.sqrt(a);\r\n            e = _.divide(math.sqrt(c), sqrt_a.clone());\r\n            //calculate d which is the constant\r\n            d = _.subtract(coeffs[0], _.pow(e.clone(), new Symbol(2)));\r\n            //compute the square part\r\n            sym = _.parse(br(sqrt_a.clone() + '*' + v + (sign < 0 ? '-' : '+') + e));\r\n            return {\r\n                a: sym,\r\n                c: d,\r\n                f: _.add(_.pow(sym.clone(), new Symbol(2)), d.clone())\r\n            };\r\n        },\r\n        Simplify: {\r\n            strip: function (symbol) {\r\n                var c = _.parse(symbol.multiplier);\r\n                symbol.toUnitMultiplier();\r\n                var p = _.parse(symbol.power);\r\n                symbol.toLinear();\r\n                return [c, p, symbol];\r\n            },\r\n            unstrip: function (cp, symbol) {\r\n                var c = cp[0];\r\n                var p = cp[1];\r\n                return _.multiply(c, _.pow(symbol, p));\r\n            },\r\n            complexSimp: function (num, den) {\r\n                var ac, bd, bc, ad, cd, r1, r2, i1, i2;\r\n                r1 = num.realpart();\r\n                i1 = num.imagpart();\r\n                r2 = den.realpart();\r\n                i2 = den.imagpart();\r\n                //apply complex arithmatic rule\r\n                ac = _.multiply(r1.clone(), r2.clone());\r\n                bd = _.multiply(i1.clone(), i2.clone());\r\n                bc = _.multiply(r2.clone(), i1);\r\n                ad = _.multiply(r1, i2.clone());\r\n                cd = _.add(_.pow(r2, new Symbol(2)), _.pow(i2, new Symbol(2)));\r\n\r\n                return _.divide(_.add(_.add(ac, bd), _.multiply(_.subtract(bc, ad), Symbol.imaginary())), cd);\r\n            },\r\n            trigSimp: function (symbol) {\r\n                if(symbol.containsFunction(['cos', 'sin', 'tan'])) {\r\n                    symbol = symbol.clone();\r\n                    //remove power and multiplier\r\n                    var sym_array = __.Simplify.strip(symbol);\r\n                    symbol = sym_array.pop();\r\n                    //the default return value is the symbol\r\n                    var retval = symbol.clone();\r\n\r\n                    //rewrite the symbol\r\n                    if(symbol.group === CP) {\r\n                        var sym = new Symbol(0);\r\n                        symbol.each(function (x) {\r\n                            //rewrite the function\r\n                            var tr = __.Simplify.trigSimp(x.fnTransform());\r\n                            sym = _.add(sym, tr);\r\n                        }, true);\r\n\r\n                        //put back the power and multiplier and return\r\n                        retval = _.pow(_.multiply(new Symbol(symbol.multiplier), sym), new Symbol(symbol.power));\r\n                    }\r\n                    else if(symbol.group === CB) {\r\n\r\n                        var n = symbol.getNum();\r\n                        var d = symbol.getDenom();\r\n\r\n                        //try for tangent\r\n                        if(n.fname === 'sin' && d.fname === 'cos' && n.args[0].equals(d.args[0]) && n.power.equals(d.power)) {\r\n                            retval = _.parse(core.Utils.format('({0})*({1})*tan({2})^({3})', d.multiplier, n.multiplier, n.args[0], n.power));\r\n                        }\r\n                        if(retval.group === CB) {\r\n                            var t = new Symbol(1);\r\n                            retval.each(function (x) {\r\n                                if(x.fname === 'tan') {\r\n                                    x = _.parse(core.Utils.format('({0})*sin({1})^({2})/cos({1})^({2})', x.multiplier, __.Simplify.simplify(x.args[0]), x.power));\r\n                                }\r\n                                t = _.multiply(t, x);\r\n                            });\r\n                            retval = t;\r\n                        }\r\n                    }\r\n\r\n\r\n                    retval = __.Simplify.unstrip(sym_array, retval).distributeMultiplier();\r\n\r\n                    symbol = retval;\r\n                }\r\n\r\n                return symbol;\r\n            },\r\n            fracSimp: function (symbol) {\r\n                //try a quick simplify of imaginary numbers\r\n                var den = symbol.getDenom();\r\n                var num = symbol.getNum();\r\n\r\n                if(num.isImaginary() && den.isImaginary())\r\n                    symbol = __.Simplify.complexSimp(num, den);\r\n\r\n                if(symbol.isComposite()) {\r\n                    if(symbol.power > 1) {\r\n                        symbol = _.expand(symbol);\r\n                    }\r\n\r\n                    var symbols = symbol.collectSymbols();\r\n                    //assumption 1.\r\n                    //since it's a composite, it has a length of at least 1\r\n                    var retval, a, b, d1, d2, n1, n2, s, x, y, c, den, num;\r\n                    a = symbols.pop(); //grab the first symbol\r\n                    //loop through each term and make denominator common\r\n                    while(symbols.length) {\r\n                        b = symbols.pop(); //grab the second symbol\r\n                        d1 = _.parse(a.getDenom());\r\n                        d2 = _.parse(b.getDenom());\r\n                        n1 = a.getNum();\r\n                        n2 = b.getNum();\r\n                        c = _.multiply(d1.clone(), d2.clone());\r\n                        x = _.multiply(n1, d2);\r\n                        y = _.multiply(n2, d1);\r\n                        s = _.add(x, y);\r\n                        a = _.divide(s, c);\r\n                    }\r\n                    den = _.expand(a.getDenom());\r\n                    num = _.expand(a.getNum());\r\n                    //simplify imaginary\r\n                    if(num.isImaginary() && den.isImaginary()) {\r\n                        retval = __.Simplify.complexSimp(num, den);\r\n                    }\r\n                    else {\r\n                        retval = _.divide(num, den);\r\n                    }\r\n\r\n                    //we've already hit the simplest form so return that\r\n                    if(retval.equals(symbol)) {\r\n                        return symbol;\r\n                    }\r\n\r\n                    //otherwise simplify it some more\r\n                    return __.Simplify.simplify(retval);\r\n                }\r\n                return symbol;\r\n            },\r\n            ratSimp: function (symbol) {\r\n                if(symbol.group === CB) {\r\n                    var den = symbol.getDenom();\r\n                    var num = symbol.getNum().distributeMultiplier();\r\n                    var d = __.Simplify.fracSimp(den);\r\n                    var n = __.Simplify.fracSimp(num);\r\n                    symbol = _.divide(n, d);\r\n                }\r\n                return symbol;\r\n            },\r\n            sqrtSimp: function (symbol, sym_array) {\r\n                var retval;\r\n                if(symbol.isSQRT()) {\r\n                    var factored = __.Factor.factor(symbol.args[0].clone());\r\n                    var m = _.parse(factored.multiplier);\r\n                    var sign = m.sign();\r\n\r\n                    var retval = _.sqrt(m.abs());\r\n                    var arg;\r\n\r\n                    if(isInt(retval)) {\r\n\r\n                        if(factored.group === CB) {\r\n                            var rem = new Symbol(1);\r\n\r\n                            factored.each(function (x) {\r\n                                if(x.group === N) {\r\n                                    var trial = _.sqrt(x.clone());\r\n\r\n                                    // Multiply back sqrt if it's an integer otherwise just put back the number\r\n                                    if(isInt(trial)) {\r\n                                        retval = _.multiply(retval, trial);\r\n                                    }\r\n                                    else {\r\n                                        rem = _.multiply(rem, x);\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    rem = _.multiply(rem, x);\r\n                                }\r\n\r\n                            });\r\n                            var t = _.multiply(rem, _.parse(sign));\r\n                            arg = _.sqrt(t.clone());\r\n\r\n                            // Expand if it's imaginary\r\n                            if(arg.isImaginary) {\r\n                                arg = _.sqrt(_.expand(t.clone()));\r\n                            }\r\n                        }\r\n                        else {\r\n                            // Strip the multiplier\r\n                            arg = _.sqrt(factored.clone().toUnitMultiplier());\r\n                        }\r\n                        return _.multiply(retval, arg);\r\n\r\n                    }\r\n\r\n                }\r\n                else if(symbol.isComposite() && symbol.isLinear()) {\r\n                    retval = new Symbol(0);\r\n                    symbol.each(function (x) {\r\n                        retval = _.add(retval, __.Simplify.sqrtSimp(x));\r\n                    }, true);\r\n                    // Put back the multiplier\r\n                    retval = _.multiply(retval, _.parse(symbol.multiplier));\r\n                }\r\n                else if(symbol.group === CB) {\r\n                    retval = _.parse(symbol.multiplier);\r\n                    symbol.each(function (x) {\r\n                        var simp = __.Simplify.sqrtSimp(x);\r\n                        retval = _.multiply(retval, simp);\r\n\r\n                    }, true);\r\n                    // Put back the power\r\n                    retval = _.pow(retval, _.parse(symbol.power));\r\n                }\r\n\r\n                return retval ? retval : _.parse(symbol);\r\n            },\r\n            /**\r\n             * Unused. The goal is to substitute out patterns but it currently doesn't work.\r\n             * @param {Symbol} symbol\r\n             * @return {Array} The symbol and the matched patterns\r\n             */\r\n            patternSub: function (symbol) {\r\n                var patterns = {};\r\n\r\n                var has_CP = function (symbol) {\r\n                    var found = false;\r\n                    symbol.each(function (x) {\r\n                        if(x.group === CP) {\r\n                            found = true;\r\n                        }\r\n                        else if(x.symbols) {\r\n                            found = has_CP(x);\r\n                        }\r\n                    });\r\n\r\n                    return found;\r\n                };\r\n\r\n                var collect = function (sym) {\r\n                    // We loop through each symbol looking for anything in the simplest\r\n                    // form of ax+byz+...\r\n                    sym.each(function (x) {\r\n                        // Items of group N,P,S, need to apply\r\n                        if(!x.symbols && x.group !== FN) {\r\n                            return;\r\n                        }\r\n\r\n                        // Check to see if it has any symbols of group CP\r\n                        // Get the patterns in that symbol instead if it has anything of group CP\r\n                        if(has_CP(x)) {\r\n                            collect(x);\r\n                        }\r\n                        else {\r\n                            if(!patterns[x.value]) {\r\n                                var u = core.Utils.getU(symbol);\r\n                                // Get a u value and mark it for subsitution\r\n                                patterns[x.value] = u;\r\n                                symbol = symbol.sub(x.value, u);\r\n                            }\r\n                        }\r\n                    }, true);\r\n                };\r\n\r\n                // Collect a list of patterns\r\n                collect(symbol);\r\n\r\n                return [symbol, patterns];\r\n            },\r\n            simplify: function (symbol) {\r\n                //remove the multiplier to make calculation easier;\r\n                var sym_array = __.Simplify.strip(symbol);\r\n                symbol = sym_array.pop();\r\n                //remove gcd from denominator\r\n                symbol = __.Simplify.fracSimp(symbol);\r\n                //nothing more to do\r\n                if(symbol.isConstant() || symbol.group === core.groups.S) {\r\n                    sym_array.push(symbol);\r\n                    var ret = __.Simplify.unstrip(sym_array, symbol);\r\n                    return ret;\r\n                }\r\n\r\n                //var patterns;\r\n\r\n                var simplified = symbol.clone(); //make a copy\r\n\r\n                //[simplified, patterns] = __.Simplify.patternSub(symbol);\r\n\r\n                // Simplify sqrt within the symbol\r\n//                simplified = __.Simplify.sqrtSimp(simplified, sym_array);\r\n\r\n                // Try trig simplificatons e.g. cos(x)^2+sin(x)^2\r\n                simplified = __.Simplify.trigSimp(simplified);\r\n\r\n                // Simplify common denominators\r\n                simplified = __.Simplify.ratSimp(simplified);\r\n\r\n                // First go for the \"cheapest\" simplification which may eliminate \r\n                // your problems right away. factor -> evaluate. Remember\r\n                // that there's no need to expand since factor already does that\r\n\r\n                simplified = __.Factor.factor(simplified);\r\n\r\n                //If the simplfied is a sum then we can make a few more simplifications\r\n                //e.g. simplify(1/(x-1)+1/(1-x)) as per issue #431\r\n                if(simplified.group === core.groups.CP && simplified.isLinear()) {\r\n                    var m = simplified.multiplier.clone();\r\n                    simplified.toUnitMultiplier(); //strip the multiplier\r\n                    var r = new Symbol(0);\r\n                    //return the sum of simplifications\r\n                    simplified.each(function (x) {\r\n                        var s = __.Simplify.simplify(x);\r\n                        r = _.add(r, s);\r\n                    });\r\n                    simplified = r;\r\n                    //put back the multiplier\r\n                    r.multiplier = r.multiplier.multiply(m);\r\n                }\r\n\r\n                //place back multiplier and return\r\n                var retval = __.Simplify.unstrip(sym_array, simplified);\r\n\r\n                // Back substitute\r\n                /*\r\n                 for(var x in patterns) {\r\n                 retval = retval.sub(patterns[x], x);\r\n                 }\r\n                 */\r\n\r\n                return retval;\r\n            }\r\n        },\r\n\r\n        Classes: {\r\n            Polynomial: Polynomial,\r\n            Factors: Factors,\r\n            MVTerm: MVTerm\r\n        }\r\n    };\r\n\r\n    // Add a link to simplify\r\n    core.Expression.prototype.simplify = function () {\r\n        return __.Simplify.simplify(this.symbol);\r\n    };\r\n\r\n    nerdamer.useAlgebraDiv = function () {\r\n        var divide = __.divideFn = _.divide;\r\n        var calls = 0; //keep track of how many calls were made\r\n        _.divide = function (a, b) {\r\n            calls++;\r\n            var ans;\r\n            if(calls === 1) //check if this is the first call. If it is use algebra divide\r\n                ans = core.Algebra.divide(a, b);\r\n            else //otherwise use parser divide\r\n                ans = divide(a, b);\r\n            calls = 0; //reset the number of calls back to none\r\n            return ans;\r\n        };\r\n    };\r\n\r\n    nerdamer.useParserDiv = function () {\r\n        if(__.divideFn)\r\n            _.divide = __.divideFn;\r\n        delete __.divideFn;\r\n    };\r\n\r\n    nerdamer.register([\r\n        {\r\n            name: 'factor',\r\n            visible: true,\r\n            numargs: 1,\r\n            build: function () {\r\n                return __.Factor.factor;\r\n            }\r\n        },\r\n        {\r\n            name: 'simplify',\r\n            visible: true,\r\n            numargs: 1,\r\n            build: function () {\r\n                return __.Simplify.simplify;\r\n            }\r\n        },\r\n        {\r\n            name: 'gcd',\r\n            visible: true,\r\n            numargs: [1, ],\r\n            build: function () {\r\n                return __.gcd;\r\n            }\r\n        },\r\n        {\r\n            name: 'lcm',\r\n            visible: true,\r\n            numargs: [1, ],\r\n            build: function () {\r\n                return __.lcm;\r\n            }\r\n        },\r\n        {\r\n            name: 'roots',\r\n            visible: true,\r\n            numargs: -1,\r\n            build: function () {\r\n                return __.roots;\r\n            }\r\n        },\r\n        {\r\n            name: 'divide',\r\n            visible: true,\r\n            numargs: 2,\r\n            build: function () {\r\n                return __.divide;\r\n            }\r\n        },\r\n        {\r\n            name: 'div',\r\n            visible: true,\r\n            numargs: 2,\r\n            build: function () {\r\n                return __.div;\r\n            }\r\n        },\r\n        {\r\n            name: 'partfrac',\r\n            visible: true,\r\n            numargs: [1, 2],\r\n            build: function () {\r\n                return __.PartFrac.partfrac;\r\n            }\r\n        },\r\n        {\r\n            name: 'deg',\r\n            visible: true,\r\n            numargs: [1, 2],\r\n            build: function () {\r\n                return __.degree;\r\n            }\r\n        },\r\n        {\r\n            name: 'coeffs',\r\n            visible: true,\r\n            numargs: [1, 2],\r\n            build: function () {\r\n                var f = function () {\r\n                    var coeffs = __.coeffs.apply(__, arguments);\r\n                    return new core.Vector(coeffs);\r\n                };\r\n                return f;\r\n            }\r\n        },\r\n        {\r\n            name: 'line',\r\n            visible: true,\r\n            numargs: [2, 3],\r\n            build: function () {\r\n                return __.line;\r\n            }\r\n        },\r\n        {\r\n            name: 'sqcomp',\r\n            visible: true,\r\n            numargs: [1, 2],\r\n            build: function () {\r\n                var f = function (x, v) {\r\n                    try {\r\n                        v = v || variables(x)[0];\r\n                        var sq = __.sqComplete(x.clone(), v);\r\n                        return sq.f;\r\n                    }\r\n                    catch(e) {\r\n                        return x;\r\n                    }\r\n                };\r\n                return f;\r\n            }\r\n        }\r\n    ]);\r\n    nerdamer.updateAPI();\r\n})();","/* global module */\r\n\r\n/*\r\n * Author : Martin Donk\r\n * Website : http://www.nerdamer.com\r\n * Email : martin.r.donk@gmail.com\r\n * Source : https://github.com/jiggzson/nerdamer\r\n */\r\n\r\nif((typeof module) !== 'undefined' && typeof nerdamer === 'undefined') {\r\n    var nerdamer = require('./nerdamer.core.js');\r\n    require('./Algebra.js');\r\n}\r\n\r\n(function () {\r\n    \"use strict\";\r\n\r\n    var core = nerdamer.getCore(),\r\n            _ = core.PARSER,\r\n            Frac = core.Frac,\r\n            Settings = core.Settings,\r\n            isSymbol = core.Utils.isSymbol,\r\n            FN = core.groups.FN,\r\n            Symbol = core.Symbol,\r\n            text = core.Utils.text,\r\n            inBrackets = core.Utils.inBrackets,\r\n            isInt = core.Utils.isInt,\r\n            format = core.Utils.format,\r\n            even = core.Utils.even,\r\n            evaluate = core.Utils.evaluate,\r\n            N = core.groups.N,\r\n            S = core.groups.S,\r\n            FN = core.groups.FN,\r\n            PL = core.groups.PL,\r\n            CP = core.groups.CP,\r\n            CB = core.groups.CB,\r\n            EX = core.groups.EX,\r\n            P = core.groups.P,\r\n            LOG = Settings.LOG,\r\n            EXP = 'exp',\r\n            ABS = 'abs',\r\n            SQRT = 'sqrt',\r\n            SIN = 'sin',\r\n            COS = 'cos',\r\n            TAN = 'tan',\r\n            SEC = 'sec',\r\n            CSC = 'csc',\r\n            COT = 'cot',\r\n            ASIN = 'asin',\r\n            ACOS = 'acos',\r\n            ATAN = 'atan',\r\n            ASEC = 'asec',\r\n            ACSC = 'acsc',\r\n            ACOT = 'acot',\r\n            SINH = 'sinh',\r\n            COSH = 'cosh',\r\n            TANH = 'tanh',\r\n            CSCH = 'csch',\r\n            SECH = 'sech',\r\n            COTH = 'coth',\r\n            ASECH = 'asech',\r\n            ACSCH = 'acsch',\r\n            ACOTH = 'acoth';\r\n\r\n    //custom errors\r\n    function NoIntegralFound(msg) {\r\n        this.message = msg || \"\";\r\n    }\r\n    NoIntegralFound.prototype = new Error();\r\n\r\n    //Preparations\r\n    Symbol.prototype.hasIntegral = function () {\r\n        return this.containsFunction('integrate');\r\n    };\r\n    //transforms a function\r\n    Symbol.prototype.fnTransform = function () {\r\n        if(this.group !== FN)\r\n            return this;\r\n        var retval, a = this.args[0];\r\n        var m = new Symbol(this.multiplier);\r\n        var sym = this.clone().toUnitMultiplier();\r\n        if(this.isLinear()) {\r\n            switch(this.fname) {\r\n                case SINH:\r\n                    retval = _.parse(format('(e^({0})-e^(-({0})))/2', a));\r\n                    break;\r\n                case COSH:\r\n                    retval = _.parse(format('(e^({0})+e^(-({0})))/2', a));\r\n                    break;\r\n                case TANH:\r\n                    retval = _.parse(format('(e^({0})-e^(-({0})))/(e^({0})+e^(-({0})))', a));\r\n                    break;\r\n                case TAN:\r\n                    retval = _.parse(format('sin({0})/cos({0})', a));\r\n                    break;\r\n                case CSC:\r\n                    retval = _.parse(format('1/sin({0})', a));\r\n                    break;\r\n                case SEC:\r\n                    retval = _.parse(format('1/cos({0})', a));\r\n                    break;\r\n                default:\r\n                    retval = sym;\r\n            }\r\n        }\r\n        else if(this.power.equals(2)) {\r\n            switch(this.fname) {\r\n                case SIN:\r\n                    retval = _.parse(format('1/2-cos(2*({0}))/2', a));\r\n                    break;\r\n                case COS:\r\n                    retval = _.parse(format('1/2+cos(2*({0}))/2', a));\r\n                    break;\r\n                case TAN:\r\n                    //retval = _.parse(format('(1-cos(2*({0})))/(1+cos(2*({0})))', a));\r\n                    retval = _.parse(format('sin({0})^2/cos({0})^2', a));\r\n                    break;\r\n                case COSH:\r\n                    retval = _.parse(format('1/2+cosh(2*({0}))/2', a));\r\n                    break;\r\n                case SINH:\r\n                    retval = _.parse(format('-1/2+cosh(2*({0}))/2', a));\r\n                    break;\r\n                case TANH:\r\n                    retval = _.parse(format('(1+cosh(2*({0})))/(-1+cosh(2*({0})))', a));\r\n                    break;\r\n                case SEC:\r\n                    retval = _.parse(format('(1-cos(2*({0})))/(1+cos(2*({0})))+1', a));\r\n                    break;\r\n                default:\r\n                    retval = sym;\r\n            }\r\n        }\r\n        else if(this.fname === SEC) {\r\n            retval = _.parse(format('1/cos({0})^({1})', this.args[0], this.power));\r\n        }\r\n        else if(this.fname === CSC) {\r\n            retval = _.parse(format('1/sin({0})^({1})', this.args[0], this.power));\r\n        }\r\n        else if(this.fname === TAN) {\r\n            if(this.power.lessThan(0)) {\r\n                retval = _.parse(format('cos({0})^(-({1}))/sin({0})^({1})', this.args[0], this.power.negate()));\r\n            }\r\n            else {\r\n                retval = _.parse(format('sin({0})^({1})/cos({0})^({1})', this.args[0], this.power));\r\n            }\r\n        }\r\n        else if(this.fname === SIN && this.power.lessThan(0)) {\r\n            retval = _.parse(format('csc({0})^(-({1}))', this.args[0], this.power.negate()));\r\n        }\r\n        else if(this.fname === COS && this.power.lessThan(0)) {\r\n            retval = _.parse(format('sec({0})^(-({1}))', this.args[0], this.power.negate()));\r\n        }\r\n        else if(this.fname === SIN && this.power.equals(3)) {\r\n            retval = _.parse(format('(3*sin({0})-sin(3*({0})))/4', this.args[0]));\r\n        }\r\n        else if(this.fname === COS && this.power.equals(3)) {\r\n            retval = _.parse(format('(cos(3*({0}))+3*cos({0}))/4', this.args[0]));\r\n        }\r\n        //cos(a*x)^(2*n) or sin(a*x)^(2*n)\r\n        else if((this.fname === COS || this.fname === SIN) && even(this.power)) {\r\n            var n = this.power / 2;\r\n            //convert to a double angle\r\n            var double_angle = _.pow(this.clone().toLinear(), _.parse(2)).fnTransform();\r\n            //raise to the n and expand\r\n            var transformed = _.expand(_.pow(double_angle, _.parse(n)));\r\n\r\n            retval = new Symbol(0);\r\n\r\n            transformed.each(function (s) {\r\n                var t = s.fnTransform();\r\n                retval = _.add(retval, t);\r\n            }, true);\r\n        }\r\n        else\r\n            retval = sym;\r\n\r\n        return _.multiply(retval, m);\r\n    };\r\n\r\n    Symbol.prototype.hasTrig = function () {\r\n        if(this.isConstant(true) || this.group === S)\r\n            return false;\r\n        if(this.fname && (core.Utils.in_trig(this.fname) || core.Utils.in_inverse_trig(this.fname)))\r\n            return true;\r\n        if(this.symbols) {\r\n            for(var x in this.symbols)\r\n                if(this.symbols[x].hasTrig())\r\n                    return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    core.Expression.prototype.hasIntegral = function () {\r\n        return this.symbol.hasIntegral();\r\n    };\r\n    /**\r\n     * Attempts to rewrite a symbol under one common denominator\r\n     * @param {Symbol} symbol \r\n     */\r\n    core.Utils.toCommonDenominator = function (symbol) {\r\n        //transform x/a+x -> (ax+x)/a\r\n        if(symbol.isComposite() && symbol.isLinear()) {\r\n            var m = new Symbol(symbol.multiplier);\r\n            var denominator = new Symbol(1);\r\n            var numerator = new Symbol(0);\r\n            symbol.each(function (x) {\r\n                denominator = _.multiply(denominator, x.getDenom());\r\n            }, true);\r\n\r\n            //remove the denomitor in each term\r\n            symbol.each(function (x) {\r\n                var num = x.getNum();\r\n                var den = x.getDenom();\r\n                var factor = _.multiply(num, _.divide(denominator.clone(), den));\r\n                numerator = _.add(numerator, factor);\r\n            });\r\n            var retval = _.multiply(m, core.Algebra.divide(_.expand(numerator), _.expand(denominator)));\r\n            return retval;\r\n        }\r\n        return symbol;\r\n    };\r\n    //A function to check if a function name is an inverse trig function\r\n    core.Utils.in_inverse_trig = function (x) {\r\n        var inv_trig_fns = [ASIN, ACOS, ATAN, ACSC, ASEC, ACOT];\r\n        return inv_trig_fns.indexOf(x) !== -1;\r\n    };\r\n    //A function to check if a function name is a trig function\r\n    core.Utils.in_trig = function (x) {\r\n        var trig_fns = [COS, SIN, TAN, SEC, CSC, COT];\r\n        return trig_fns.indexOf(x) !== -1;\r\n    };\r\n\r\n    core.Utils.in_htrig = function (x) {\r\n        var trig_fns = [SINH, COSH, TANH, ACSCH, ASECH, ACOTH];\r\n        return trig_fns.indexOf(x) !== -1;\r\n    };\r\n\r\n    // Matrix functions\r\n    core.Matrix.jacobian = function (eqns, vars) {\r\n        var jacobian = new core.Matrix();\r\n        //get the variables if not supplied\r\n        if(!vars) {\r\n            vars = core.Utils.arrayGetVariables(eqns);\r\n        }\r\n\r\n        vars.forEach(function (v, i) {\r\n            eqns.forEach(function (eq, j) {\r\n                var e = core.Calculus.diff(eq.clone(), v);\r\n                jacobian.set(j, i, e);\r\n            });\r\n        });\r\n\r\n        return jacobian;\r\n    };\r\n\r\n    core.Matrix.prototype.max = function () {\r\n        var max = new Symbol(0);\r\n        this.each(function (x) {\r\n            var e = x.abs();\r\n            if(e.gt(max))\r\n                max = e;\r\n        });\r\n        return max;\r\n    };\r\n\r\n    core.Matrix.cMatrix = function (value, vars) {\r\n        var m = new core.Matrix();\r\n        //make an initial guess\r\n        vars.forEach(function (v, i) {\r\n            m.set(i, 0, _.parse(value));\r\n        });\r\n        return m;\r\n    };\r\n\r\n    var all_functions = core.Utils.all_functions = function (arr) {\r\n        for(var i = 0, l = arr.length; i < l; i++)\r\n            if(arr[i].group !== FN)\r\n                return false;\r\n        return true;\r\n    },\r\n            cosAsinBtransform = core.Utils.cosAsinBtranform = function (symbol1, symbol2) {\r\n                var a, b;\r\n                a = symbol1.args[0];\r\n                b = symbol2.args[0];\r\n                return _.parse(format('(sin(({0})+({1}))-sin(({0})-({1})))/2', a, b));\r\n            },\r\n            cosAsinAtransform = core.Utils.cosAsinAtranform = function (symbol1, symbol2) {\r\n                //TODO: temporary fix for integrate(e^x*sin(x)*cos(x)^2).\r\n                //we technically know how to do this transform but more is needed for correct output\r\n                if(Number(symbol2.power) !== 1)\r\n                    return _.multiply(symbol1, symbol2);\r\n                var a;\r\n                a = symbol1.args[0];\r\n                return _.parse(format('(sin(2*({0})))/2', a));\r\n            },\r\n            sinAsinBtransform = core.Utils.cosAsinBtranform = function (symbol1, symbol2) {\r\n                var a, b;\r\n                a = symbol1.args[0];\r\n                b = symbol2.args[0];\r\n                return _.parse(format('(cos(({0})+({1}))-cos(({0})-({1})))/2', a, b));\r\n            },\r\n            trigTransform = core.Utils.trigTransform = function (arr) {\r\n                var map = {}, symbol, t,\r\n                        retval = new Symbol(1);\r\n                for(var i = 0, l = arr.length; i < l; i++) {\r\n                    symbol = arr[i];\r\n\r\n                    if(symbol.group === FN) {\r\n                        var fname = symbol.fname;\r\n\r\n                        if(fname === COS && map[SIN]) {\r\n\r\n                            if(map[SIN].args[0].toString() !== symbol.args[0].toString()) {\r\n                                t = cosAsinBtransform(symbol, map[SIN]);\r\n                            }\r\n                            else {\r\n                                t = cosAsinAtransform(symbol, map[SIN]);\r\n                            }\r\n                            delete map[SIN];\r\n\r\n                            retval = _.multiply(retval, t);\r\n                        }\r\n                        else if(fname === SIN && map[COS]) {\r\n                            if(map[COS].args[0].toString() !== symbol.args[0].toString()) {\r\n                                t = cosAsinBtransform(symbol, map[COS]);\r\n                            }\r\n                            else {\r\n                                t = cosAsinAtransform(symbol, map[COS]);\r\n                            }\r\n                            delete map[COS];\r\n\r\n                            retval = _.multiply(retval, t);\r\n                        }\r\n                        else if(fname === SIN && map[SIN]) {\r\n                            if(map[SIN].args[0].toString() !== symbol.args[0].toString()) {\r\n                                t = sinAsinBtransform(symbol, map[SIN]);\r\n                                delete map[SIN];\r\n                            }\r\n                            else {\r\n                                //This should actually be redundant code but let's put just in case\r\n                                t = _.multiply(symbol, map[SIN]);\r\n                                delete map[SIN];\r\n                            }\r\n\r\n                            retval = t;\r\n                        }\r\n                        else {\r\n                            map[fname] = symbol;\r\n                        }\r\n                    }\r\n                    else\r\n                        retval = _.multiply(retval, symbol);\r\n                }\r\n\r\n                //put back the remaining functions\r\n                for(var x in map)\r\n                    retval = _.multiply(retval, map[x]);\r\n\r\n                return retval;\r\n\r\n            };\r\n\r\n    core.Settings.integration_depth = 10;\r\n\r\n    core.Settings.max_lim_depth = 10;\r\n\r\n    var __ = core.Calculus = {\r\n\r\n        version: '1.4.6',\r\n\r\n        sum: function (fn, index, start, end) {\r\n            if(!(index.group === core.groups.S))\r\n                throw new core.exceptions.NerdamerTypeError('Index must be symbol. ' + text(index) + ' provided');\r\n            index = index.value;\r\n            var retval;\r\n            if(core.Utils.isNumericSymbol(start) && core.Utils.isNumericSymbol(end)) {\r\n                var modifier = end - start < 200 ? '' : 'PARSE2NUMBER';\r\n                start = Number(start);\r\n                end = Number(end);\r\n                retval = core.Utils.block(modifier, function () {\r\n                    var f = fn.text(),\r\n                            subs = {'~': true}, //lock subs. Is this even being used?\r\n                            retval = new core.Symbol(0);\r\n\r\n                    for(var i = start; i <= end; i++) {\r\n                        subs[index] = new Symbol(i);\r\n                        var ans = _.parse(f, subs);\r\n                        retval = _.add(retval, ans);\r\n                    }\r\n                    return retval;\r\n                });\r\n            }\r\n            else {\r\n                retval = _.symfunction('sum', arguments);\r\n            }\r\n\r\n            return retval;\r\n        },\r\n        product: function (fn, index, start, end) {\r\n            if(!(index.group === core.groups.S))\r\n                throw new core.exceptions.NerdamerTypeError('Index must be symbol. ' + text(index) + ' provided');\r\n            index = index.value;\r\n            var retval;\r\n            if(core.Utils.isNumericSymbol(start) && core.Utils.isNumericSymbol(end)) {\r\n                var modifier = end - start < 200 ? '' : 'PARSE2NUMBER';\r\n                retval = core.Utils.block(modifier, function () {\r\n                    start = Number(start);\r\n                    end = Number(end.multiplier);\r\n\r\n                    var f = fn.text(),\r\n                            subs = {},\r\n                            retval = new core.Symbol(1);\r\n\r\n                    for(var i = start; i <= end; i++) {\r\n                        subs[index] = new Symbol(i);\r\n                        retval = _.multiply(retval, _.parse(f, subs));\r\n                    }\r\n                    return retval;\r\n                });\r\n            }\r\n            else {\r\n                retval = _.symfunction('product', arguments);\r\n            }\r\n\r\n            return retval;\r\n        },\r\n        diff: function (symbol, wrt, nth) {\r\n            if(core.Utils.isVector(symbol)) {\r\n                var vector = new core.Vector([]);\r\n                symbol.each(function (x) {\r\n                    vector.elements.push(__.diff(x, wrt, nth));\r\n                });\r\n                return vector;\r\n            }\r\n            else if(core.Utils.isMatrix(symbol)) {\r\n                var matrix = new core.Matrix();\r\n                symbol.each(function (x, i, j) {\r\n                    matrix.set(i, j, __.diff(x, wrt, nth));\r\n                });\r\n                return matrix;\r\n            }\r\n\r\n            var d = isSymbol(wrt) ? wrt.text() : wrt;\r\n            //the nth derivative\r\n            nth = isSymbol(nth) ? nth.multiplier : nth || 1;\r\n\r\n            if(d === undefined)\r\n                d = core.Utils.variables(symbol)[0];\r\n\r\n            //unwrap sqrt\r\n            if(symbol.group === FN && symbol.fname === SQRT) {\r\n                var s = symbol.args[0],\r\n                        sp = symbol.power.clone();\r\n                //these groups go to zero anyway so why waste time?\r\n                if(s.group !== N || s.group !== P) {\r\n                    s.power = isSymbol(s.power) ? _.multiply(s.power, _.multiply(new Symbol(1 / 2)), sp) : s.power.multiply(new Frac(0.5)).multiply(sp);\r\n                    s.multiplier = s.multiplier.multiply(symbol.multiplier);\r\n                }\r\n\r\n                symbol = s;\r\n            }\r\n\r\n            if(symbol.group === FN && !isSymbol(symbol.power)) {\r\n                var a = derive(_.parse(symbol));\r\n                var b = __.diff(symbol.args[0].clone(), d);\r\n                symbol = _.multiply(a, b);//chain rule\r\n            }\r\n            else {\r\n                symbol = derive(symbol);\r\n            }\r\n\r\n            if(nth > 1) {\r\n                nth--;\r\n                symbol = __.diff(symbol, wrt, nth);\r\n            }\r\n\r\n            return symbol;\r\n\r\n            // Equivalent to \"derivative of the outside\".\r\n            function polydiff(symbol) {\r\n                if(symbol.value === d || symbol.contains(d, true)) {\r\n                    symbol.multiplier = symbol.multiplier.multiply(symbol.power);\r\n                    symbol.power = symbol.power.subtract(new Frac(1));\r\n                    if(symbol.power.equals(0)) {\r\n                        symbol = Symbol(symbol.multiplier);\r\n                    }\r\n                }\r\n\r\n                return symbol;\r\n            }\r\n            \r\n            function derive(symbol) {\r\n                var g = symbol.group, a, b, cp;\r\n\r\n                if(g === N || g === S && symbol.value !== d || g === P) {\r\n                    symbol = Symbol(0);\r\n                }\r\n                else if(g === S) {\r\n                    symbol = polydiff(symbol);\r\n                }\r\n                else if(g === CB) {\r\n                    var m = symbol.multiplier.clone();\r\n                    symbol.toUnitMultiplier();\r\n                    var retval = _.multiply(product_rule(symbol), polydiff(symbol));\r\n                    retval.multiplier = retval.multiplier.multiply(m);\r\n                    return retval;\r\n                }\r\n                else if(g === FN && symbol.power.equals(1)) {\r\n                    // Table of known derivatives\r\n                    switch(symbol.fname) {\r\n                        case LOG:\r\n                            cp = symbol.clone();\r\n                            symbol = symbol.args[0].clone();//get the arguments\r\n                            symbol.power = symbol.power.negate();\r\n                            symbol.multiplier = cp.multiplier.divide(symbol.multiplier);\r\n                            break;\r\n                        case COS:\r\n                            //cos -> -sin\r\n                            symbol.fname = SIN;\r\n                            symbol.multiplier.negate();\r\n                            break;\r\n                        case SIN:\r\n                            //sin -> cos\r\n                            symbol.fname = COS;\r\n                            break;\r\n                        case TAN:\r\n                            //tan -> sec^2\r\n                            symbol.fname = SEC;\r\n                            symbol.power = new Frac(2);\r\n                            break;\r\n                        case SEC:\r\n                            // Use a clone if this gives errors\r\n                            symbol = qdiff(symbol, TAN);\r\n                            break;\r\n                        case CSC:\r\n                            symbol = qdiff(symbol, '-cot');\r\n                            break;\r\n                        case COT:\r\n                            symbol.fname = CSC;\r\n                            symbol.multiplier.negate();\r\n                            symbol.power = new Frac(2);\r\n                            break;\r\n                        case ASIN:\r\n                            symbol = _.parse('(sqrt(1-(' + text(symbol.args[0]) + ')^2))^(-1)');\r\n                            break;\r\n                        case ACOS:\r\n                            symbol = _.parse('-(sqrt(1-(' + text(symbol.args[0]) + ')^2))^(-1)');\r\n                            break;\r\n                        case ATAN:\r\n                            symbol = _.parse('(1+(' + text(symbol.args[0]) + ')^2)^(-1)');\r\n                            break;\r\n                        case ABS:\r\n                            m = symbol.multiplier.clone();\r\n                            symbol.toUnitMultiplier();\r\n                            //depending on the complexity of the symbol it's easier to just parse it into a new symbol\r\n                            //this should really be readdressed soon\r\n                            b = symbol.args[0].clone();\r\n                            b.toUnitMultiplier();\r\n                            symbol = _.parse(inBrackets(text(symbol.args[0])) + '/abs' + inBrackets(text(b)));\r\n                            symbol.multiplier = m;\r\n                            break;\r\n                        case 'parens':\r\n                            //see product rule: f'.g goes to zero since f' will return zero. This way we only get back\r\n                            //1*g'\r\n                            symbol = Symbol(1);\r\n                            break;\r\n                        case 'cosh':\r\n                            //cosh -> -sinh\r\n                            symbol.fname = 'sinh';\r\n                            break;\r\n                        case 'sinh':\r\n                            //sinh -> cosh\r\n                            symbol.fname = 'cosh';\r\n                            break;\r\n                        case TANH:\r\n                            //tanh -> sech^2\r\n                            symbol.fname = SECH;\r\n                            symbol.power = new Frac(2);\r\n                            break;\r\n                        case SECH:\r\n                            // Use a clone if this gives errors\r\n                            symbol = qdiff(symbol, '-tanh');\r\n                            break;\r\n                        case CSCH:\r\n                            var arg = String(symbol.args[0]);\r\n                            return _.parse('-coth(' + arg + ')*csch(' + arg + ')');\r\n                            break;\r\n                        case COTH:\r\n                            var arg = String(symbol.args[0]);\r\n                            return _.parse('-csch(' + arg + ')^2');\r\n                            break;\r\n                        case 'asinh':\r\n                            symbol = _.parse('(sqrt(1+(' + text(symbol.args[0]) + ')^2))^(-1)');\r\n                            break;\r\n                        case 'acosh':\r\n                            symbol = _.parse('(sqrt(-1+(' + text(symbol.args[0]) + ')^2))^(-1)');\r\n                            break;\r\n                        case 'atanh':\r\n                            symbol = _.parse('(1-(' + text(symbol.args[0]) + ')^2)^(-1)');\r\n                            break;\r\n                        case ASECH:\r\n                            var arg = String(symbol.args[0]);\r\n                            symbol = _.parse('-1/(sqrt(1/(' + arg + ')^2-1)*(' + arg + ')^2)');\r\n                            break;\r\n                        case ACOTH:\r\n                            symbol = _.parse('-1/((' + symbol.args[0] + ')^2-1)');\r\n                            break;\r\n                        case ACSCH:\r\n                            var arg = String(symbol.args[0]);\r\n                            symbol = _.parse('-1/(sqrt(1/(' + arg + ')^2+1)*(' + arg + ')^2)');\r\n                            break;\r\n                        case ASEC:\r\n                            var arg = String(symbol.args[0]);\r\n                            symbol = _.parse('1/(sqrt(1-1/(' + arg + ')^2)*(' + arg + ')^2)');\r\n                            break;\r\n                        case ACSC:\r\n                            var arg = String(symbol.args[0]);\r\n                            symbol = _.parse('-1/(sqrt(1-1/(' + arg + ')^2)*(' + arg + ')^2)');\r\n                            break;\r\n                        case ACOT:\r\n                            symbol = _.parse('-1/((' + symbol.args[0] + ')^2+1)');\r\n                            break;\r\n                        case 'S':\r\n                            var arg = String(symbol.args[0]);\r\n                            symbol = _.parse('sin((pi*(' + arg + ')^2)/2)');\r\n                            break;\r\n                        case 'C':\r\n                            var arg = String(symbol.args[0]);\r\n                            symbol = _.parse('cos((pi*(' + arg + ')^2)/2)');\r\n                            break;\r\n                        case 'Si':\r\n                            var arg = symbol.args[0];\r\n                            symbol = _.parse('sin(' + arg + ')/(' + arg + ')');\r\n                            break;\r\n                        case 'Shi':\r\n                            var arg = symbol.args[0];\r\n                            symbol = _.parse('sinh(' + arg + ')/(' + arg + ')');\r\n                            break;\r\n                        case 'Ci':\r\n                            var arg = symbol.args[0];\r\n                            symbol = _.parse('cos(' + arg + ')/(' + arg + ')');\r\n                            break;\r\n                        case 'Chi':\r\n                            var arg = symbol.args[0];\r\n                            symbol = _.parse('cosh(' + arg + ')/(' + arg + ')');\r\n                            break;\r\n                        case 'Ei':\r\n                            var arg = symbol.args[0];\r\n                            symbol = _.parse('e^(' + arg + ')/(' + arg + ')');\r\n                            break;\r\n                        case 'Li':\r\n                            var arg = symbol.args[0];\r\n                            symbol = _.parse('1/' + Settings.LOG + '(' + arg + ')');\r\n                            break;\r\n                        case 'erf':\r\n                            symbol = _.parse('(2*e^(-(' + symbol.args[0] + ')^2))/sqrt(pi)');\r\n                            break;\r\n                        case 'atan2':\r\n                            var x_ = String(symbol.args[0]),\r\n                                    y_ = String(symbol.args[1]);\r\n                            symbol = _.parse('(' + y_ + ')/((' + y_ + ')^2+(' + x_ + ')^2)');\r\n                            break;\r\n                        case 'sign':\r\n                            symbol = new Symbol(0);\r\n                            break;\r\n                        case 'sinc':\r\n                            symbol = _.parse(format('(({0})*cos({0})-sin({0}))*({0})^(-2)', symbol.args[0]));\r\n                            break;\r\n                        case Settings.LOG10:\r\n                            symbol = _.parse('1/((' + symbol.args[0] + ')*' + Settings.LOG + '(10))');\r\n                            break;\r\n                        default:\r\n                            symbol = _.symfunction('diff', [symbol, wrt]);\r\n                    }\r\n                }\r\n                else if(g === EX || g === FN && isSymbol(symbol.power)) {\r\n                    var value;\r\n                    if(g === EX) {\r\n                        value = symbol.value;\r\n                    }\r\n                    else if(g === FN && symbol.contains(d)) {\r\n                        value = symbol.fname + inBrackets(text(symbol.args[0]));\r\n                    }\r\n                    else {\r\n                        value = symbol.value + inBrackets(text(symbol.args[0]));\r\n                    }\r\n                    a = _.multiply(_.parse(LOG + inBrackets(value)), symbol.power.clone());\r\n                    b = __.diff(_.multiply(_.parse(LOG + inBrackets(value)), symbol.power.clone()), d);\r\n                    symbol = _.multiply(symbol, b);\r\n                }\r\n                else if(g === FN && !symbol.power.equals(1)) {\r\n                    b = symbol.clone();\r\n                    b.toLinear();\r\n                    b.toUnitMultiplier();\r\n                    symbol = _.multiply(polydiff(symbol.clone()), derive(b));\r\n                }\r\n                else if(g === CP || g === PL) {\r\n                    // Note: Do not use `parse` since this puts back the sqrt and causes a bug as in #610. Use clone.\r\n                    var c = symbol.clone();\r\n                    var result = new Symbol(0);\r\n                    for(var x in symbol.symbols) {\r\n                        result = _.add(result, __.diff(symbol.symbols[x].clone(), d));\r\n                    }\r\n                    symbol = _.multiply(polydiff(c), result);\r\n                }\r\n\r\n                symbol.updateHash();\r\n\r\n                return symbol;\r\n            }\r\n            ;\r\n\r\n            function qdiff(symbol, val, altVal) {\r\n                return _.multiply(symbol, _.parse(val + inBrackets(altVal || text(symbol.args[0]))));\r\n            }\r\n            ;\r\n\r\n            function product_rule(symbol) {\r\n                //grab all the symbols within the CB symbol\r\n                var symbols = symbol.collectSymbols(),\r\n                        result = new Symbol(0),\r\n                        l = symbols.length;\r\n                //loop over all the symbols\r\n                for(var i = 0; i < l; i++) {\r\n                    var df = __.diff(symbols[i].clone(), d);\r\n                    for(var j = 0; j < l; j++) {\r\n                        //skip the symbol of which we just pulled the derivative\r\n                        if(i !== j) {\r\n                            //multiply out the remaining symbols\r\n                            df = _.multiply(df, symbols[j].clone());\r\n                        }\r\n                    }\r\n                    //add the derivative to the result\r\n                    result = _.add(result, df);\r\n                }\r\n                return result; //done\r\n            }\r\n            ;\r\n        },\r\n        integration: {\r\n            u_substitution: function (symbols, dx) {\r\n                function try_combo(a, b, f) {\r\n                    var d = __.diff(b, dx);\r\n                    var q = f ? f(a, b) : _.divide(a.clone(), d);\r\n                    if(!q.contains(dx, true))\r\n                        return q;\r\n                    return null;\r\n                }\r\n                function do_fn_sub(fname, arg) {\r\n                    var subbed = __.integrate(_.symfunction(fname, [new Symbol(u)]), u, 0);\r\n                    subbed = subbed.sub(new Symbol(u), arg);\r\n                    subbed.updateHash();\r\n                    return subbed;\r\n                }\r\n\r\n                var a = symbols[0].clone(),\r\n                        b = symbols[1].clone(),\r\n                        g1 = a.group,\r\n                        g2 = b.group,\r\n                        //may cause problems if person is using this already. Will need\r\n                        //to find algorithm for detecting conflict\r\n                        u = '__u__',\r\n                        Q;\r\n                if(g1 === FN && g2 !== FN) {\r\n                    //e.g. 2*x*cos(x^2)\r\n                    var arg = a.args[0];\r\n                    Q = try_combo(b, arg.clone());\r\n                    if(Q)\r\n                        return _.multiply(Q, do_fn_sub(a.fname, arg));\r\n                    Q = try_combo(b, a);\r\n                    if(Q) {\r\n                        return __.integration.poly_integrate(a);\r\n                    }\r\n                }\r\n                else if(g2 === FN && g1 !== FN) {\r\n                    //e.g. 2*(x+1)*cos((x+1)^2\r\n                    var arg = b.args[0];\r\n                    Q = try_combo(a, arg.clone());\r\n                    if(Q)\r\n                        return _.multiply(Q, do_fn_sub(b.fname, arg));\r\n                }\r\n                else if(g1 === FN && g2 === FN) {\r\n                    Q = try_combo(a.clone(), b.clone());\r\n                    if(Q)\r\n                        return _.multiply(__.integration.poly_integrate(b), Q);\r\n                    Q = try_combo(b.clone(), a.clone());\r\n                    if(Q)\r\n                        return _.multiply(__.integration.poly_integrate(b), Q);\r\n                }\r\n                else if(g1 === EX && g2 !== EX) {\r\n                    var p = a.power;\r\n                    Q = try_combo(b, p.clone());\r\n                    if(!Q) {\r\n                        //one more try\r\n                        var dc = __.integration.decompose_arg(p.clone(), dx);\r\n                        //consider the possibility of a^x^(n-1)*x^n dx\r\n                        var xp = __.diff(dc[2].clone(), dx);\r\n                        var dc2 = __.integration.decompose_arg(xp.clone(), dx);\r\n                        //if their powers equal, so if dx*p == b\r\n                        if(_.multiply(dc[1], dc2[1]).power.equals(b.power)) {\r\n                            var m = _.divide(dc[0].clone(), dc2[0].clone());\r\n\r\n                            var new_val = _.multiply(m.clone(), _.pow(new Symbol(a.value), _.multiply(dc[0], new Symbol(u))));\r\n                            new_val = _.multiply(new_val, new Symbol(u));\r\n                            return __.integration.by_parts(new_val, u, 0, {}).sub(u, dc[1].clone());\r\n                        }\r\n\r\n                    }\r\n                    var integrated = __.integrate(a.sub(p.clone(), new Symbol(u)), u, 0),\r\n                            retval = _.multiply(integrated.sub(new Symbol(u), p), Q);\r\n\r\n\r\n                    return retval;\r\n                }\r\n                else if(g2 === EX && g1 !== EX) {\r\n                    var p = b.power;\r\n                    Q = try_combo(a, p.clone());\r\n                    var integrated = __.integrate(b.sub(p, new Symbol(u)), u, 0);\r\n                    return _.multiply(integrated.sub(new Symbol(u), p), Q);\r\n                }\r\n                else if(a.isComposite() || b.isComposite()) {\r\n                    var f = function (a, b) {\r\n                        var d = __.diff(b, dx);\r\n                        var A = core.Algebra.Factor.factor(a),\r\n                                B = core.Algebra.Factor.factor(d);\r\n                        var q = _.divide(A, B);\r\n                        return q;\r\n                    };\r\n                    var f1 = a.isComposite() ? a.clone().toLinear() : a.clone(),\r\n                            f2 = b.isComposite() ? b.clone().toLinear() : b.clone();\r\n                    Q = try_combo(f1.clone(), f2.clone(), f);\r\n                    if(Q)\r\n                        return _.multiply(__.integration.poly_integrate(b), Q);\r\n                    Q = try_combo(f2.clone(), f1.clone(), f);\r\n                    if(Q)\r\n                        return _.multiply(__.integration.poly_integrate(a), Q);\r\n                }\r\n            },\r\n            //simple integration of a single polynomial x^(n+1)/(n+1)\r\n            poly_integrate: function (x) {\r\n                var p = x.power.toString(),\r\n                        m = x.multiplier.toDecimal(),\r\n                        s = x.toUnitMultiplier().toLinear();\r\n                if(Number(p) === -1) {\r\n                    return _.multiply(new Symbol(m), _.symfunction(LOG, [s]));\r\n                }\r\n                return _.parse(format('({0})*({1})^(({2})+1)/(({2})+1)', m, s, p));\r\n            },\r\n            //If we're just spinning wheels we want to stop. This is why we \r\n            //wrap integration in a try catch block and call this to stop.\r\n            stop: function (msg) {\r\n                msg = msg || 'Unable to compute integral!';\r\n                core.Utils.warn(msg);\r\n                throw new NoIntegralFound(msg);\r\n            },\r\n            partial_fraction: function (input, dx, depth, opt) {\r\n                //TODO: This whole thing needs to be rolled into one but for now I'll leave it as two separate parts\r\n                if(!isSymbol(dx))\r\n                    dx = _.parse(dx);\r\n\r\n                var result, partial_fractions;\r\n                result = new Symbol(0);\r\n                partial_fractions = core.Algebra.PartFrac.partfrac(input, dx);\r\n\r\n                if(partial_fractions.group === CB && partial_fractions.isLinear()) {\r\n                    //perform a quick check to make sure that all partial fractions are linear\r\n                    partial_fractions.each(function (x) {\r\n                        if(!x.isLinear())\r\n                            __.integration.stop();\r\n                    });\r\n                    partial_fractions.each(function (x) {\r\n                        result = _.add(result, __.integrate(x, dx, depth, opt));\r\n                    });\r\n                }\r\n                else {\r\n                    result = _.add(result, __.integrate(partial_fractions, dx, depth, opt));\r\n                }\r\n                return result;\r\n            },\r\n            get_udv: function (symbol) {\r\n                var parts = [[/*L*/], [/*I*/], [/*A*/], [/*T*/], [/*E*/]];\r\n                //first we sort them \r\n                var setSymbol = function (x) {\r\n                    var g = x.group;\r\n                    if(g === FN) {\r\n                        var fname = x.fname;\r\n                        if(core.Utils.in_trig(fname) || core.Utils.in_htrig(fname))\r\n                            parts[3].push(x);\r\n                        else if(core.Utils.in_inverse_trig(fname))\r\n                            parts[1].push(x);\r\n                        else if(fname === LOG)\r\n                            parts[0].push(x);\r\n                        else {\r\n                            __.integration.stop();\r\n                        }\r\n                    }\r\n                    else if(g === S || x.isComposite() && x.isLinear() || g === CB && x.isLinear()) {\r\n                        parts[2].push(x);\r\n                    }\r\n                    else if(g === EX || x.isComposite() && !x.isLinear())\r\n                        parts[4].push(x);\r\n                    else\r\n                        __.integration.stop();\r\n                };\r\n\r\n                if(symbol.group === CB)\r\n                    symbol.each(function (x) {\r\n                        setSymbol(Symbol.unwrapSQRT(x, true));\r\n                    });\r\n                else\r\n                    setSymbol(symbol);\r\n                var u, dv = new Symbol(1);\r\n                //compile u and dv\r\n                for(var i = 0; i < 5; i++) {\r\n                    var part = parts[i], t,\r\n                            l = part.length;\r\n                    if(l > 0) {\r\n                        if(l > 1) {\r\n                            t = new Symbol(1);\r\n                            for(var j = 0; j < l; j++)\r\n                                t = _.multiply(t, part[j].clone());\r\n                        }\r\n                        else\r\n                            t = part[0].clone();\r\n\r\n                        if(!u) {\r\n                            u = t;//the first u encountered gets chosen\r\n                            u.multiplier = u.multiplier.multiply(symbol.multiplier); //the first one gets the mutliplier\r\n                        }\r\n                        else\r\n                            dv = _.multiply(dv, t); //everything else belongs to dv\r\n                    }\r\n                }\r\n\r\n                return [u, dv];\r\n            },\r\n\r\n            trig_sub: function (symbol, dx, depth, opt, parts, symbols) {\r\n                parts = parts || __.integration.decompose_arg(symbol.clone().toLinear(), dx);\r\n                var b = parts[3],\r\n                        ax = parts[2],\r\n                        a = parts[0],\r\n                        x = parts[1];\r\n                if(x.power.equals(2) && a.greaterThan(0)) {\r\n                    //use tan(x)\r\n                    var t = core.Utils.getU(symbol), //get an appropriate u\r\n                            u = _.parse(TAN + inBrackets(t)), //u\r\n                            du = _.parse(SEC + inBrackets(t) + '^2'), //du\r\n                            f = _.multiply(symbol.sub(x, u), du);\r\n                    var integral = __.integrate(f, t, depth, opt).sub(u, x);\r\n                    core.Utils.clearU(u);\r\n                    return integral;\r\n                }\r\n            },\r\n\r\n            by_parts: function (symbol, dx, depth, o) {\r\n                o.previous = o.previous || [];\r\n                var udv, u, dv, du, v, vdu, uv, retval, integral_vdu, m, c, vdu_s;\r\n                //first LIATE\r\n                udv = __.integration.get_udv(symbol);\r\n                u = udv[0];\r\n                dv = udv[1];\r\n                du = Symbol.unwrapSQRT(_.expand(__.diff(u.clone(), dx)), true);\r\n                c = du.clone().stripVar(dx);\r\n                //strip any coefficients\r\n                du = _.divide(du, c.clone());\r\n                v = __.integrate(dv.clone(), dx, depth || 0);\r\n                vdu = _.multiply(v.clone(), du);\r\n                vdu_s = vdu.toString();\r\n                //currently only supports e^x*(some trig)\r\n                if(o.previous.indexOf(vdu_s) !== -1 && (core.Utils.in_trig(u.fname)) && dv.isE()) {\r\n                    //We're going to exploit the fact that vdu can never be constant\r\n                    //to work out way out of this cycle. We'll return the length of\r\n                    //the this.previous array until we're back at level one\r\n                    o.is_cyclic = true;\r\n                    //return the integral. \r\n                    return new Symbol(1);\r\n                }\r\n                else\r\n                    o.previous.push(vdu_s);\r\n\r\n                uv = _.multiply(u, v);\r\n                //clear the multiplier so we're dealing with a bare integral\r\n                m = vdu.multiplier.clone();\r\n                vdu.toUnitMultiplier();\r\n                integral_vdu = _.multiply(__.integrate(vdu.clone(), dx, depth, o), c);\r\n                integral_vdu.multiplier = integral_vdu.multiplier.multiply(m);\r\n                retval = _.subtract(uv, integral_vdu);\r\n                //we know that there cannot be constants so they're a holdover from a cyclic integral\r\n                if(o.is_cyclic) {\r\n                    //start popping the previous stack so we know how deep in we are\r\n                    o.previous.pop();\r\n                    if(o.previous.length === 0) {\r\n                        retval = _.expand(retval);\r\n                        var rem = new Symbol(0);\r\n                        retval.each(function (x) {\r\n                            if(!x.contains(dx))\r\n                                rem = _.add(rem, x.clone());\r\n                        });\r\n                        //get the actual uv\r\n                        retval = _.divide(_.subtract(retval, rem.clone()), _.subtract(new Symbol(1), rem));\r\n                    }\r\n                }\r\n\r\n                return retval;\r\n            },\r\n            /*\r\n             * dependents: [Solve, integrate]\r\n             */\r\n            decompose_arg: core.Utils.decompose_fn\r\n        },\r\n        //TODO: nerdamer.integrate('-e^(-a*t)*sin(t)', 't') -> gives incorrect output\r\n        integrate: function (original_symbol, dt, depth, opt) {\r\n            //assume integration wrt independent variable if expression only has one variable\r\n            if(!dt) {\r\n                var vars = core.Utils.variables(original_symbol);\r\n                if(vars.length === 1)\r\n                    dt = vars[0];\r\n                //defaults to x\r\n                dt = dt || 'x';\r\n            }\r\n            //add support for integrating vectors\r\n            if(core.Utils.isVector(original_symbol)) {\r\n                var vector = new core.Vector([]);\r\n                original_symbol.each(function (x) {\r\n                    vector.elements.push(__.integrate(x, dt));\r\n                });\r\n                return vector;\r\n            }\r\n            if(!isNaN(dt))\r\n                _.error('variable expected but received ' + dt);\r\n            //get rid of constants right away\r\n            if(original_symbol.isConstant(true))\r\n                return _.multiply(original_symbol.clone(), _.parse(dt));\r\n\r\n            //configurations options for integral. This is needed for tracking extra options\r\n            //e.g. cyclic integrals or additional settings\r\n            opt = opt || {};\r\n            return core.Utils.block('PARSE2NUMBER', function () {\r\n                //make a note of the original symbol. Set only if undefined\r\n                depth = depth || 0;\r\n                var dx = isSymbol(dt) ? dt.toString() : dt,\r\n                        //we don't want the symbol in sqrt form. x^(1/2) is prefererred\r\n                        symbol = Symbol.unwrapSQRT(original_symbol.clone(), true),\r\n                        g = symbol.group,\r\n                        retval;\r\n\r\n                try {\r\n                    //We stop integration after x amount of recursive calls\r\n                    if(++depth > core.Settings.integration_depth)\r\n                        __.integration.stop('Maximum depth reached. Exiting!');\r\n\r\n                    //constants. We first eliminate anything that doesn't have dx. Everything after this has \r\n                    //to have dx or else it would have been taken care of below\r\n                    if(!symbol.contains(dx, true)) {\r\n                        retval = _.multiply(symbol.clone(), _.parse(dx));\r\n                    }\r\n                    //e.g. 2*x\r\n                    else if(g === S) {\r\n                        retval = __.integration.poly_integrate(symbol, dx, depth);\r\n                    }\r\n                    else if(g === EX) {\r\n                        if(symbol.previousGroup === FN && !(symbol.fname === 'sqrt' || symbol.fname === Settings.PARENTHESIS))\r\n                            __.integration.stop();\r\n                        //check the base\r\n                        if(symbol.contains(dx) && symbol.previousGroup !== FN) {\r\n                            //if the symbol also contains dx then we stop since we currently \r\n                            //don't know what to do with it e.g. x^x\r\n                            if(symbol.power.contains(dx))\r\n                                __.integration.stop();\r\n                            else {\r\n                                var t = __.diff(symbol.clone().toLinear(), dx);\r\n                                if(t.contains(dx))\r\n                                    __.integration.stop();\r\n                                //since at this point it's the base only then we do standard single poly integration\r\n                                //e.g. x^y\r\n                                retval = __.integration.poly_integrate(symbol, dx, depth);\r\n                            }\r\n                        }\r\n                        //e.g. a^x or 9^x\r\n                        else {\r\n                            var a = __.diff(symbol.power.clone(), dx);\r\n                            if(a.contains(dx)) {\r\n                                var aa = a.stripVar(dx),\r\n                                        x = _.divide(a.clone(), aa.clone());\r\n                                if(x.group === S && x.isLinear()) {\r\n                                    aa.multiplier = aa.multiplier.divide(new Frac(2));\r\n                                    return _.parse(format('({2})*(sqrt(pi)*erf(sqrt(-{0})*{1}))/(2*sqrt(-{0}))', aa, dx, symbol.multiplier));\r\n                                }\r\n                                else\r\n                                    __.integration.stop();\r\n                            }\r\n                            if(symbol.isE()) {\r\n                                if(a.isLinear())\r\n                                    retval = symbol;\r\n                                else {\r\n                                    if(a.isE() && a.power.group === S && a.power.power.equals(1))\r\n                                        retval = _.multiply(_.symfunction('Ei', [symbol.power.clone()]), symbol.power);\r\n                                    else\r\n                                        __.integration.stop();\r\n                                }\r\n                            }\r\n                            else {\r\n                                var d = _.symfunction(LOG, [_.parse(symbol.value)]);\r\n                                retval = _.divide(symbol, d);\r\n                            }\r\n                            retval = _.divide(retval, a);\r\n                        }\r\n                    }\r\n                    else if(symbol.isComposite() && symbol.isLinear()) {\r\n                        var m = _.parse(symbol.multiplier);\r\n                        symbol.toUnitMultiplier();\r\n                        retval = new Symbol(0);\r\n                        symbol.each(function (x) {\r\n                            retval = _.add(retval, __.integrate(x, dx, depth));\r\n                        });\r\n                        retval = _.multiply(m, retval);\r\n                    }\r\n                    else if(g === CP) {\r\n                        if(symbol.power.greaterThan(1))\r\n                            symbol = _.expand(symbol);\r\n                        if(symbol.power.equals(1)) {\r\n                            retval = new Symbol(0);\r\n                            symbol.each(function (x) {\r\n                                retval = _.add(retval, __.integrate(x, dx, depth));\r\n                            }, true);\r\n                        }\r\n                        else {\r\n                            var p = Number(symbol.power),\r\n                                    m = symbol.multiplier.clone();//temporarily remove the multiplier\r\n                            symbol.toUnitMultiplier();\r\n                            var //below we consider the form ax+b\r\n                                    fn = symbol.clone().toLinear(), //get just the pure function without the power\r\n                                    decomp = __.integration.decompose_arg(fn, dx),\r\n                                    //I have no idea why I used bx+a and not ax+b. TODO change this to something that makes sense\r\n                                    b = decomp[3],\r\n                                    ax = decomp[2],\r\n                                    a = decomp[0],\r\n                                    x = decomp[1];\r\n                            if(p === -1 && x.group !== PL && x.power.equals(2)) {\r\n                                var b_is_positive = isInt(b) ? b > 0 : true;\r\n                                //we can now check for atan\r\n                                if(x.group === S && x.power.equals(2) && b_is_positive) {\r\n                                    ////then we have atan\r\n                                    //abs is redundants since the sign appears in both denom and num.\r\n                                    var unwrapAbs = function (s) {\r\n                                        var result = new Symbol(1);\r\n                                        s.each(function (x) {\r\n                                            result = _.multiply(result, x.fname === 'abs' ? x.args[0] : x);\r\n                                        });\r\n                                        return result;\r\n                                    };\r\n                                    var A = a.clone(),\r\n                                            B = b.clone();\r\n                                    A = _.pow(A, new Symbol(1 / 2));\r\n                                    B = _.pow(B, new Symbol(1 / 2));\r\n                                    //unwrap abs\r\n\r\n                                    var d = _.multiply(unwrapAbs(B), unwrapAbs(A)),\r\n                                            f = _.symfunction(ATAN, [_.divide(_.multiply(a, x.toLinear()), d.clone())]);\r\n                                    retval = _.divide(f, d);\r\n                                }\r\n                                else if(x.group === S && x.isLinear()) {\r\n                                    retval = _.divide(__.integration.poly_integrate(symbol), a);\r\n                                }\r\n                                else {\r\n                                    //1/(x^4+1)\r\n                                    if(x.power.equals(4)) {\r\n                                        //https://www.freemathhelp.com/forum/threads/55678-difficult-integration-int-1-(1-x-4)-dx\r\n                                        var A, B, C, D, E, F, f1, f2, f3, f4, L1, L2;\r\n                                        var br = inBrackets;\r\n                                        //apply rule: ax^4+b = (√ax^2+√2∜a∜bx+√b)(√ax^2-√2∜a∜bx+√b)\r\n                                        //get quadratic factors\r\n                                        A = _.parse(SQRT + br(a) + '*' + dx + '^2');\r\n                                        B = _.parse(SQRT + br(2) + '*' + br(a) + '^' + br('1/4') + '*' + br(b) + '^' + br('1/4') + '*' + dx);\r\n                                        C = _.parse(SQRT + br(b));\r\n                                        f1 = _.add(_.add(A.clone(), B.clone()), C.clone());\r\n                                        f2 = _.add(_.subtract(A, B), C);\r\n                                        //calculate numerators: [D+E, D-E] -> [√2*b^(3/4)+√b∜ax, √2*b^(3/4)-√b∜ax]\r\n                                        D = _.parse(SQRT + br(2) + '*' + br(b) + '^' + br('3/4'));\r\n                                        E = _.parse(SQRT + br(b) + '*' + br(b) + '^' + br('1/4') + '*' + dx);\r\n                                        //let F = 2b√2∜b\r\n                                        F = _.parse(2 + '*' + br(b) + '*' + SQRT + br(2) + '*' + br(b) + '^' + br('1/4'));\r\n                                        //calculate the factors\r\n                                        L1 = _.divide(_.subtract(D.clone(), E.clone()), _.multiply(F.clone(), f2));\r\n                                        L2 = _.divide(_.add(D, E), _.multiply(F, f1.clone()));\r\n                                        retval = _.add(\r\n                                                __.integrate(L1, dx, depth, opt),\r\n                                                __.integrate(L2, dx, depth, opt)\r\n                                                );\r\n                                    }\r\n                                    else\r\n                                        //let's try partial fractions\r\n                                        retval = __.integration.partial_fraction(symbol, dx, depth);\r\n                                }\r\n                            }\r\n                            else if(p === -1 / 2) {\r\n                                //detect asin and atan\r\n                                if(x.group === S && x.power.equals(2)) {\r\n                                    if(ax.multiplier.lessThan(0) && !b.multiplier.lessThan(0)) {\r\n                                        a.negate();\r\n                                        //it's asin\r\n                                        if(b.isConstant() && a.isConstant()) {\r\n                                            var d = _.symfunction(SQRT, [a.clone()]),\r\n                                                    d2 = _.symfunction(SQRT, [_.multiply(a.clone(), b)]);\r\n                                            retval = _.divide(_.symfunction(ASIN, [_.divide(ax.toLinear(), d2)]), d);\r\n                                        }\r\n                                        //I'm not sure about this one. I'm trusting Wolfram Alpha here\r\n                                        else {\r\n                                            var sqrt_a = _.symfunction(SQRT, [a]),\r\n                                                    sqrt_ax = _.multiply(sqrt_a.clone(), x.clone().toLinear());\r\n                                            retval = _.divide(_.symfunction(ATAN, [_.divide(sqrt_ax, _.symfunction(SQRT, [fn.clone()]))]), sqrt_a);\r\n                                        }\r\n                                    }\r\n                                    else {\r\n                                        /*WHAT HAPPENS HERE???? e.g. integrate(3/sqrt(-a+b*x^2),x) or integrate(3/sqrt(a+b*x^2),x)*/\r\n                                        __.integration.stop();\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    //This would be a case like 1/(sqrt(1-x^3) or 1/(1-(x+1)^2)\r\n                                    __.integration.stop();\r\n                                }\r\n                            }\r\n                            else if(p === 1/2 && x.power.equals(2) && a.greaterThan(0)) {\r\n                                // TODO: Revisit\r\n                                __.integration.stop();\r\n                            }\r\n                            else {\r\n                                if(x.isLinear() && x.group !== PL)\r\n                                    retval = _.divide(__.integration.poly_integrate(symbol), a);\r\n                                else if(x.power.equals(2) && a.greaterThan(0)) {\r\n                                    var sqa, sqb, aob, bsqi, n, integral, u, v, uv;\r\n                                    //1/(a*x^2+b^2)^n\r\n                                    //strip the value of b so b = 1\r\n                                    sqa = _.parse(SQRT + inBrackets(a)); //strip a so b = 1\r\n                                    sqb = _.parse(SQRT + inBrackets(b));\r\n                                    aob = _.multiply(sqa.clone(), sqb.clone()).invert();\r\n                                    bsqi = _.pow(b, new Symbol(symbol.power));\r\n                                    uv = core.Utils.getU(symbol);\r\n                                    u = _.multiply(aob, x.clone().toLinear());\r\n                                    v = _.parse(ATAN + inBrackets(u));\r\n                                    //the conversion will be 1+tan(x)^2 -> sec(x)^2\r\n                                    //since the denominator is now (sec(x)^2)^n and the numerator is sec(x)^2 \r\n                                    //then the remaining sec will be (n-1)*2;\r\n                                    var n = (Math.abs(symbol.power) - 1) * 2;\r\n                                    //1/sec(x)^n can now be converted to cos(x)^n and we can pull the integral of that\r\n                                    var integral = __.integrate(_.parse(COS + inBrackets(uv) + '^' + n));\r\n                                    core.Utils.clearU(uv);\r\n                                    return _.multiply(integral.sub(uv, v), bsqi);\r\n                                }\r\n                                else {\r\n                                    if(symbol.group !== CB && !symbol.power.lessThan(0)) {\r\n                                        retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                    }\r\n                                    else {\r\n                                        var f = symbol.clone().toLinear();\r\n                                        var factored = core.Algebra.Factor.factor(f);\r\n                                        var was_factored = factored.toString() !== f.toString();\r\n                                        if(core.Algebra.degree(f, _.parse(dx)).equals(2) && !was_factored) {\r\n                                            try {\r\n                                                var f1, fx, u, sq;\r\n                                                sq = core.Algebra.sqComplete(f, dx);\r\n                                                u = core.Utils.getU(f);\r\n                                                f1 = sq.f.sub(sq.a, u);\r\n                                                fx = _.pow(f1, _.parse(symbol.power));\r\n                                                retval = __.integrate(fx, u).sub(u, sq.a);\r\n                                            }\r\n                                            catch(e) {\r\n                                                __.integration.stop();\r\n                                            }\r\n                                        }\r\n                                        else\r\n                                            retval = __.integration.partial_fraction(symbol, dx, depth, opt);\r\n                                    }\r\n                                }\r\n                            }\r\n                            retval.multiplier = retval.multiplier.multiply(m);\r\n                        }\r\n                    }\r\n                    else if(g === FN) {\r\n                        var arg = symbol.args[0],\r\n                                m = symbol.multiplier.clone();\r\n                        symbol.toUnitMultiplier();\r\n                        var decomp = __.integration.decompose_arg(arg, dx);\r\n                        //easies way I can think of to get the coefficient and to make sure\r\n                        //that the symbol is linear wrt dx. I'm not actually trying to get the \r\n                        //derivative\r\n                        var a = decomp[0],\r\n                                x = decomp[1],\r\n                                fname = symbol.fname;\r\n                        //log is a special case that can be handled with integration by parts\r\n                        if(fname === LOG || (fname === ASIN || fname === ACOS || fname === ATAN && x.isLinear())) {\r\n                            /*integration by parts */\r\n                            var p = symbol.power.toString();\r\n                            if(isInt(p))\r\n                                depth = depth - p; //it needs more room to find the integral\r\n\r\n                            if(!arg.isComposite())\r\n                                retval = _.multiply(_.parse(m), __.integration.by_parts(symbol, dx, depth, opt));\r\n                            else {\r\n                                //integral u du\r\n                                var u = core.Utils.getU(symbol);\r\n                                var f = _.pow(_.parse(LOG + inBrackets(u)), new Symbol(p));\r\n                                var du = __.diff(arg, dx);\r\n                                var u_du = _.multiply(f, du);\r\n                                var integral = __.integrate(u_du, u, depth, opt);\r\n                                retval = _.multiply(_.parse(m), integral.sub(u, arg));\r\n                            }\r\n\r\n                        }\r\n                        else if(fname === TAN && symbol.power.lessThan(0)) {\r\n                            //convert to cotangent\r\n                            var sym = symbol.clone();\r\n                            sym.power.negate();\r\n                            sym.fname = COT;\r\n                            return _.multiply(_.parse(m), __.integrate(sym, dx, depth));\r\n                        }\r\n                        else {\r\n                            if(!a.contains(dx, true) && symbol.isLinear()) { //perform a deep search for safety\r\n                                //first handle the special cases \r\n                                if(fname === ABS) {\r\n                                    //REVISIT **TODO**\r\n                                    var x = _.divide(arg.clone(), a.clone());\r\n                                    if(x.group === S && !x.power.lessThan(0)) {\r\n                                        if(core.Utils.even(x.power)) {\r\n                                            retval = __.integrate(arg, dx, depth);\r\n                                        }\r\n                                        else {\r\n                                            var integrated = __.integrate(x, dx, depth);\r\n                                            integrated.power = integrated.power.subtract(new Frac(1));\r\n                                            retval = _.multiply(_.multiply(_.symfunction(ABS, [x.toLinear()]), integrated), a);\r\n                                        }\r\n                                    }\r\n                                    else\r\n                                        __.integration.stop();\r\n                                }\r\n                                else {\r\n                                    var ag = symbol.args[0].group,\r\n                                            decomposed = __.integration.decompose_arg(arg, dx);\r\n\r\n                                    if(!(ag === CP || ag === S || ag === CB) || !decomposed[1].power.equals(1) || arg.hasFunc())\r\n                                        __.integration.stop();\r\n                                    /**TODO**/ //ASIN, ACOS, ATAN\r\n                                    switch(fname) {\r\n                                        case COS:\r\n                                            retval = _.symfunction(SIN, [arg]);\r\n                                            break;\r\n                                        case SIN:\r\n                                            retval = _.symfunction(COS, [arg]);\r\n                                            retval.negate();\r\n                                            break;\r\n                                        case TAN:\r\n                                            retval = _.parse(format(Settings.LOG + '(sec({0}))', arg));\r\n                                            break;\r\n                                        case SEC:\r\n                                            retval = _.parse(format(Settings.LOG + '(tan({0})+sec({0}))', arg));\r\n                                            break;\r\n                                        case CSC:\r\n                                            retval = _.parse(format('-' + Settings.LOG + '(csc({0})+cot({0}))', arg));\r\n                                            break;\r\n                                        case COT:\r\n                                            retval = _.parse(format(Settings.LOG + '(sin({0}))', arg));\r\n                                            break;\r\n                                        case SINH:\r\n                                            retval = _.symfunction(COSH, [arg]);\r\n                                            break;\r\n                                        case COSH:\r\n                                            retval = _.symfunction(SINH, [arg]);\r\n                                            break;\r\n                                        case TANH:\r\n                                            retval = _.parse(format(Settings.LOG + '(cosh({0}))', arg));\r\n                                            break;\r\n                                        case ASEC:\r\n                                            retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                            break;\r\n                                        case ACSC:\r\n                                            retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                            break;\r\n                                        case ACOT:\r\n                                            retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                            break;\r\n                                            //inverse htrig\r\n                                        case ASECH:\r\n                                            retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                            break;\r\n                                        case ACSCH:\r\n                                            retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                            break;\r\n                                        case ACOTH:\r\n                                            retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                            break;\r\n                                            //end inverse htrig\r\n                                            //htrigh\r\n                                        case SECH:\r\n                                            retval = _.parse(format('atan(sinh({0}))', arg));\r\n                                            break;\r\n                                        case CSCH:\r\n                                            retval = _.parse(format(Settings.LOG + '(tanh(({0})/2))', arg));\r\n                                            break;\r\n                                        case COTH:\r\n                                            retval = _.parse(format(Settings.LOG + '(sinh({0}))', arg));\r\n                                            break;\r\n                                            //end htrig\r\n                                        case EXP:\r\n                                            retval = __.integrate(_.parse(format('e^({0})', arg)), dx, depth);\r\n                                            break;\r\n                                        case 'S':\r\n                                            var arg = symbol.args[0].clone(),\r\n                                                    dc = __.integration.decompose_arg(arg, dx),\r\n                                                    x_ = dc[1],\r\n                                                    a_ = dc[0];\r\n                                            var b_ = dc[3];\r\n                                            retval = _.parse(format('(cos((1/2)*pi*(({1})+({0})*({2}))^2)+pi*(({1})+({0})*({2}))*S(({1})+({0})*({2})))/(({0})*pi)', a_, b_, x));\r\n                                            break;\r\n                                        case 'C':\r\n                                            var arg = symbol.args[0].clone(),\r\n                                                    dc = __.integration.decompose_arg(arg, dx),\r\n                                                    x_ = dc[1],\r\n                                                    a_ = dc[0];\r\n                                            var b_ = dc[3];\r\n                                            retval = _.parse(format('(pi*(({1})+({0})*({2}))*C(({1})+({0})*({2}))-sin((1/2)*pi*(({1})+({0})*({2}))^2))/(({0})*pi)', a_, b_, x_));\r\n                                            break;\r\n                                        case 'erf':\r\n                                            var arg = symbol.args[0].clone(),\r\n                                                    dc = __.integration.decompose_arg(arg, dx),\r\n                                                    x_ = dc[1],\r\n                                                    a_ = dc[0];\r\n                                            retval = _.parse(format('e^(-(({2}))^2)/(({0})*sqrt(pi))+(1/({0})+({1}))*erf(({2}))', a_, x_, arg));\r\n                                            break;\r\n                                        case 'sign':\r\n                                            retval = _.multiply(symbol.clone(), arg.clone());\r\n                                            break;\r\n                                        default:\r\n                                            __.integration.stop();\r\n                                    }\r\n\r\n                                    retval = _.divide(retval, a);\r\n                                }\r\n                            }\r\n                            else if(x.isLinear()) {\r\n                                if(fname === COS || fname === SIN) {\r\n                                    var p = Number(symbol.power);\r\n                                    //check to see if it's negative and then just transform it to sec or csc\r\n                                    if(p < 0) {\r\n                                        symbol.fname = fname === SIN ? CSC : SEC;\r\n                                        symbol.invert().updateHash();\r\n                                        retval = __.integrate(symbol, dx, depth);\r\n                                    }\r\n                                    else {\r\n                                        var arg = symbol.args[0],\r\n                                                rd = symbol.clone(), //cos^(n-1)\r\n                                                rd2 = symbol.clone(), //cos^(n-2)\r\n                                                q = new Symbol((p - 1) / p), //\r\n                                                na = _.multiply(a.clone(), new Symbol(p)).invert(); //1/(n*a)\r\n                                        rd.power = rd.power.subtract(new Frac(1));\r\n                                        rd2.power = rd2.power.subtract(new Frac(2));\r\n\r\n                                        var t = _.symfunction(fname === COS ? SIN : COS, [arg.clone()]);\r\n                                        if(fname === SIN)\r\n                                            t.negate();\r\n                                        retval = _.add(_.multiply(_.multiply(na, rd), t), _.multiply(q, __.integrate(_.parse(rd2), dx, depth)));\r\n                                    }\r\n                                }\r\n                                //tan(x)^n or cot(x)^n\r\n                                else if(fname === TAN || fname === COT) {\r\n                                    //http://www.sosmath.com/calculus/integration/moretrigpower/moretrigpower.html\r\n                                    if(symbol.args[0].isLinear(dx)) {\r\n                                        var n = symbol.power.subtract(new Frac(1)).toString(),\r\n                                                r = symbol.clone().toUnitMultiplier(),\r\n                                                w = _.parse(format((fname === COT ? '-' : '') + '1/({2}*{0})*{3}({1})^({0})', n, arg, a, fname));\r\n                                        r.power = r.power.subtract(new Frac(2));\r\n                                        if(r.power.equals(0))\r\n                                            r = _.parse(r);\r\n                                        retval = _.subtract(w, __.integrate(r, dx, depth));\r\n                                    }\r\n                                }\r\n                                //sec(x)^n or csc(x)^n\r\n                                else if(fname === SEC || fname === CSC) {\r\n                                    //http://www.sosmath.com/calculus/integration/moretrigpower/moretrigpower.html\r\n                                    var n1 = symbol.power.subtract(new Frac(1)).toString(),\r\n                                            n2 = symbol.power.subtract(new Frac(2)).toString(),\r\n                                            f2 = fname === SEC ? TAN : COT,\r\n                                            r = symbol.clone().toUnitMultiplier(),\r\n                                            parse_str = format((fname === CSC ? '-' : '') + '1/({0}*{1})*{4}({3})^({2})*{5}({3})', a, n1, n2, arg, fname, f2),\r\n                                            w = _.parse(parse_str);\r\n                                    r.power = r.power.subtract(new Frac(2));\r\n                                    if(r.power.equals(0))\r\n                                        r = _.parse(r);\r\n                                    retval = _.add(w, _.multiply(new Symbol(n2 / n1), __.integrate(r, dx, depth)));\r\n                                }\r\n                                else if((fname === COSH || fname === SINH) && symbol.power.equals(2)) {\r\n                                    retval = __.integrate(symbol.fnTransform(), dx, depth);\r\n                                }\r\n                                else\r\n                                    __.integration.stop();\r\n                            }\r\n                            else\r\n                                __.integration.stop();\r\n\r\n                            retval.multiplier = retval.multiplier.multiply(m);\r\n                        }\r\n                    }\r\n                    else if(g === PL) {\r\n                        retval = __.integration.partial_fraction(symbol, dx, depth);\r\n                    }\r\n                    else if(g === CB) {\r\n                        var den = symbol.getDenom();\r\n                        if(den.group === S)\r\n                            symbol = _.expand(symbol);\r\n\r\n                        //separate the coefficient since all we care about are symbols containing dx\r\n                        var coeff = symbol.stripVar(dx);\r\n                        //now get only those that apply\r\n                        var cfsymbol = _.divide(symbol.clone(), coeff.clone()); //a coeff free symbol\r\n                        //peform a correction for stripVar. This is a serious TODO!\r\n                        if(coeff.contains(dx)) {\r\n                            cfsymbol = _.multiply(cfsymbol, coeff);\r\n                            coeff = new Symbol(1);\r\n                        }\r\n\r\n                        //if we only have one symbol left then let's not waste time. Just pull the integral\r\n                        //and let the chips fall where they may\r\n                        if(cfsymbol.group !== CB) {\r\n                            if(cfsymbol.equals(1)) {\r\n                                return __.integrate(_.expand(symbol), dx, depth);\r\n                            }\r\n\r\n                            //only factor for multivariate which are polynomials\r\n                            if(cfsymbol.clone().toLinear().isPoly(true) && core.Utils.variables(cfsymbol).length > 1) {\r\n                                cfsymbol = core.Algebra.Factor.factor(cfsymbol);\r\n                            }\r\n\r\n                            retval = __.integrate(cfsymbol, dx, depth);\r\n                        }\r\n                        else {\r\n                            //we collect the symbols and sort them descending group, descending power, descending alpabethically\r\n                            var symbols = cfsymbol.collectSymbols().sort(function (a, b) {\r\n                                if(a.group === b.group) {\r\n                                    if(Number(a.power) === Number(b.power))\r\n                                        if(a < b)\r\n                                            return 1; //I want sin first\r\n                                        else\r\n                                            return -1;\r\n                                    return b.power - a.power; //descending power\r\n                                }\r\n                                return b.group - a.group; //descending groups\r\n                            }).map(function (x) {\r\n                                var unwrapped = Symbol.unwrapSQRT(x, true);\r\n                                if(unwrapped.fname === EXP) {\r\n                                    return _.parse(format('({1})*e^({0})', unwrapped.args[0], unwrapped.multiplier));\r\n                                }\r\n                                return unwrapped;\r\n                            });\r\n                            var l = symbols.length;\r\n                            if(symbol.power < 0) {\r\n                                if(l === 2) {\r\n                                    return __.integrate(_.expand(symbol), dx, depth, opt);\r\n                                }\r\n                            }\r\n                            //otherwise the denominator is one lumped together symbol \r\n                            else {\r\n                                //generate an image for \r\n                                if(l === 2) {\r\n                                    //try u substitution\r\n                                    try {\r\n                                        retval = __.integration.u_substitution(symbols, dx);\r\n                                    }\r\n                                    catch(e) {/* failed :`(*/\r\n                                        ;\r\n                                    }\r\n\r\n                                    if(!retval) {\r\n                                        //no success with u substitution so let's try known combinations\r\n                                        //are they two functions\r\n                                        var g1 = symbols[0].group,\r\n                                                g2 = symbols[1].group,\r\n                                                sym1 = symbols[0],\r\n                                                sym2 = symbols[1],\r\n                                                fn1 = sym1.fname,\r\n                                                fn2 = sym2.fname;\r\n                                        //reset the symbol minus the coeff\r\n                                        symbol = _.multiply(sym1.clone(), sym2.clone());\r\n                                        if(g1 === FN && g2 === FN) {\r\n                                            if(fn1 === LOG || fn2 === LOG) {\r\n                                                retval = __.integration.by_parts(symbol.clone(), dx, depth, opt);\r\n                                            }\r\n                                            else {\r\n                                                symbols.sort(function (a, b) {\r\n                                                    return b.fname > a.fname;\r\n                                                });\r\n                                                var arg1 = sym1.args[0];\r\n                                                //make sure the arguments are suitable. We don't know how to integrate non-linear arguments\r\n                                                if(!arg1.isLinear() || !(arg1.group === CP || arg1.group === CB || arg1.group === S))\r\n                                                    __.integration.stop();\r\n\r\n                                                var decomp = __.integration.decompose_arg(arg1, dx);\r\n                                                x = decomp[1],\r\n                                                        a = decomp[0];\r\n                                                if(!x.isLinear()) //again... linear arguments only wrt x\r\n                                                    __.integration.stop();\r\n\r\n                                                //they have to have the same arguments and then we have cleared all the check to \r\n                                                //make sure we can integrate FN & FN\r\n                                                var arg2 = sym2.args[0];\r\n                                                //make sure that their argument matches\r\n                                                if(arg1.equals(arg2)) {\r\n                                                    if(fn1 === SIN && fn2 === COS || fn1 === COS && fn2 === SIN) {\r\n                                                        if(sym1.power.lessThan(0))\r\n                                                            __.integration.stop();//we don't know how to handle, sin(x)^n/cos(x)^m where m > n,  yet\r\n                                                        //if it's in the form sin(x)^n*cos(x)^n then we can just return tan(x)^n which we know how to integrate\r\n                                                        if(fn1 === SIN && sym1.power.add(sym2.power).equals(0)) {\r\n                                                            sym1.fname = TAN;\r\n                                                            sym1.updateHash();\r\n                                                            retval = __.integrate(sym1, dx, depth);\r\n                                                        }\r\n                                                        else {\r\n                                                            if(even(sym1.power) && fn2 === COS && sym2.power.lessThan(0)) {\r\n                                                                //transform sin^(2*n) to (1-cos^2)^n\r\n                                                                var n = Number(sym1.power) / 2,\r\n                                                                        new_sym = _.parse(format('(1-cos({0})^2)^({1})', sym1.args[0], n));\r\n                                                                retval = __.integrate(_.expand(_.multiply(new_sym, sym2.clone())), dx, depth, opt);\r\n                                                            }\r\n                                                            else if(even(sym1.power) && fn2 === SIN && sym2.power.lessThan(0)) {\r\n                                                                //transform cos^(2*n) to (1-sin^2)^n\r\n                                                                var n = Number(sym1.power) / 2,\r\n                                                                        new_sym = _.parse(format('(1-sin({0})^2)^({1})', sym1.args[0], n));\r\n                                                                retval = __.integrate(_.expand(_.multiply(new_sym, sym2.clone())), dx, depth, opt);\r\n                                                            }\r\n                                                            else {\r\n                                                                var p1_even = core.Utils.even(sym1.power),\r\n                                                                        p2_even = core.Utils.even(sym2.power);\r\n                                                                retval = new Symbol(0);\r\n                                                                if(!p1_even || !p2_even) {\r\n                                                                    var u, r, trans;\r\n                                                                    //since cos(x) is odd it carries du. If sin was odd then it would be the other way around\r\n                                                                    //know that p1 satifies the odd portion in this case. If p2 did than it would contain r\r\n                                                                    if(!p1_even) {\r\n                                                                        //u = sin(x)\r\n                                                                        u = sym2;\r\n                                                                        r = sym1;\r\n                                                                    }\r\n                                                                    else {\r\n                                                                        u = sym1;\r\n                                                                        r = sym2;\r\n                                                                    }\r\n                                                                    //get the sign of du. In this case r carries du as stated before and D(cos(x),x) = -sin(x)\r\n                                                                    var sign = u.fname === COS ? -1 : 1,\r\n                                                                            n = r.power,\r\n                                                                            //remove the du e.g. cos(x)^2*sin(x)^3 dx -> cos(x)^2*sin(x)^2*sin(x). We're left with two \r\n                                                                            //even powers afterwards which can be transformed\r\n                                                                            k = (n - 1) / 2,\r\n                                                                            //make the transformation cos(x)^2 = 1 - sin(x)^2\r\n                                                                            trans = _.parse('(1-' + u.fname + core.Utils.inBrackets(arg1) + '^2)^' + k),\r\n                                                                            sym = _.expand(_.multiply(new Symbol(sign), _.multiply(u.clone(), trans)));\r\n                                                                    //we can now just loop through and integrate each since it's now just a polynomial with functions\r\n                                                                    sym.each(function (x) {\r\n                                                                        retval = _.add(retval, __.integration.poly_integrate(x.clone()));\r\n                                                                    });\r\n                                                                }\r\n                                                                else {\r\n                                                                    //performs double angle transformation\r\n                                                                    var double_angle = function (symbol) {\r\n                                                                        var p = symbol.power,\r\n                                                                                k = p / 2, e;\r\n                                                                        if(symbol.fname === COS)\r\n                                                                            e = '((1/2)+(cos(2*(' + symbol.args[0] + '))/2))^' + k;\r\n                                                                        else\r\n                                                                            e = '((1/2)-(cos(2*(' + symbol.args[0] + '))/2))^' + k;\r\n\r\n                                                                        return _.parse(e);\r\n                                                                    };\r\n                                                                    //they're both even so transform both using double angle identities and we'll just\r\n                                                                    //be able to integrate by the sum of integrals\r\n                                                                    var a = double_angle(sym1),\r\n                                                                            b = double_angle(sym2),\r\n                                                                            t = _.multiply(a, b);\r\n                                                                    var sym = _.expand(t);\r\n                                                                    sym.each(function (x) {\r\n                                                                        retval = _.add(retval, __.integrate(x, dx, depth));\r\n                                                                    });\r\n                                                                    return _.multiply(retval, coeff);\r\n                                                                }\r\n                                                            }\r\n                                                        }\r\n                                                    }\r\n                                                    //tan(x)*sec(x)^n \r\n                                                    else if(fn1 === SEC && fn2 === TAN && x.isLinear() && sym2.isLinear()) {\r\n                                                        retval = _.parse(format('sec({0})^({1})/({1})', sym1.args[0], sym1.power));\r\n                                                    }\r\n                                                    else if(fn1 === TAN && fn2 === SEC && x.isLinear()) {\r\n                                                        //remaining: tan(x)^3*sec(x)^6\r\n                                                        if(sym1.isLinear() && sym2.isLinear()) {\r\n                                                            retval = _.divide(_.symfunction(SEC, [arg1.clone()]), a);\r\n                                                        }\r\n                                                        else if(even(sym1.power)) {\r\n                                                            var p = Number(sym1.power) / 2;\r\n                                                            //transform tangent\r\n                                                            var t = _.parse(format('(sec({0})^2-1)^({1})', sym1.args[0], p));\r\n                                                            retval = __.integrate(_.expand(_.multiply(t, sym2)), dx, depth);\r\n                                                        }\r\n                                                        else\r\n                                                            __.integration.stop();\r\n                                                    }\r\n                                                    else if(fn1 === SEC && fn2 === COS) {\r\n                                                        sym1.fname = COS;\r\n                                                        sym1.invert().updateHash();\r\n                                                        retval = __.integrate(_.multiply(sym1, sym2), dx, depth);\r\n                                                    }\r\n                                                    else if(fn1 === SIN && fn2 === CSC) {\r\n                                                        sym2.fname = SIN;\r\n                                                        sym2.invert().updateHash();\r\n                                                        retval = __.integrate(_.multiply(sym1, sym2), dx, depth);\r\n                                                    }\r\n                                                    //tan/cos\r\n                                                    else if(fn1 === TAN && (fn2 === COS || fn2 === SIN) && sym2.power.lessThan(0)) {\r\n                                                        var t = _.multiply(sym1.fnTransform(), sym2);\r\n                                                        retval = __.integrate(_.expand(t), dx, depth);\r\n                                                    }\r\n                                                    else {\r\n                                                        var t = _.multiply(sym1.fnTransform(), sym2.fnTransform());\r\n                                                        retval = __.integrate(_.expand(t), dx, depth);\r\n                                                    }\r\n                                                }\r\n                                                //TODO: In progress\r\n                                                else if((fn1 === SIN || fn1 === COS) && (fn2 === SIN || fn2 === COS)) {\r\n\r\n                                                    if(sym1.isLinear() && sym2.isLinear()) {\r\n                                                        //if in the form cos(a*x)*sin(b*x)\r\n                                                        if(sym1.args[0].isLinear() && sym2.args[0].isLinear()) {\r\n                                                            //use identity (sin(b*x+a*x)+sin(b*x-a*x))/2\r\n                                                            var ax, bx;\r\n                                                            if(fn2 === SIN) {\r\n                                                                ax = sym1.args[0];\r\n                                                                bx = sym2.args[0];\r\n                                                            }\r\n                                                            else {\r\n                                                                bx = sym1.args[0];\r\n                                                                ax = sym2.args[0];\r\n                                                            }\r\n\r\n                                                            //make the transformation\r\n                                                            f = _.parse(format('(sin(({1})+({0}))+sin(({1})-({0})))/2', ax.toString(), bx.toString()));\r\n\r\n                                                            //integrate it\r\n                                                            retval = __.integrate(f, dx, depth);\r\n                                                        }\r\n                                                        else {\r\n                                                            var transformed = trigTransform(symbols);\r\n                                                            retval = __.integrate(_.expand(transformed), dx, depth);\r\n                                                        }\r\n                                                    }\r\n                                                    else {\r\n                                                        var transformed = new Symbol(1);\r\n                                                        symbols.map(function (sym) {\r\n                                                            var s = sym.fnTransform();\r\n                                                            transformed = _.multiply(transformed, s);\r\n                                                        });\r\n                                                        var t = _.expand(transformed);\r\n\r\n                                                        retval = __.integrate(t, dx, depth);\r\n\r\n                                                        if(retval.hasIntegral()) {\r\n                                                            retval = __.integrate(trigTransform(transformed.collectSymbols()), dx, depth);\r\n                                                        }\r\n                                                    }\r\n                                                }\r\n                                                else {\r\n                                                    __.integration.stop();\r\n                                                }\r\n\r\n                                            }\r\n                                        }\r\n                                        else if(g1 === FN && g2 === S) {\r\n                                            var sym1_is_linear = sym1.isLinear();\r\n                                            if(sym1.fname === COS && sym1_is_linear && sym2.power.equals(-1))\r\n                                                retval = _.symfunction('Ci', [sym1.args[0]]);\r\n                                            else if(sym1.fname === COS && sym2.power.equals(-1)) {\r\n                                                retval = __.integrate(_.multiply(sym1.fnTransform(), sym2.clone()), dx, depth);\r\n                                            }\r\n                                            else if(sym1.fname === COSH && sym1_is_linear && sym2.power.equals(-1))\r\n                                                retval = _.symfunction('Chi', [sym1.args[0]]);\r\n                                            else if(sym1.fname === COSH && sym2.power.equals(-1)) {\r\n                                                retval = __.integrate(_.multiply(sym1.fnTransform(), sym2.clone()), dx, depth);\r\n                                            }\r\n                                            else if(sym1.fname === SIN && sym1_is_linear && sym2.power.equals(-1))\r\n                                                retval = _.symfunction('Si', [sym1.args[0]]);\r\n                                            else if(sym1.fname === SIN && sym2.power.equals(-1)) {\r\n                                                retval = __.integrate(_.multiply(sym1.fnTransform(), sym2.clone()), dx, depth);\r\n                                            }\r\n                                            else if(sym1.fname === SINH && sym1_is_linear && sym2.power.equals(-1))\r\n                                                retval = _.symfunction('Shi', [sym1.args[0]]);\r\n                                            else if(sym1.fname === SINH && sym2.power.equals(-1)) {\r\n                                                retval = __.integrate(_.multiply(sym1.fnTransform(), sym2.clone()), dx, depth);\r\n                                            }\r\n                                            else if(sym1.fname === LOG && sym2.power.equals(-1)) {\r\n                                                //log(x)^n/x = log(x)^(n+1)/(n+1)\r\n                                                retval = __.integration.poly_integrate(sym1, dx, depth);\r\n                                            }\r\n                                            else if(sym1.fname === 'erf') {\r\n                                                if(sym2.power.equals(1)) {\r\n                                                    var dc = __.integration.decompose_arg(sym1.args[0], dx),\r\n                                                            a_ = dc[0],\r\n                                                            x_ = dc[1],\r\n                                                            arg = sym1.args[0].toString();\r\n                                                    retval = _.parse(format('(e^(-(({2}))^2)*(sqrt(pi)*e^((({2}))^2)*(2*({0})^2*({1})^2-3)*erf(({2}))+2*({0})*({1})-2))/(4*sqrt(pi)*({0})^2)', a_, x_, arg))\r\n                                                }\r\n                                            }\r\n                                            else {\r\n                                                //since group S is guaranteed convergence we need not worry about tracking depth of integration\r\n                                                retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                            }\r\n                                        }\r\n                                        else if(g1 === EX && g2 === S) {\r\n                                            var x = fn1 === LOG ? __.integration.decompose_arg(sym1.args[0], dx)[1] : null;\r\n                                            if(sym1.isE() && (sym1.power.group === S || sym1.power.group === CB) && sym2.power.equals(-1)) {\r\n                                                retval = _.symfunction('Ei', [sym1.power.clone()]);\r\n                                            }\r\n                                            else if(fn1 === LOG && x.value === sym2.value) {\r\n                                                retval = __.integration.poly_integrate(sym1, dx, depth);\r\n                                            }\r\n                                            else\r\n                                                retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                        }\r\n                                        else if(g1 === PL && g2 === S) {\r\n                                            //first try to reduce the top\r\n                                            if(sym2.value === sym1.value && sym1.power.equals(-1)) {\r\n                                                //find the lowest power in the denominator\r\n                                                var pd = Math.min.apply(null, core.Utils.keys(sym1.symbols));\r\n                                                //get the lowest common value between denominator and numerator\r\n                                                var pc = Math.min(pd, sym2.power);\r\n                                                //reduce both denominator and numerator by that factor\r\n                                                var factor = sym2.clone();\r\n                                                factor.power = new Frac(pc);\r\n                                                sym2 = _.divide(sym2, factor.clone()); //reduce the denominator\r\n                                                var t = new Symbol(0);\r\n                                                sym1.each(function (x) {\r\n                                                    t = _.add(t, _.divide(x.clone(), factor.clone()));\r\n                                                });\r\n                                                t.multiplier = sym1.multiplier;\r\n                                                symbol = _.divide(sym2, t);\r\n                                            }\r\n                                            else {\r\n                                                symbol = _.expand(symbol);\r\n                                            }\r\n                                            retval = __.integration.partial_fraction(symbol, dx, depth);\r\n                                        }\r\n                                        else if(g1 === CP && g2 === S) {\r\n                                            var f = sym1.clone().toLinear(),\r\n                                                    f_is_linear = core.Algebra.degree(f, _.parse(dx)).equals(1);\r\n                                            //handle cases x^(2*n)/sqrt(1-x^2)\r\n                                            if(sym1.power.equals(-1 / 2)) {\r\n                                                var decomp = __.integration.decompose_arg(sym1.clone().toLinear(), dx);\r\n                                                var a = decomp[0].negate(),\r\n                                                        x = decomp[1],\r\n                                                        b = decomp[3],\r\n                                                        p1 = Number(sym1.power),\r\n                                                        p2 = Number(sym2.power);\r\n                                                if(isInt(p2) && core.Utils.even(p2) && x.power.equals(2)) {\r\n                                                    //if the substitution \r\n                                                    var c = _.divide(_.multiply(_.pow(b.clone(), new Symbol(2)),\r\n                                                            _.symfunction(SQRT, [_.divide(b.clone(), a.clone())])),\r\n                                                            _.pow(a.clone(), new Symbol(2)));\r\n                                                    c = _.multiply(c, _.symfunction(SQRT, [b]).invert());\r\n                                                    var dummy = _.parse('sin(u)');\r\n                                                    dummy.power = dummy.power.multiply(sym2.power);\r\n                                                    var integral = __.integrate(dummy, 'u', depth);\r\n                                                    var bksub = _.parse(ASIN + '(' + SQRT + '(' + a + '/' + b + ')*' + dx + ')');\r\n                                                    retval = _.multiply(c, integral.sub(new Symbol('u'), bksub));\r\n                                                }\r\n                                                else if(p1 === -1 / 2) {\r\n                                                    var u_transform = function (f, u) {\r\n                                                        var integral = _.parse(__.integrate(f, dx, depth, opt).sub(dx, format(u, dx)));\r\n                                                        if(!integral.hasIntegral())\r\n                                                            return integral;\r\n                                                    }\r\n                                                    if(p2 === -1) {\r\n                                                        retval = u_transform(\r\n                                                                _.expand(_.expand(_.pow(_.multiply(sym1.invert(), sym2.invert()), new Symbol(2)))).invert(),\r\n                                                                'sqrt(1-1/({0})^2)'\r\n                                                                );\r\n                                                    }\r\n                                                    else if(p2 === -2) {\r\n                                                        //apply transformation to see if it matches asin(x)\r\n                                                        retval = u_transform(\r\n                                                                _.sqrt(_.expand(_.divide(_.pow(symbol, new Symbol(2)).invert(), _.pow(new Symbol(dx), new Symbol(2))).negate())).invert(),\r\n                                                                'sqrt(1-1/({0})^2)'\r\n                                                                );\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                            else if(sym1.power.equals(-1) && sym2.isLinear() && f_is_linear) {\r\n                                                retval = __.integration.partial_fraction(symbol, dx, depth);\r\n                                            }\r\n                                            else if(!sym1.power.lessThan(0) && isInt(sym1.power)) {\r\n                                                //sum of integrals\r\n                                                var expanded = _.expand(sym1);\r\n                                                retval = new Symbol(0);\r\n                                                expanded.each(function (x) {\r\n                                                    if(x.group === PL) {\r\n                                                        x.each(function (y) {\r\n                                                            retval = _.add(retval, __.integrate(_.multiply(sym2.clone(), y), dx, depth));\r\n                                                        });\r\n                                                    }\r\n                                                    else\r\n                                                        retval = _.add(retval, __.integrate(_.multiply(sym2.clone(), x), dx, depth));\r\n                                                });\r\n                                            }\r\n                                            else if(sym1.power.lessThan(-2)) {\r\n                                                retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                            }\r\n                                            else if(sym1.power.lessThan(0) && sym2.power.greaterThan(1)) {\r\n                                                var decomp = __.integration.decompose_arg(sym1.clone().toLinear(), dx),\r\n                                                        a = decomp[0].negate(),\r\n                                                        x = decomp[1],\r\n                                                        b = decomp[3],\r\n                                                        fn = sym1.clone().toLinear();\r\n\r\n                                                if(x.group !== PL && x.isLinear()) {\r\n                                                    var p = Number(sym2.power),\r\n                                                            du = '_u_',\r\n                                                            u = new Symbol(du),\r\n                                                            //pull the integral with the subsitution\r\n                                                            U = _.expand(_.divide(_.pow(_.subtract(u.clone(), b.clone()), new Symbol(p)), u.clone())),\r\n                                                            scope = {};\r\n\r\n                                                    //generate a scope for resubbing the symbol\r\n                                                    scope[du] = fn;\r\n                                                    var U2 = _.parse(U, scope);\r\n                                                    retval = __.integrate(U2, dx, 0);\r\n                                                }\r\n                                                else if(sym2.power.greaterThan(x.power) || sym2.power.equals(x.power)) {\r\n\r\n                                                    //factor out coefficients\r\n                                                    var factors = new core.Algebra.Classes.Factors();\r\n                                                    sym1 = core.Algebra.Factor.coeffFactor(sym1.invert(), factors);\r\n                                                    var div = core.Algebra.divide(sym2, sym1);\r\n                                                    //it assumed that the result will be of group CB\r\n                                                    if(div.group !== CB) {\r\n                                                        retval = new Symbol(0);\r\n                                                        div.each(function (t) {\r\n                                                            retval = _.add(retval, __.integrate(t, dx, depth));\r\n                                                        });\r\n                                                        //put back the factors\r\n                                                        factors.each(function (factor) {\r\n                                                            retval = _.divide(retval, factor);\r\n                                                        });\r\n\r\n                                                        retval = _.expand(retval);\r\n                                                    }\r\n                                                    else {\r\n                                                        //try something else\r\n                                                        retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                                    }\r\n                                                }\r\n                                                else\r\n                                                    retval = __.integration.partial_fraction(symbol, dx, depth);\r\n                                            }\r\n                                            else {\r\n                                                //handle cases such as (1-x^2)^(n/2)*x^(m) where n is odd ___ cracking knuckles... This can get a little hairy \r\n                                                if(sym1.power.den.equals(2)) {\r\n                                                    //assume the function is in the form (a^2-b*x^n)^(m/2)\r\n                                                    var dc = __.integration.decompose_arg(sym1.clone().toLinear(), dx),\r\n                                                            //using the above definition\r\n                                                            a = dc[3], x = dc[1], b = dc[0], bx = dc[2];\r\n                                                    if(x.power.equals(2) && b.lessThan(0)) { //if n is even && b is negative\r\n                                                        //make a equal 1 so we can do a trig sub\r\n                                                        if(!a.equals(1)) { //divide a out of everything\r\n                                                            //move a to the coeff\r\n                                                            coeff = _.multiply(coeff, _.pow(a, new Symbol(2)));\r\n                                                        }\r\n                                                        var u = dx;\r\n                                                        var c = _.divide(_.pow(b.clone().negate(), new Symbol(1 / 2)), _.pow(a, new Symbol(1 / 2))),\r\n                                                                du = _.symfunction(COS, [new Symbol(u)]),\r\n                                                                cosn = _.pow(_.symfunction(COS, [new Symbol(u)]), new Symbol(sym1.power.num)),\r\n                                                                X = _.pow(_.symfunction(SIN, [new Symbol(u)]), new Symbol(sym2.power)),\r\n                                                                val = _.multiply(_.multiply(cosn, du), X),\r\n                                                                integral = __.integrate(val, u, depth);\r\n                                                        //but remember that u = asin(sqrt(b)*a*x)\r\n                                                        retval = integral.sub(u, _.symfunction(ASIN, [_.multiply(new Symbol(dx), c)]));\r\n                                                    }\r\n                                                    else {\r\n                                                        retval = __.integration.partial_fraction(symbol, dx, depth, opt);\r\n                                                    }\r\n                                                }\r\n                                                else if(f_is_linear) {\r\n                                                    retval = __.integration.partial_fraction(symbol, dx, depth);\r\n                                                }\r\n                                            }\r\n\r\n                                        }\r\n                                        else if(sym1.isComposite() && sym2.isComposite()) {\r\n                                            //sum of integrals\r\n                                            retval = new Symbol(0);\r\n                                            if(sym1.power.greaterThan(0) && sym2.power.greaterThan(0)) {\r\n                                                //combine and pull the integral of each\r\n                                                var sym = _.expand(symbol);\r\n                                                sym.each(function (x) {\r\n                                                    retval = _.add(retval, __.integrate(x, dx, depth));\r\n                                                }, true);\r\n                                            }\r\n                                            else {\r\n                                                var p1 = Number(sym1.power),\r\n                                                        p2 = Number(sym2.power);\r\n                                                if(p1 < 0 && p2 > 0) {\r\n                                                    //swap\r\n                                                    var t = sym1;\r\n                                                    sym1 = sym2;\r\n                                                    sym2 = t;\r\n                                                }\r\n                                                if(p1 === -1 && p2 === -1) {\r\n                                                    retval = __.integration.partial_fraction(symbol, dx);\r\n                                                }\r\n                                                else {\r\n                                                    sym1.each(function (x) {\r\n                                                        var k = _.multiply(x, sym2.clone());\r\n                                                        var integral = __.integrate(k, dx, depth);\r\n                                                        retval = _.add(retval, integral);\r\n                                                    });\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                        else if(g1 === CP && symbols[0].power.greaterThan(0)) {\r\n                                            sym1 = _.expand(sym1);\r\n                                            retval = new Symbol(0);\r\n                                            sym1.each(function (x) {\r\n                                                retval = _.add(retval, __.integrate(_.multiply(x, sym2.clone()), dx, depth));\r\n                                            }, true);\r\n                                        }\r\n                                        else if(g1 === FN && g2 === EX && core.Utils.in_htrig(sym1.fname)) {\r\n                                            sym1 = sym1.fnTransform();\r\n                                            retval = __.integrate(_.expand(_.multiply(sym1, sym2)), dx, depth);\r\n                                        }\r\n                                        else if(g1 === FN && g2 === CP || g2 === FN && g1 === CP) {\r\n                                            if(g2 === FN && g1 === CP) {\r\n                                                var t = sym1;\r\n                                                sym1 = sym2;\r\n                                                sym2 = t; //swap\r\n                                            }\r\n                                            var du, sym2_clone, p, q, sa, sb;\r\n                                            du = Symbol.unwrapSQRT(__.diff(sym1.clone(), dx), true);\r\n                                            sym2_clone = Symbol.unwrapSQRT(sym2, true);\r\n                                            if(du.power.equals(sym2_clone.power)) {\r\n                                                p = new Symbol(sym2.power);\r\n                                                sa = du.clone().toLinear();\r\n                                                sb = sym2.clone().toLinear();\r\n                                                q = core.Algebra.divide(sa.toLinear(), sb);\r\n                                                if(q.isConstant()) {\r\n                                                    var nq = _.pow(q, p.negate());\r\n                                                    retval = _.multiply(nq, __.integration.poly_integrate(sym1.clone()));\r\n                                                }\r\n                                            }\r\n                                            else {\r\n                                                retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                            }\r\n                                        }\r\n                                        else {\r\n                                            var syma = sym1.clone().toLinear();\r\n                                            var symb = sym2.clone().toLinear();\r\n                                            if(g1 === EX && g2 === EX && sym1.power.contains(dx) && sym2.power.contains(dx)\r\n                                                    && !syma.contains(dx) && !symb.contains(dx)) {\r\n                                                retval = _.parse(format('(({0})^(({2})*({4}))*({1})^(({3})*({4})))/(log(({0})^({2}))+log(({1})^({3})))',\r\n                                                        syma.toString(),\r\n                                                        symb.toString(),\r\n                                                        sym1.power.multiplier.toString(),\r\n                                                        sym2.power.multiplier.toString(),\r\n                                                        dx\r\n                                                        ));\r\n                                            }\r\n                                            else\r\n                                                retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                        }\r\n                                    }\r\n                                }\r\n                                else if(l === 3 && (symbols[2].group === S && symbols[2].power.lessThan(2) || symbols[0].group === CP)) {\r\n                                    var first = symbols[0];\r\n                                    if(first.group === CP) { //TODO {support higher powers of x in the future}\r\n                                        if(first.power.greaterThan(1))\r\n                                            first = _.expand(first);\r\n                                        var r = _.multiply(symbols[1], symbols[2]);\r\n                                        retval = new Symbol(0);\r\n                                        first.each(function (x) {\r\n                                            var t = _.multiply(x, r.clone());\r\n                                            var intg = __.integrate(t, dx, depth);\r\n                                            retval = _.add(retval, intg);\r\n                                        }, true);\r\n                                    }\r\n                                    else {\r\n                                        //try integration by parts although technically it will never work\r\n                                        retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                    }\r\n\r\n                                }\r\n                                else if(all_functions(symbols)) {\r\n                                    var t = new Symbol(1);\r\n                                    for(var i = 0, l = symbols.length; i < l; i++) {\r\n                                        t = _.multiply(t, symbols[i].fnTransform());\r\n                                    }\r\n                                    t = _.expand(t);\r\n                                    retval = __.integrate(t, dx, depth);\r\n                                }\r\n                                else {\r\n                                    //one more go\r\n                                    var transformed = trigTransform(symbols);\r\n                                    retval = __.integrate(_.expand(transformed), dx, depth);\r\n                                }\r\n                            }\r\n\r\n                        }\r\n\r\n                        retval = _.multiply(retval, coeff);\r\n                    }\r\n                    //if an integral was found then we return it\r\n                    if(retval)\r\n                        return retval;\r\n                }\r\n\r\n                catch(error) {\r\n                    //do nothing if it's a NoIntegralFound error otherwise let it bubble\r\n                    if(!(error instanceof NoIntegralFound || error instanceof core.exceptions.DivisionByZero))\r\n                        throw error;\r\n                }\r\n\r\n                //no symbol found so we return the integral again\r\n                return _.symfunction('integrate', [original_symbol, dt]);\r\n            }, false);\r\n        },\r\n        defint: function (symbol, from, to, dx) {\r\n            dx = dx || 'x'; //make x the default variable of integration\r\n            var get_value = function (integral, vars, point) {\r\n                try {\r\n                    return _.parse(integral, vars);\r\n                }\r\n                catch(e) {\r\n                    //it failed for some reason so return the limit\r\n                    var lim = __.Limit.limit(integral, dx, point);\r\n                    return lim;\r\n                }\r\n            };\r\n\r\n            var vars = core.Utils.variables(symbol),\r\n                    hasTrig = symbol.hasTrig();\r\n            var retval, integral;\r\n\r\n            // Fix #593 - Only assume the first variable if dx is not defined.\r\n            if(vars.length === 1 && !dx)\r\n                dx = vars[0];\r\n\r\n            if(!hasTrig) {\r\n                integral = __.integrate(symbol, dx);\r\n            }\r\n\r\n            if(!hasTrig && !integral.hasIntegral()) {\r\n                var upper = {},\r\n                        lower = {},\r\n                        a, b;\r\n                upper[dx] = to;\r\n                lower[dx] = from;\r\n\r\n                a = get_value(integral, upper, to, dx);\r\n                b = get_value(integral, lower, from, dx);\r\n                retval = _.subtract(a, b);\r\n            }\r\n            else if(vars.length === 1 && from.isConstant() && to.isConstant()) {\r\n\r\n                var f = core.Utils.build(symbol);\r\n                retval = new Symbol(core.Math2.num_integrate(f, Number(from), Number(to)));\r\n            }\r\n            else\r\n                retval = _.symfunction('defint', [symbol, from, to, dx]);\r\n            return retval;\r\n        },\r\n\r\n        Limit: {\r\n            interval: function (start, end) {\r\n                return _.parse(format('[{0}, {1}]', start, end));\r\n            },\r\n            diverges: function () {\r\n                return __.Limit.interval('-Infinity', 'Infinity');\r\n            },\r\n            divide: function (f, g, x, lim, depth) {\r\n                if(depth++ > Settings.max_lim_depth) {\r\n                    return;\r\n                }\r\n\r\n                var fin = f.clone(), gin = g.clone();\r\n\r\n                //But first a little \"cheating\". x/|x| ends up in an infinite loop since the d/dx |x| -> x/|x|\r\n                //To break this loop we simply provide the answer. Keep in mind that currently limit only provides\r\n                //the two-sided limit.\r\n                //Known limit\r\n                if(g.fname === ABS) {\r\n                    var sign = f.sign();\r\n                    var lim_sign = lim.sign();\r\n\r\n                    if(lim.isInfinity)\r\n                        return _.multiply(new Symbol(sign), new Symbol(lim_sign));\r\n\r\n                    else if(lim.equals(0)) {\r\n                        var fm = _.parse(f.multiplier);\r\n                        var gm = _.parse(g.multiplier);\r\n                        return _.divide(_.multiply(fm, __.Limit.interval('-1', '1')), gm);\r\n                    }\r\n                    else {\r\n                        //TODO: Support more limits\r\n                        __.Limit.diverges();\r\n                    }\r\n                }\r\n\r\n                var isInfinity = function (L) {\r\n                    if(core.Utils.isVector(L)) {\r\n                        for(var i = 0; i < L.elements.length; i++)\r\n                            if(!L.elements[i].isInfinity)\r\n                                return false;\r\n                        return true;\r\n                    }\r\n                    return L.isInfinity;\r\n                };\r\n\r\n                var equals = function (L, v) {\r\n                    if(core.Utils.isVector(L)) {\r\n                        return false;\r\n                    }\r\n                    return L.equals(v);\r\n                };\r\n\r\n                var retval;\r\n                do {\r\n                    var lim1 = evaluate(__.Limit.limit(f.clone(), x, lim, depth));\r\n                    var lim2 = evaluate(__.Limit.limit(g.clone(), x, lim, depth));\r\n\r\n                    //if it's in indeterminate form apply L'Hospital's rule\r\n                    var indeterminate = isInfinity(lim1) && isInfinity(lim2) || equals(lim1, 0) && equals(lim2, 0);\r\n                    //pull the derivatives\r\n                    if(indeterminate) {\r\n                        var ft = __.diff(f.clone(), x);\r\n                        var gt = __.diff(g.clone(), x);\r\n\r\n                        var t_symbol = _.expand(_.divide(ft, gt));\r\n                        f = t_symbol.getNum();\r\n                        g = t_symbol.getDenom();\r\n\r\n                    }\r\n                }\r\n                while(indeterminate)\r\n\r\n                //REMEMBER: \r\n                //- 1/cos(x)\r\n                //n/0 is still possible since we only checked for 0/0\r\n                var den_is_zero = lim2.equals(0);\r\n                var p = Number(gin.power);\r\n\r\n                if(lim.isConstant(true) && den_is_zero) {\r\n                    retval = Symbol.infinity(core.Utils.even(p) && lim1.lessThan(0) ? -1 : undefined);\r\n                }\r\n                else if(den_is_zero) {\r\n                    retval = __.Limit.diverges();\r\n                }\r\n                else {\r\n                    retval = _.divide(lim1, lim2);\r\n                }\r\n\r\n                return retval;\r\n            },\r\n            rewriteToLog: function (symbol) {\r\n                var p = symbol.power.clone();\r\n                symbol.toLinear();\r\n                return _.pow(new Symbol('e'), _.multiply(p, _.symfunction(Settings.LOG + '', [symbol])));\r\n            },\r\n            getSubbed: function (f, x, lim) {\r\n                var retval;\r\n                //1. rewrite EX with base e\r\n                if(f.group === EX) {\r\n                    f = __.rewriteToLog(f);\r\n                }\r\n                //2. try simple substitution\r\n                try {\r\n                    retval = f.sub(x, lim);\r\n                }\r\n                catch(e) {\r\n                    //Nope. No go, so just return the unsubbed function so we can test the limit instead.\r\n                    retval = f;\r\n                }\r\n\r\n                return retval;\r\n            },\r\n            isInterval: function (limit) {\r\n                return core.Utils.isVector(limit);\r\n            },\r\n            isConvergent: function (limit) {\r\n                //it's not convergent if it lies on the interval -Infinity to Infinity\r\n                if(\r\n                        //It lies on the interval -Infinity to Infinity\r\n                        __.Limit.isInterval(limit) && limit.elements[0].isInfinity && limit.elements[1].isInfinity ||\r\n                        //We weren't able to calculate the limit\r\n                        limit.containsFunction('limit')\r\n                        ) {\r\n                    return false; //Then no\r\n                }\r\n                return true; //It is\r\n            },\r\n            limit: function (symbol, x, lim, depth) {\r\n                //Simplify the symbol\r\n                if(symbol.isLinear() && symbol.isComposite()) {\r\n\r\n                    //Apply sum of limits\r\n                    var limit = new Symbol(0);\r\n                    symbol.each(function (s) {\r\n                        limit = _.add(limit, __.Limit.limit(s, x, lim, depth));\r\n                    }, true);\r\n\r\n                    return limit;\r\n                }\r\n                ;\r\n\r\n                symbol = core.Algebra.Simplify.simplify(symbol);\r\n\r\n                depth = depth || 1;\r\n\r\n                if(depth++ > Settings.max_lim_depth) {\r\n                    return;\r\n                }\r\n\r\n                //store the multiplier\r\n                var m = _.parse(symbol.multiplier);\r\n                //strip the multiplier\r\n                symbol.toUnitMultiplier();\r\n                try {\r\n                    //https://en.wikipedia.org/wiki/List_of_limits\r\n                    var retval;\r\n                    //we try the simplest option first where c is some limit\r\n                    //lim a as x->c = a where c \r\n                    if(symbol.isConstant(true)) {\r\n                        retval = symbol;\r\n                    }\r\n                    else {\r\n                        var point = {};\r\n                        point[x] = lim;\r\n                        //lim x as x->c = c where c\r\n\r\n                        try {\r\n\r\n                            //evaluate the function at the given limit\r\n                            var t = _.parse(symbol.sub(x, lim), point);\r\n\r\n                            //a constant or infinity is known so we're done\r\n                            if(t.isConstant(true) || t.isInfinity)\r\n                                retval = t;\r\n\r\n                        }\r\n                        catch(e) { /*Nothing. Maybe we tried to divide by zero.*/\r\n                        }\r\n                        ;\r\n\r\n                        if(!retval) {\r\n                            //split the symbol in the numerator and the denominator\r\n                            var num = symbol.getNum();\r\n                            var den = symbol.getDenom();\r\n\r\n                            if(den.isConstant(true)) {\r\n                                //We still don't have a limit so we generate tests.\r\n                                if(symbol.group === EX) {\r\n                                    //https://en.wikipedia.org/wiki/List_of_limits\r\n                                    //Speed boost for exponentials by detecting patterns\r\n                                    var f = symbol.clone().toLinear();\r\n                                    var p = symbol.power.clone();\r\n                                    var _num = f.getNum();\r\n                                    var _den = f.getDenom();\r\n                                    var fn = core.Utils.decompose_fn(_den, x, true);\r\n                                    //start detection of pattern (x/(x+1))^x\r\n                                    if(_num.group === S && _num.multiplier.isOne() && fn.ax.group === S && fn.b.isConstant(true) && fn.a.isOne() && fn.b.isConstant(true)) {\r\n                                        retval = _.parse(format('(1/e^({0}))', fn.b));\r\n                                    }\r\n                                    else {\r\n                                        var symbol_ = __.Limit.rewriteToLog(symbol.clone());\r\n                                        //get the base\r\n                                        var pow = symbol_.power.clone();\r\n                                        var base = symbol_.clone().toLinear();\r\n                                        var lim_base = __.Limit.limit(base, x, lim, depth);\r\n                                        var lim_pow = __.Limit.limit(pow, x, lim, depth);\r\n                                        retval = _.pow(lim_base, lim_pow);\r\n                                    }\r\n                                }\r\n                                else if(symbol.group === FN && symbol.args.length === 1) {\r\n                                    var evaluates;\r\n                                    //Squeeze theorem lim f(g(x)) = lim f(lim g))\r\n                                    var arg = __.Limit.limit(symbol.args[0], x, lim, depth);\r\n                                    if(core.Utils.isVector(arg)) {\r\n                                        //get the limit over that interval\r\n                                        retval = arg.map(function (e) {\r\n                                            var clone = symbol.clone();\r\n                                            clone.args[0] = e;\r\n                                            return __.Limit.limit(_.symfunction(symbol.fname, [e]), x, lim, depth);\r\n                                        });\r\n\r\n                                        return _.multiply(m, retval);\r\n                                    }\r\n                                    //if the argument is constant then we're done\r\n                                    else if(arg.isConstant(true)) {\r\n\r\n                                        //double check that it evaluates\r\n                                        var trial = _.symfunction(symbol.fname, [arg]);\r\n                                        //trial evaluation\r\n                                        try {\r\n                                            evaluate(trial);\r\n                                            evaluates = true;\r\n                                        }\r\n                                        catch(e) {\r\n\r\n                                            evaluates = false;\r\n                                        }\r\n                                    }\r\n                                    if(evaluates) {\r\n                                        retval = trial;\r\n                                    }\r\n                                    else {\r\n                                        //if the limit converges. We'll deal with non-convergent ones later\r\n                                        if(__.Limit.isConvergent(arg)) {\r\n                                            if(symbol.fname === LOG) {\r\n                                                switch(arg.toString()) {\r\n                                                    //lim -> 0\r\n                                                    case '0':\r\n                                                        retval = Symbol.infinity().negate();\r\n                                                        break;\r\n                                                    case 'Infinity':\r\n                                                        retval = Symbol.infinity();\r\n                                                        break;\r\n                                                    case '-Infinity':\r\n                                                        retval = Symbol.infinity();\r\n                                                        break;\r\n                                                }\r\n                                            }\r\n                                            else if((symbol.fname === COS || symbol.fname === SIN) && lim.isInfinity) {\r\n                                                retval = __.Limit.interval(-1, 1);\r\n                                            }\r\n                                            else if((symbol.fname === TAN)) {\r\n                                                var s_arg = symbol.args[0];\r\n                                                var n = s_arg.getNum();\r\n                                                var d = s_arg.getDenom();\r\n                                                var pi = n.toUnitMultiplier();\r\n                                                if(lim.isInfinity || pi.equals('pi') && d.equals(2)) {\r\n                                                    retval = divergent();\r\n                                                }\r\n                                            }\r\n                                            else if(symbol.fname === Settings.FACTORIAL) {\r\n                                                if(arg.isInfinity)\r\n                                                    return Symbol.infinity();\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                                else if(symbol.group === S) {\r\n                                    if(symbol.power > 0)\r\n                                        //these functions always converge to the limit\r\n                                        return _.parse(symbol, point);\r\n                                    else {\r\n                                        //we're dealing with 1/x^n but remember that infinity has already been dealt\r\n                                        //with by substitution\r\n                                        if(core.Utils.even(symbol.power)) {\r\n                                            //even powers converge to infinity\r\n                                            retval = Symbol.infinity();\r\n                                        }\r\n                                        else {\r\n                                            //odd ones don't\r\n                                            retval = __.Limit.diverges();\r\n                                        }\r\n                                    }\r\n                                }\r\n                                else if(symbol.group === CB) {\r\n\r\n                                    var lim1, lim2;\r\n                                    //loop through all the symbols\r\n                                    //thus => lim f*g*h = lim (f*g)*h = (lim f*g)*(lim h)\r\n                                    //symbols of lower groups are generally easier to differentiatee so get them to the right by first sorting\r\n                                    var symbols = symbol.collectSymbols().sort(function (a, b) {\r\n                                        return a.group - b.group;\r\n                                    });\r\n\r\n                                    var f = symbols.pop();\r\n                                    //calculate the first limit so we can keep going down the list\r\n                                    lim1 = evaluate(__.Limit.limit(f, x, lim, depth));\r\n\r\n                                    //reduces all the limits one at a time\r\n                                    while(symbols.length) {\r\n                                        //get the second limit\r\n                                        var g = symbols.pop();\r\n                                        //get the limit of g\r\n                                        lim2 = evaluate(__.Limit.limit(g, x, lim, depth));\r\n\r\n                                        //if the limit is in indeterminate form aplly L'Hospital by inverting g and then f/(1/g)\r\n                                        if((lim1.isInfinity || !__.Limit.isConvergent(lim1) && lim2.equals(0) || lim1.equals(0) && __.Limit.isConvergent(lim2))) {\r\n                                            if(g.containsFunction(LOG)) {\r\n                                                //swap them\r\n                                                g = [f, f = g][0];\r\n                                            }\r\n                                            //invert the symbol\r\n                                            g.invert();\r\n\r\n                                            // Product of infinities\r\n                                            if(lim1.isInfinity && lim2.isInfinity) {\r\n                                                lim1 = Symbol.infinity()\r\n                                            }\r\n                                            else {\r\n                                                lim1 = __.Limit.divide(f, g, x, lim, depth);\r\n                                            }\r\n                                        }\r\n                                        else {\r\n                                            //lim f*g = (lim f)*(lim g)\r\n                                            lim1 = _.multiply(lim1, lim2);\r\n                                            //let f*g equal f and h equal g \r\n                                            f = _.multiply(f, g);\r\n                                        }\r\n                                    }\r\n\r\n                                    //Done, lim1 is the limit we're looking for     \r\n                                    retval = lim1;\r\n                                }\r\n                                else if(symbol.isComposite()) {\r\n                                    var _lim;\r\n                                    if(!symbol.isLinear())\r\n                                        symbol = _.expand(symbol);\r\n                                    //Apply lim f+g = (lim f)+(lim g)\r\n                                    retval = new Symbol(0);\r\n\r\n                                    var symbols = symbol.collectSymbols().sort(function (a, b) {\r\n                                        return b.group - a.group;\r\n                                    });\r\n\r\n                                    var _symbols = [];\r\n                                    //Analyze the functions first\r\n                                    var fns = new Symbol(0);\r\n                                    for(var i = 0, l = symbols.length; i < l; i++) {\r\n                                        var sym = symbols[i].clone();\r\n                                        if(sym.group === FN || sym.group === CB && sym.hasFunc()) {\r\n                                            fns = _.add(fns, sym);\r\n                                        }\r\n                                        else\r\n                                            _symbols.push(sym);\r\n                                    }\r\n                                    _symbols.unshift(fns);\r\n\r\n                                    //make sure that we didn't just repackage the exact same symbol\r\n                                    if(_symbols.length !== 1) {\r\n                                        symbols = _symbols;\r\n                                    }\r\n\r\n                                    for(var i = 0, l = symbols.length; i < l; i++) {\r\n                                        var sym = symbols[i];\r\n                                        //If the addition of the limits is undefined then the limit diverges so return -infinity to infinity\r\n                                        try {\r\n                                            _lim = __.Limit.limit(sym, x, lim, depth);\r\n                                        }\r\n                                        catch(e) {\r\n                                            _lim = __.Limit.diverges();\r\n                                        }\r\n\r\n                                        try {\r\n                                            retval = _.add(retval, _lim);\r\n                                        }\r\n                                        catch(e) {\r\n                                            if(depth++ > Settings.max_lim_depth) {\r\n                                                return;\r\n                                            }\r\n                                            ;\r\n                                            retval = __.Limit.limit(__.diff(symbol, x), x, lim, depth);\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            else {\r\n                                retval = __.Limit.divide(num, den, x, lim, depth);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    //if we still don't have a solution\r\n                    if(!retval)\r\n                        //return it symbolically\r\n                        retval = _.symfunction('limit', [symbol, x, lim]);\r\n                }\r\n                catch(e) {\r\n                    //if all else fails return the symbolic function\r\n                    retval = _.symfunction('limit', [symbol, x, lim]);\r\n                }\r\n\r\n                return _.multiply(m, retval);\r\n            }\r\n        },\r\n        Fresnel: {\r\n            S: function (x) {\r\n                if(x.isConstant(true)) {\r\n                    return __.defint(_.parse('sin(pi*x^2/2)'), Symbol(0), x, 'x');\r\n                }\r\n                return _.symfunction('S', arguments);\r\n            },\r\n            C: function (x) {\r\n                if(x.isConstant(true)) {\r\n                    return __.defint(_.parse('cos(pi*x^2/2)'), Symbol(0), x, 'x');\r\n                }\r\n                return _.symfunction('C', arguments);\r\n            }\r\n        }\r\n    };\r\n\r\n    nerdamer.register([\r\n        {\r\n            name: 'diff',\r\n            visible: true,\r\n            numargs: [1, 3],\r\n            build: function () {\r\n                return __.diff;\r\n            }\r\n        },\r\n        {\r\n            name: 'sum',\r\n            visible: true,\r\n            numargs: 4,\r\n            build: function () {\r\n                return __.sum;\r\n            }\r\n        },\r\n        {\r\n            name: 'product',\r\n            visible: true,\r\n            numargs: 4,\r\n            build: function () {\r\n                return __.product;\r\n            }\r\n        },\r\n        {\r\n            name: 'integrate',\r\n            visible: true,\r\n            numargs: [1, 2],\r\n            build: function () {\r\n                return __.integrate;\r\n            }\r\n        },\r\n        {\r\n            name: 'defint',\r\n            visible: true,\r\n            numargs: [3, 4],\r\n            build: function () {\r\n                return __.defint;\r\n            }\r\n        },\r\n        {\r\n            name: 'S',\r\n            visible: true,\r\n            numargs: 1,\r\n            build: function () {\r\n                return __.Fresnel.S;\r\n            }\r\n        },\r\n        {\r\n            name: 'C',\r\n            visible: true,\r\n            numargs: 1,\r\n            build: function () {\r\n                return __.Fresnel.C;\r\n            }\r\n        },\r\n        {\r\n            name: 'limit',\r\n            visible: true,\r\n            numargs: [3, 4],\r\n            build: function () {\r\n                return __.Limit.limit;\r\n            }\r\n        }\r\n    ]);\r\n    //link registered functions externally\r\n    nerdamer.updateAPI();\r\n\r\n})();","/*\r\n * Author : Martin Donk\r\n * Website : http://www.nerdamer.com\r\n * Email : martin.r.donk@gmail.com\r\n * License : MIT\r\n * Source : https://github.com/jiggzson/nerdamer\r\n */\r\n\r\n/* global module */\r\n\r\nif((typeof module) !== 'undefined') {\r\n    var nerdamer = require('./nerdamer.core.js');\r\n    require('./Calculus');\r\n    require('./Algebra');\r\n}\r\n\r\n(function () {\r\n    \"use strict\";\r\n\r\n    var core = nerdamer.getCore(),\r\n            _ = core.PARSER,\r\n            Symbol = core.Symbol,\r\n            format = core.Utils.format,\r\n            isVector = core.Utils.isVector,\r\n            isArray = core.Utils.isArray,\r\n            Vector = core.Vector,\r\n            S = core.groups.S,\r\n            EX = core.groups.EX,\r\n            CP = core.groups.CP,\r\n            CB = core.groups.CB,\r\n            FN = core.groups.FN;\r\n    core.Settings.Laplace_integration_depth = 40;\r\n\r\n\r\n    Symbol.prototype.findFunction = function (fname) {\r\n        //this is what we're looking for\r\n        if(this.group === FN && this.fname === fname)\r\n            return this.clone();\r\n        var found;\r\n        if(this.symbols)\r\n            for(var x in this.symbols) {\r\n                found = this.symbols[x].findFunction(fname);\r\n                if(found)\r\n                    break;\r\n            }\r\n\r\n        return found;\r\n    };\r\n\r\n    var __ = core.Extra = {\r\n        version: '1.4.2',\r\n        //http://integral-table.com/downloads/LaplaceTable.pdf\r\n        //Laplace assumes all coefficients to be positive\r\n        LaPlace: {\r\n            //Using: integral_0^oo f(t)*e^(-s*t) dt\r\n            transform: function (symbol, t, s) {\r\n                symbol = symbol.clone();\r\n\r\n                t = t.toString();\r\n                //First try a lookup for a speed boost\r\n                symbol = Symbol.unwrapSQRT(symbol, true);\r\n                var retval,\r\n                        coeff = symbol.stripVar(t),\r\n                        g = symbol.group;\r\n\r\n                symbol = _.divide(symbol, coeff.clone());\r\n\r\n                if(symbol.isConstant() || !symbol.contains(t, true)) {\r\n                    retval = _.parse(format('({0})/({1})', symbol, s));\r\n                }\r\n                else if(g === S && core.Utils.isInt(symbol.power)) {\r\n                    var n = String(symbol.power);\r\n                    retval = _.parse(format('factorial({0})/({1})^({0}+1)', n, s));\r\n                }\r\n                else if(symbol.group === S && symbol.power.equals(1 / 2)) {\r\n                    retval = _.parse(format('sqrt(pi)/(2*({0})^(3/2))', s));\r\n                }\r\n                else if(symbol.isComposite()) {\r\n                    retval = new Symbol(0);\r\n                    symbol.each(function (x) {\r\n                        retval = _.add(retval, __.LaPlace.transform(x, t, s));\r\n                    }, true);\r\n                }\r\n                else if(symbol.isE() && (symbol.power.group === S || symbol.power.group === CB)) {\r\n                    var a = symbol.power.stripVar(t);\r\n                    retval = _.parse(format('1/(({1})-({0}))', a, s));\r\n                }\r\n                else {\r\n                    var fns = ['sin', 'cos', 'sinh', 'cosh'];\r\n                    //support for symbols in fns with arguments in the form a*t or n*t where a = symbolic and n = Number\r\n                    if(symbol.group === FN && fns.indexOf(symbol.fname) !== -1 && (symbol.args[0].group === S || symbol.args[0].group === CB)) {\r\n                        var a = symbol.args[0].stripVar(t);\r\n\r\n                        switch(symbol.fname) {\r\n                            case 'sin':\r\n                                retval = _.parse(format('({0})/(({1})^2+({0})^2)', a, s));\r\n                                break;\r\n                            case 'cos':\r\n                                retval = _.parse(format('({1})/(({1})^2+({0})^2)', a, s));\r\n                                break;\r\n                            case 'sinh':\r\n                                retval = _.parse(format('({0})/(({1})^2-({0})^2)', a, s));\r\n                                break;\r\n                            case 'cosh':\r\n                                retval = _.parse(format('({1})/(({1})^2-({0})^2)', a, s));\r\n                                break;\r\n                        }\r\n\r\n                    }\r\n                    else {\r\n                        //Try to integrate for a solution\r\n                        //we need at least the Laplace integration depth\r\n                        var depth_is_lower = core.Settings.integration_depth < core.Settings.Laplace_integration_depth;\r\n\r\n                        if(depth_is_lower) {\r\n                            var integration_depth = core.Settings.integration_depth; //save the depth\r\n                            core.Settings.integration_depth = core.Settings.Laplace_integration_depth; //transforms need a little more room\r\n                        }\r\n\r\n                        core.Utils.block('PARSE2NUMBER', function () {\r\n                            var u = t;\r\n                            var sym = symbol.sub(t, u);\r\n                            var integration_expr = _.parse('e^(-' + s + '*' + u + ')*' + sym);\r\n                            retval = core.Calculus.integrate(integration_expr, u);\r\n                            if(retval.hasIntegral())\r\n                                return _.symfunction('laplace', arguments);\r\n//                                _.error('Unable to compute transform');\r\n                            retval = retval.sub(t, 0);\r\n                            retval = _.expand(_.multiply(retval, new Symbol(-1)));\r\n                            retval = retval.sub(u, t);\r\n                        }, false);\r\n\r\n                        retval = core.Utils.block('PARSE2NUMBER', function () {\r\n                            return _.parse(retval);\r\n                        }, true);\r\n\r\n                        if(depth_is_lower)//put the integration depth as it was\r\n                            core.Settings.integration_depth = integration_depth;\r\n                    }\r\n\r\n                }\r\n\r\n                return _.multiply(retval, coeff);\r\n            },\r\n            inverse: function (symbol, s_, t) {\r\n                var input_symbol = symbol.clone();\r\n                return core.Utils.block('POSITIVE_MULTIPLIERS', function () {\r\n                    //expand and get partial fractions\r\n                    if(symbol.group === CB) {\r\n                        symbol = core.Algebra.PartFrac.partfrac(_.expand(symbol), s_);\r\n                    }\r\n\r\n                    if(symbol.group === S || symbol.group === CB || symbol.isComposite()) {\r\n                        var finalize = function () {\r\n                            //put back the numerator\r\n                            retval = _.multiply(retval, num);\r\n                            retval.multiplier = retval.multiplier.multiply(symbol.multiplier);\r\n                            //put back a\r\n                            retval = _.divide(retval, f.a);\r\n                        };\r\n                        var num, den, s, retval, f, p, m, den_p, fe;\r\n                        //remove the multiplier\r\n                        m = symbol.multiplier.clone();\r\n                        symbol.toUnitMultiplier();\r\n                        //get the numerator and denominator\r\n                        num = symbol.getNum();\r\n                        den = symbol.getDenom().toUnitMultiplier();\r\n\r\n                        //TODO: Make it so factor doesn't destroy pi\r\n                        //num = core.Algebra.Factor.factor(symbol.getNum());\r\n                        //den = core.Algebra.Factor.factor(symbol.getDenom().invert(null, true));\r\n\r\n                        if(den.group === CP) {\r\n                            den_p = den.power.clone();\r\n                            den.toLinear();\r\n                        }\r\n                        else {\r\n                            den_p = new core.Frac(1);\r\n                        }\r\n\r\n                        //convert s to a string\r\n                        s = s_.toString();\r\n                        //split up the denominator if in the form ax+b\r\n                        f = core.Utils.decompose_fn(den, s, true);\r\n                        //move the multiplier to the numerator\r\n                        fe = core.Utils.decompose_fn(_.expand(num.clone()), s, true);\r\n                        num.multiplier = num.multiplier.multiply(m);\r\n                        //store the parts in variables for easy recognition \r\n                        //check if in the form t^n where n = integer\r\n                        if((den.group === S || den.group === CB) && f.x.value === s && f.b.equals(0) && core.Utils.isInt(f.x.power)) {\r\n                            var fact, p;\r\n                            p = f.x.power - 1;\r\n                            fact = core.Math2.factorial(p);\r\n                            //  n!/s^(n-1)\r\n                            retval = _.divide(_.pow(t, new Symbol(p)), new Symbol(fact));\r\n                            //wrap it up\r\n                            finalize();\r\n                        }\r\n                        else if(den.group === CP && den_p.equals(1)) {\r\n                            if(f.x.group === core.groups.PL && core.Algebra.degree(den).equals(2)) {\r\n                                // Possibly in the form 1/(s^2+2*s+1)\r\n                                // Try factoring to get it in a more familiar form{\r\n                                // Apply inverse of F(s-a)\r\n                                var completed = core.Algebra.sqComplete(den, s);\r\n                                var u = core.Utils.getU(den);\r\n                                // Get a for the function above\r\n                                var a = core.Utils.decompose_fn(completed.a, s, true).b;\r\n                                var tf = __.LaPlace.inverse(_.parse(`1/((${u})^2+(${completed.c}))`), u, t);\r\n                                retval = _.multiply(tf, _.parse(`(${m})*e^(-(${a})*(${t}))`));\r\n                            }\r\n                            else {\r\n                                // a/(b*s-c) -> ae^(-bt)\r\n                                if(f.x.isLinear() && !num.contains(s)) {\r\n                                    t = _.divide(t, f.a.clone());\r\n\r\n                                    // Don't add factorial of one or zero\r\n                                    var p = den_p - 1;\r\n                                    var fact = p === 0 || p === 1 ? '1' : `(${den_p}-1)!`\r\n                                    retval = _.parse(format('(({0})^({3}-1)*e^(-(({2})*({0}))/({1})))/(({4})*({1})^({3}))', t, f.a, f.b, den_p, fact));\r\n                                    //wrap it up\r\n                                    finalize();\r\n                                }\r\n                                else {\r\n                                    if(f.x.group === S && f.x.power.equals(2)) {\r\n                                        if(!num.contains(s)) {\r\n                                            retval = _.parse(format('(({1})*sin((sqrt(({2})*({3}))*({0}))/({2})))/sqrt(({2})*({3}))', t, num, f.a, f.b));\r\n                                        }\r\n                                        // a*s/(b*s^2+c^2)\r\n                                        else {\r\n                                            var a = new Symbol(1);\r\n                                            if(num.group === CB) {\r\n                                                var new_num = new Symbol(1);\r\n                                                num.each(function (x) {\r\n                                                    if(x.contains(s))\r\n                                                        new_num = _.multiply(new_num, x);\r\n                                                    else\r\n                                                        a = _.multiply(a, x);\r\n                                                });\r\n                                                num = new_num;\r\n                                            }\r\n\r\n                                            //we need more information about the denominator to decide\r\n                                            var f2 = core.Utils.decompose_fn(num, s, true);\r\n                                            var fn1, fn2, a_has_sin, b_has_cos, a_has_cos, b_has_sin;\r\n                                            fn1 = f2.a;\r\n                                            fn2 = f2.b;\r\n                                            a_has_sin = fn1.containsFunction('sin');\r\n                                            a_has_cos = fn1.containsFunction('cos');\r\n                                            b_has_cos = fn2.containsFunction('cos');\r\n                                            b_has_sin = fn2.containsFunction('sin');\r\n                                            if(f2.x.value === s && f2.x.isLinear() && !((a_has_sin && b_has_cos) || (a_has_cos || b_has_sin))) {\r\n                                                retval = _.parse(format('(({1})*cos((sqrt(({2})*({3}))*({0}))/({2})))/({2})', t, f2.a, f.a, f.b));\r\n                                            }\r\n                                            else {\r\n                                                if(a_has_sin && b_has_cos) {\r\n                                                    var sin, cos;\r\n                                                    sin = fn1.findFunction('sin');\r\n                                                    cos = fn2.findFunction('cos');\r\n                                                    //who has the s?\r\n                                                    if(sin.args[0].equals(cos.args[0]) && !sin.args[0].contains(s)) {\r\n                                                        var b, c, d, e;\r\n                                                        b = _.divide(fn2, cos.toUnitMultiplier()).toString();\r\n                                                        c = sin.args[0].toString();\r\n                                                        d = f.b;\r\n                                                        e = _.divide(fn1, sin.toUnitMultiplier());\r\n                                                        exp = '(({1})*({2})*cos({3})*sin(sqrt({4})*({0})))/sqrt({4})+({1})*sin({3})*({5})*cos(sqrt({4})*({0}))';\r\n                                                        retval = _.parse(format(exp, t, a, b, c, d, e));\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        else if(f.x.power.num && f.x.power.num.equals(3) && f.x.power.den.equals(2) && num.contains('sqrt(pi)') && !num.contains(s) && num.isLinear()) {\r\n                            var b = _.divide(num.clone(), _.parse('sqrt(pi)'));\r\n                            retval = _.parse(format('(2*({2})*sqrt({0}))/({1})', t, f.a, b, num));\r\n                        }\r\n                        else if(den_p.equals(2) && f.x.power.equals(2)) {\r\n                            var a, d, exp;\r\n                            if(!num.contains(s)) {\r\n                                a = _.divide(num, new Symbol(2));\r\n                                exp = '(({1})*sin((sqrt(({2})*({3}))*({0}))/({2})))/(({3})*sqrt(({2})*({3})))-(({1})*({0})*cos((sqrt(({2})*({3}))*({0}))/({2})))/(({2})*({3}))';\r\n                                retval = _.parse(format(exp, t, a, f.a, f.b));\r\n                            }\r\n                            else {\r\n                                // Decompose the numerator to check value of s\r\n                                f2 = core.Utils.decompose_fn(_.expand(num.clone()), s, true);\r\n                                if(f2.x.isComposite()) {\r\n                                    var s_terms = [];\r\n                                    //first collect the factors e.g. (a)(bx)(cx^2+d)\r\n                                    var symbols = num.collectSymbols(function (x) {\r\n                                        x = Symbol.unwrapPARENS(x);\r\n                                        var t = core.Utils.decompose_fn(x, s, true);\r\n                                        t.symbol = x;\r\n                                        return t;\r\n                                    }).\r\n                                            //then sort them by power hightest to lowest\r\n                                            sort(function (a, b) {\r\n                                                var p1, p2;\r\n                                                p1 = a.x.value !== s ? 0 : a.x.power;\r\n                                                p2 = b.x.value !== s ? 0 : b.x.power;\r\n                                                return p2 - p1;\r\n                                            });\r\n                                    a = new Symbol(-1);\r\n                                    // Grab only the ones which have s\r\n                                    for(var i = 0; i < symbols.length; i++) {\r\n                                        var fc = symbols[i];\r\n                                        if(fc.x.value === s)\r\n                                            s_terms.push(fc);\r\n                                        else\r\n                                            a = _.multiply(a, fc.symbol);\r\n                                    }\r\n                                    // The following 2 assumptions are made\r\n                                    // 1. since the numerator was factored above then each s_term has a unique power\r\n                                    // 2. because the terms are sorted by descending powers then the first item \r\n                                    //    has the highest power\r\n                                    // We can now check for the next type s(s^2-a^2)/(s^2+a^2)^2\r\n                                    if(s_terms[0].x.power.equals(2) && s_terms[1].x.power.equals(1) && s_terms[1].b.equals(0) && !s_terms[0].b.equals(0)) {\r\n                                        b = s_terms[0].a.negate();\r\n                                        exp = '-(({1})*({2})*({5})*({0})*sin((sqrt(({4})*({5}))*({0}))/({4})))/' +\r\n                                                '(2*({4})^2*sqrt(({4})*({5})))-(({1})*({3})*({0})*sin((sqrt(({4})*({5}))*({0}))/({4})))' +\r\n                                                '/(2*({4})*sqrt(({4})*({5})))+(({1})*({2})*cos((sqrt(({4})*({5}))*({0}))/({4})))/({4})^2';\r\n                                        retval = _.parse(format(exp, t, a, b, s_terms[0].b, f.a, f.b));\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    if(f2.x.isLinear()) {\r\n                                        a = _.divide(f2.a, new Symbol(2));\r\n                                        exp = '(({1})*({0})*sin((sqrt(({2})*({3}))*({0}))/({2})))/(({2})*sqrt(({2})*({3})))';\r\n                                        retval = _.parse(format(exp, t, a, f.a, f.b));\r\n                                    }\r\n                                    else if(f2.x.power.equals(2)) {\r\n                                        if(f2.b.equals(0)) {\r\n                                            a = _.divide(f2.a, new Symbol(2));\r\n                                            exp = '(({1})*sin((sqrt(({2})*({3}))*({0}))/({2})))/(({2})*sqrt(({2})*({3})))+(({1})*({0})*cos((sqrt(({2})*({3}))*({0}))/({2})))/({2})^2';\r\n                                            retval = _.parse(format(exp, t, a, f.a, f.b));\r\n                                        }\r\n                                        else {\r\n                                            a = _.divide(f2.a, new Symbol(2));\r\n                                            d = f2.b.negate();\r\n                                            exp = '-((({2})*({4})-2*({1})*({3}))*sin((sqrt(({2})*({3}))*({0}))/({2})))/(2*({2})*({3})*sqrt(({2})*({3})))+' +\r\n                                                    '(({4})*({0})*cos((sqrt(({2})*({3}))*({0}))/({2})))/(2*({2})*({3}))+(({1})*({0})*cos((sqrt(({2})*({3}))*({0}))/({2})))/({2})^2';\r\n                                            retval = _.parse(format(exp, t, a, f.a, f.b, d));\r\n\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        else if(symbol.isComposite()) {\r\n                            // 1/(s+1)^2\r\n                            if(den_p.equals(2) && f.x.group === S) {\r\n                                retval = _.parse(`(${m})*(${t})*e^(-(${f.b})*(${t}))`);\r\n                            }\r\n                            else {\r\n                                retval = new Symbol(0);\r\n\r\n                                symbol.each(function (x) {\r\n                                    retval = _.add(retval, __.LaPlace.inverse(x, s_, t));\r\n                                }, true);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if(!retval) {\r\n                        retval = _.symfunction('ilt', [input_symbol, s_, t]);\r\n                    }\r\n\r\n                    return retval;\r\n                }, true);\r\n            }\r\n        },\r\n        Statistics: {\r\n            frequencyMap: function (arr) {\r\n                var map = {};\r\n                //get the frequency map\r\n                for(var i = 0, l = arr.length; i < l; i++) {\r\n                    var e = arr[i],\r\n                            key = e.toString();\r\n                    if(!map[key]) //default it to zero\r\n                        map[key] = 0;\r\n                    map[key]++; //increment\r\n                }\r\n                return map;\r\n            },\r\n            sort: function (arr) {\r\n                return arr.sort(function (a, b) {\r\n                    if(!a.isConstant() || !b.isConstant())\r\n                        _.error('Unable to sort! All values must be numeric');\r\n                    return a.multiplier.subtract(b.multiplier);\r\n                });\r\n            },\r\n            count: function (arr) {\r\n                return new Symbol(arr.length);\r\n            },\r\n            sum: function (arr, x_) {\r\n                var sum = new Symbol(0);\r\n                for(var i = 0, l = arr.length; i < l; i++) {\r\n                    var xi = arr[i].clone();\r\n                    if(x_) {\r\n                        sum = _.add(_.pow(_.subtract(xi, x_.clone()), new Symbol(2)), sum);\r\n                    }\r\n                    else\r\n                        sum = _.add(xi, sum);\r\n                }\r\n\r\n                return sum;\r\n            },\r\n            mean: function () {\r\n                var args = [].slice.call(arguments);\r\n                //handle arrays\r\n                if(isVector(args[0]))\r\n                    return __.Statistics.mean.apply(this, args[0].elements);\r\n                return  _.divide(__.Statistics.sum(args), __.Statistics.count(args));\r\n            },\r\n            median: function () {\r\n                var args = [].slice.call(arguments), retval;\r\n                //handle arrays\r\n                if(isVector(args[0]))\r\n                    return __.Statistics.median.apply(this, args[0].elements);\r\n                try {\r\n                    var sorted = __.Statistics.sort(args);\r\n                    var l = args.length;\r\n                    if(core.Utils.even(l)) {\r\n                        var mid = l / 2;\r\n                        retval = __.Statistics.mean(sorted[mid - 1], sorted[mid]);\r\n                    }\r\n                    else\r\n                        retval = sorted[Math.floor(l / 2)];\r\n                }\r\n                catch(e) {\r\n                    retval = _.symfunction('median', args);\r\n                }\r\n                return retval;\r\n            },\r\n            mode: function () {\r\n                var args = [].slice.call(arguments),\r\n                        retval;\r\n                //handle arrays\r\n                if(isVector(args[0]))\r\n                    return __.Statistics.mode.apply(this, args[0].elements);\r\n\r\n                var map = __.Statistics.frequencyMap(args);\r\n\r\n                //the mode of 1 item is that item as per issue #310 (verified by Happypig375). \r\n                if(core.Utils.keys(map).length === 1)\r\n                    retval = args[0];\r\n                else {\r\n                    //invert by arraning them according to their frequency\r\n                    var inverse = {};\r\n                    for(var x in map) {\r\n                        var freq = map[x];\r\n                        //check if it's in the inverse already\r\n                        if(!(freq in inverse))\r\n                            inverse[freq] = x;\r\n                        else {\r\n                            var e = inverse[freq];\r\n                            //if it's already an array then just add it\r\n                            if(isArray(e))\r\n                                e.push(x);\r\n                            //convert it to and array\r\n                            else\r\n                                inverse[freq] = [x, inverse[freq]];\r\n                        }\r\n                    }\r\n                    //the keys now represent the maxes. We want the max of those keys\r\n                    var max = inverse[Math.max.apply(null, core.Utils.keys(inverse))];\r\n                    //check it's an array. If it is then map over the results and convert \r\n                    //them to Symbol\r\n                    if(isArray(max)) {\r\n                        retval = _.symfunction('mode', max.sort());\r\n                    }\r\n                    else\r\n                        retval = _.parse(max);\r\n                }\r\n\r\n                return retval;\r\n            },\r\n            gVariance: function (k, args) {\r\n                var x_ = __.Statistics.mean.apply(__.Statistics, args),\r\n                        sum = __.Statistics.sum(args, x_);\r\n                return _.multiply(k, sum);\r\n            },\r\n            variance: function () {\r\n                var args = [].slice.call(arguments);\r\n                //handle arrays\r\n                if(isVector(args[0]))\r\n                    return __.Statistics.variance.apply(this, args[0].elements);\r\n                var k = _.divide(new Symbol(1), __.Statistics.count(args));\r\n                return __.Statistics.gVariance(k, args);\r\n            },\r\n            sampleVariance: function () {\r\n                var args = [].slice.call(arguments);\r\n                //handle arrays\r\n                if(isVector(args[0]))\r\n                    return __.Statistics.sampleVariance.apply(this, args[0].elements);\r\n\r\n                var k = _.divide(new Symbol(1), _.subtract(__.Statistics.count(args), new Symbol(1)));\r\n                return __.Statistics.gVariance(k, args);\r\n            },\r\n            standardDeviation: function () {\r\n                var args = [].slice.call(arguments);\r\n                //handle arrays\r\n                if(isVector(args[0]))\r\n                    return __.Statistics.standardDeviation.apply(this, args[0].elements);\r\n                return _.pow(__.Statistics.variance.apply(__.Statistics, args), new Symbol(1 / 2));\r\n            },\r\n            sampleStandardDeviation: function () {\r\n                var args = [].slice.call(arguments);\r\n                //handle arrays\r\n                if(isVector(args[0]))\r\n                    return __.Statistics.sampleStandardDeviation.apply(this, args[0].elements);\r\n                return _.pow(__.Statistics.sampleVariance.apply(__.Statistics, args), new Symbol(1 / 2));\r\n            },\r\n            zScore: function (x, mean, stdev) {\r\n                return _.divide(_.subtract(x, mean), stdev);\r\n            }\r\n        },\r\n        Units: {\r\n            table: {\r\n                foot: '12 inch',\r\n                meter: '100 cm',\r\n                decimeter: '10 cm',\r\n\r\n            }\r\n        }\r\n    };\r\n\r\n    nerdamer.register([\r\n        {\r\n            name: 'laplace',\r\n            visible: true,\r\n            numargs: 3,\r\n            build: function () {\r\n                return __.LaPlace.transform;\r\n            }\r\n        },\r\n        {\r\n            name: 'ilt',\r\n            visible: true,\r\n            numargs: 3,\r\n            build: function () {\r\n                return __.LaPlace.inverse;\r\n            }\r\n        },\r\n        //statistical\r\n        {\r\n            name: 'mean',\r\n            visible: true,\r\n            numargs: -1,\r\n            build: function () {\r\n                return __.Statistics.mean;\r\n            }\r\n        },\r\n        {\r\n            name: 'median',\r\n            visible: true,\r\n            numargs: -1,\r\n            build: function () {\r\n                return __.Statistics.median;\r\n            }\r\n        },\r\n        {\r\n            name: 'mode',\r\n            visible: true,\r\n            numargs: -1,\r\n            build: function () {\r\n                return __.Statistics.mode;\r\n            }\r\n        },\r\n        {\r\n            name: 'smpvar',\r\n            visible: true,\r\n            numargs: -1,\r\n            build: function () {\r\n                return __.Statistics.sampleVariance;\r\n            }\r\n        },\r\n        {\r\n            name: 'variance',\r\n            visible: true,\r\n            numargs: -1,\r\n            build: function () {\r\n                return __.Statistics.variance;\r\n            }\r\n        },\r\n        {\r\n            name: 'smpstdev',\r\n            visible: true,\r\n            numargs: -1,\r\n            build: function () {\r\n                return __.Statistics.sampleStandardDeviation;\r\n            }\r\n        },\r\n        {\r\n            name: 'stdev',\r\n            visible: true,\r\n            numargs: -1,\r\n            build: function () {\r\n                return __.Statistics.standardDeviation;\r\n            }\r\n        },\r\n        {\r\n            name: 'zscore',\r\n            visible: true,\r\n            numargs: 3,\r\n            build: function () {\r\n                return __.Statistics.zScore;\r\n            }\r\n        }\r\n    ]);\r\n\r\n    //link registered functions externally\r\n    nerdamer.updateAPI();\r\n}());\r\n\r\n// Added for all.min.js\r\nif((typeof module) !== 'undefined') {\r\n    module.exports = nerdamer;\r\n};","/*\r\n * Author : Martin Donk\r\n * Website : http://www.nerdamer.com\r\n * Email : martin.r.donk@gmail.com\r\n * Source : https://github.com/jiggzson/nerdamer\r\n */\r\n/* global module */\r\n\r\nif((typeof module) !== 'undefined') {\r\n    var nerdamer = require('./nerdamer.core.js');\r\n    require('./Calculus.js');\r\n    require('./Algebra.js');\r\n}\r\n\r\n(function () {\r\n    //handle imports\r\n    var core = nerdamer.getCore(),\r\n            _ = core.PARSER,\r\n            _A = core.Algebra,\r\n            _C = core.Calculus,\r\n            explode = _C.integration.decompose_arg,\r\n            evaluate = core.Utils.evaluate,\r\n            remove = core.Utils.remove,\r\n            format = core.Utils.format,\r\n            build = core.Utils.build,\r\n            knownVariable = core.Utils.knownVariable,\r\n            Symbol = core.Symbol,\r\n            isSymbol = core.Utils.isSymbol,\r\n            variables = core.Utils.variables,\r\n            S = core.groups.S,\r\n            PL = core.groups.PL,\r\n            CB = core.groups.CB,\r\n            CP = core.groups.CP,\r\n            FN = core.groups.FN,\r\n            Settings = core.Settings,\r\n            range = core.Utils.range,\r\n            isArray = core.Utils.isArray;\r\n\r\n\r\n    // The search radius for the roots\r\n    core.Settings.SOLVE_RADIUS = 1000;\r\n    // The maximum number to fish for on each side of the zero\r\n    core.Settings.ROOTS_PER_SIDE = 10;\r\n    // Covert the number to multiples of pi if possible\r\n    core.Settings.make_pi_conversions = false;\r\n    // The step size\r\n    core.Settings.STEP_SIZE = 0.1;\r\n    // The epsilon size\r\n    core.Settings.EPSILON = 1e-13;\r\n    //the maximum iterations for Newton's method\r\n    core.Settings.MAX_NEWTON_ITERATIONS = 200;\r\n    //the maximum number of time non-linear solve tries another jump point\r\n    core.Settings.MAX_NON_LINEAR_TRIES = 12;\r\n    //the amount of iterations the function will start to jump at\r\n    core.Settings.NON_LINEAR_JUMP_AT = 50;\r\n    //the size of the jump\r\n    core.Settings.NON_LINEAR_JUMP_SIZE = 100;\r\n    //the original starting point for nonlinear solving\r\n    core.Settings.NON_LINEAR_START = 0.01;\r\n    //When points are generated as starting points for Newton's method, they are sliced into small\r\n    //slices to make sure that we have convergence on the right point. This defines the \r\n    //size of the slice\r\n    core.Settings.NEWTON_SLICES = 200;\r\n    //The epsilon used in Newton's iteration\r\n    core.Settings.NEWTON_EPSILON = Number.EPSILON * 2;\r\n    //The distance in which two solutions are deemed the same\r\n    core.Settings.SOLUTION_PROXIMITY = 1e-14;\r\n    //Indicate wheter to filter the solutions are not\r\n    core.Settings.FILTER_SOLUTIONS = true;\r\n    //the maximum number of recursive calls\r\n    core.Settings.MAX_SOLVE_DEPTH = 10;\r\n    // The tolerance that's considered close enough to zero\r\n    core.Settings.ZERO_EPSILON = 1e-9;\r\n    // The maximum iteration for the bisection method incase of some JS strangeness\r\n    core.Settings.MAX_BISECTION_ITER = 2000;\r\n    // The tolerance for the bisection method\r\n    core.Settings.BI_SECTION_EPSILON = 1e-12;\r\n\r\n\r\n    core.Symbol.prototype.hasTrig = function () {\r\n        return this.containsFunction(['cos', 'sin', 'tan', 'cot', 'csc', 'sec']);\r\n    };\r\n\r\n    core.Symbol.prototype.hasNegativeTerms = function () {\r\n        if(this.isComposite()) {\r\n            for(var x in this.symbols) {\r\n                var sym = this.symbols[x];\r\n                if(sym.group === PL && sym.hasNegativeTerms() || this.symbols[x].power.lessThan(0))\r\n                    return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n\r\n    /* nerdamer version 0.7.x and up allows us to make better use of operator overloading\r\n     * As such we can have this data type be supported completely outside of the core.\r\n     * This is an equation that has a left hand side and a right hand side\r\n     */\r\n    function Equation(lhs, rhs) {\r\n        if(rhs.isConstant() && lhs.isConstant() && !lhs.equals(rhs) || lhs.equals(core.Settings.IMAGINARY) && rhs.isConstant(true) || rhs.equals(core.Settings.IMAGINARY) && lhs.isConstant(true))\r\n            throw new core.exceptions.NerdamerValueError(lhs.toString() + ' does not equal ' + rhs.toString());\r\n        this.LHS = lhs; //left hand side\r\n        this.RHS = rhs; //right and side\r\n    }\r\n    ;\r\n\r\n    //UTILS ##!!\r\n\r\n    Equation.prototype = {\r\n        toString: function () {\r\n            return this.LHS.toString() + '=' + this.RHS.toString();\r\n        },\r\n        text: function (option) {\r\n            return this.LHS.text(option) + '=' + this.RHS.text(option);\r\n        },\r\n        toLHS: function (expand) {\r\n            expand = typeof expand === 'undefined' ? true : false;\r\n            var eqn;\r\n            if(!expand) {\r\n                eqn = this.clone();\r\n            }\r\n            else {\r\n                eqn = this.removeDenom();\r\n            }\r\n            var a = eqn.LHS;\r\n            var b = eqn.RHS;\r\n            \r\n            if(a.isConstant(true) && !b.isConstant(true)) {\r\n                // Swap them to avoid confusing parser and cause an infinite loop\r\n                [a, b] = [b, a];\r\n            }\r\n            var _t = _.subtract(a, b);\r\n            var retval = expand ? _.expand(_t) : _t;\r\n            \r\n            // Quick workaround for issue #636\r\n            // This basically borrows the removeDenom method from the Equation class. \r\n            // TODO: Make this function a stand-alone function\r\n            retval = new Equation(retval, new Symbol(0)).removeDenom().LHS;\r\n            \r\n            return retval;\r\n        },\r\n        removeDenom: function () {\r\n            var a = this.LHS.clone();\r\n            var b = this.RHS.clone();\r\n            //remove the denominator on both sides\r\n            var den = _.multiply(a.getDenom(), b.getDenom());\r\n            a = _.expand(_.multiply(a, den.clone()));\r\n            b = _.expand(_.multiply(b, den));\r\n            //swap the groups\r\n            if(b.group === CP && b.group !== CP) {\r\n                var t = a;\r\n                a = b;\r\n                b = t; //swap\r\n            }\r\n\r\n            //scan to eliminate denominators\r\n            if(a.group === CB) {\r\n                var t = new Symbol(a.multiplier),\r\n                        newRHS = b.clone();\r\n                a.each(function (y) {\r\n                    if(y.power.lessThan(0))\r\n                        newRHS = _.divide(newRHS, y);\r\n                    else\r\n                        t = _.multiply(t, y);\r\n                });\r\n                a = t;\r\n                b = newRHS;\r\n\r\n            }\r\n            else if(a.group === CP) {\r\n                //the logic: loop through each and if it has a denominator then multiply it out on both ends\r\n                //and then start over\r\n                for(var x in a.symbols) {\r\n                    var sym = a.symbols[x];\r\n                    if(sym.group === CB) {\r\n                        for(var y in sym.symbols) {\r\n                            var sym2 = sym.symbols[y];\r\n                            if(sym2.power.lessThan(0)) {\r\n                                return new Equation(\r\n                                        _.expand(_.multiply(sym2.clone().toLinear(), a)),\r\n                                        _.expand(_.multiply(sym2.clone().toLinear(), b))\r\n                                        );\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return new Equation(a, b);\r\n        },\r\n        clone: function () {\r\n            return new Equation(this.LHS.clone(), this.RHS.clone());\r\n        },\r\n        sub: function (x, y) {\r\n            var clone = this.clone();\r\n            clone.LHS = clone.LHS.sub(x.clone(), y.clone());\r\n            clone.RHS = clone.RHS.sub(x.clone(), y.clone());\r\n            return clone;\r\n        },\r\n        isZero: function () {\r\n            return core.Utils.evaluate(this.toLHS()).equals(0);\r\n        },\r\n        latex: function (option) {\r\n            return [this.LHS.latex(option), this.RHS.latex(option)].join('=');\r\n        }\r\n    };\r\n    //overwrite the equals function\r\n    _.equals = function (a, b) {\r\n        return new Equation(a, b);\r\n    };\r\n\r\n    // Extend simplify\r\n    (function () {\r\n        var simplify = _.functions.simplify[0];\r\n        _.functions.simplify[0] = function (symbol) {\r\n            if(symbol instanceof Equation) {\r\n                symbol.LHS = simplify(symbol.LHS);\r\n                symbol.RHS = simplify(symbol.RHS);\r\n                return symbol;\r\n            }\r\n            // Just call the original simplify\r\n            return simplify(symbol);\r\n        };\r\n    })();\r\n\r\n    /**\r\n     * Sets two expressions equal\r\n     * @param {Symbol} symbol\r\n     * @returns {Expression}\r\n     */\r\n    core.Expression.prototype.equals = function (symbol) {\r\n        if(symbol instanceof core.Expression)\r\n            symbol = symbol.symbol; //grab the symbol if it's an expression\r\n        var eq = new Equation(this.symbol, symbol);\r\n        return eq;\r\n    };\r\n\r\n    core.Expression.prototype.solveFor = function (x) {\r\n        var symbol;\r\n        if(this.symbol instanceof Equation) {\r\n            //exit right away if we already have the answer\r\n            //check the LHS\r\n            if(this.symbol.LHS.isConstant() && this.symbol.RHS.equals(x))\r\n                return new core.Expression(this.symbol.LHS);\r\n\r\n            //check the RHS\r\n            if(this.symbol.RHS.isConstant() && this.symbol.LHS.equals(x))\r\n                return new core.Expression(this.symbol.RHS);\r\n\r\n            //otherwise just bring it to LHS\r\n            symbol = this.symbol.toLHS();\r\n        }\r\n        else {\r\n            symbol = this.symbol;\r\n        }\r\n\r\n        return solve(symbol, x).map(function (x) {\r\n            return new core.Expression(x);\r\n        });\r\n    };\r\n\r\n    core.Expression.prototype.expand = function () {\r\n        if(this.symbol instanceof Equation) {\r\n            var clone = this.symbol.clone();\r\n            clone.RHS = _.expand(clone.RHS);\r\n            clone.LHS = _.expand(clone.LHS);\r\n            return new core.Expression(clone);\r\n        }\r\n        return new core.Expression(_.expand(this.symbol));\r\n    };\r\n\r\n    core.Expression.prototype.variables = function () {\r\n        if(this.symbol instanceof Equation)\r\n            return core.Utils.arrayUnique(variables(this.symbol.LHS).concat(variables(this.symbol.RHS)));\r\n        return variables(this.symbol);\r\n    };\r\n\r\n\r\n\r\n    var setEq = function (a, b) {\r\n        return _.equals(a, b);\r\n    };\r\n\r\n    //link the Equation class back to the core\r\n    core.Equation = Equation;\r\n\r\n    //Loops through an array and attempts to fails a test. Stops if manages to fail.\r\n    var checkAll = core.Utils.checkAll = function (args, test) {\r\n        for(var i = 0; i < args.length; i++)\r\n            if(test(args[i]))\r\n                return false;\r\n        return true;\r\n    };\r\n\r\n    //version solve\r\n    var __ = core.Solve = {\r\n        version: '2.0.3',\r\n        solutions: [],\r\n        solve: function (eq, variable) {\r\n            var solution = solve(eq, String(variable));\r\n            return new core.Vector(solution);\r\n            //return new core.Vector(solve(eq.toString(), variable ? variable.toString() : variable));\r\n        },\r\n        /**\r\n         * Brings the equation to LHS. A string can be supplied which will be converted to an Equation\r\n         * @param {Equation|String} eqn\r\n         * @returns {Symbol}\r\n         */\r\n        toLHS: function (eqn, expand) {\r\n            if(isSymbol(eqn))\r\n                return eqn;\r\n            //If it's an equation then call its toLHS function instead\r\n            if(!(eqn instanceof Equation)) {\r\n                var es = eqn.split('=');\r\n                //convert falsey values to zero\r\n                es[1] = es[1] || '0';\r\n                eqn = new Equation(_.parse(es[0]), _.parse(es[1]));\r\n            }\r\n            return eqn.toLHS(expand);\r\n        },\r\n//        getSystemVariables: function(eqns) {\r\n//            vars = variables(eqns[0], null, null, true);\r\n//\r\n//            //get all variables\r\n//            for (var i = 1, l=eqns.length; i < l; i++)\r\n//                vars = vars.concat(variables(eqns[i]));\r\n//            //remove duplicates\r\n//            vars = core.Utils.arrayUnique(vars).sort();\r\n//            \r\n//            //done\r\n//            return vars;\r\n//        },\r\n        /**\r\n         * Solve a set of circle equations. \r\n         * @param {Symbol[]} eqns\r\n         * @returns {Array}\r\n         */\r\n        solveCircle: function (eqns, vars) {\r\n            // Convert the variables to symbols\r\n            var svars = vars.map(function (x) {\r\n                return _.parse(x)\r\n            });\r\n\r\n            var deg = [];\r\n\r\n            var solutions = [];\r\n\r\n            // Get the degree for the equations\r\n            for(var i = 0; i < eqns.length; i++) {\r\n                var d = [];\r\n                for(var j = 0; j < svars.length; j++) {\r\n                    d.push(Number(core.Algebra.degree(eqns[i], svars[j])));\r\n                }\r\n                // Store the total degree\r\n                d.push(core.Utils.arraySum(d, true));\r\n                deg.push(d);\r\n            }\r\n\r\n            var a = eqns[0];\r\n            var b = eqns[1];\r\n\r\n            if(deg[0][2] > deg[1][2]) {\r\n                [b, a] = [a, b];\r\n                [deg[1], deg[0]] = [deg[0], deg[1]];\r\n            }\r\n\r\n            // Only solve it's truly a circle\r\n            if(deg[0][0] === 1 && deg[0][2] === 2 && deg[1][0] === 2 && deg[1][2] === 4) {\r\n                // For clarity we'll refer to the variables as x and y\r\n                var x = vars[0];\r\n                var y = vars[1];\r\n\r\n                // We can now get the two points for y\r\n                var y_points = solve(_.parse(b, knownVariable(x, solve(_.parse(a), x)[0])), y).map(function (x) {\r\n                    return x.toString();\r\n                });\r\n\r\n                // Since we now know y we can get the two x points from the first equation\r\n                var x_points = [\r\n                    solve(_.parse(a, knownVariable(y, y_points[0])))[0].toString()\r\n                ];\r\n\r\n                if(y_points[1]) {\r\n                    x_points.push(solve(_.parse(a, knownVariable(y, y_points[1])))[0].toString());\r\n                }\r\n\r\n                if(Settings.SOLUTIONS_AS_OBJECT) {\r\n                    var solutions = {};\r\n                    solutions[x] = x_points;\r\n                    solutions[y] = y_points;\r\n                }\r\n                else {\r\n                    y_points.unshift(y);\r\n                    x_points.unshift(x);\r\n                    solutions = [x_points, y_points];\r\n                }\r\n            }\r\n\r\n            return solutions;\r\n        },\r\n        /**\r\n         * Solve a system of nonlinear equations\r\n         * @param {Symbol[]} eqns The array of equations\r\n         * @param {number} tries The maximum number of tries\r\n         * @param {number} start The starting point where to start looking for solutions\r\n         * @returns {Array}\r\n         */\r\n        solveNonLinearSystem: function (eqns, tries, start) {\r\n            if(tries < 0) {\r\n                return [];//can't find a solution\r\n            }\r\n\r\n            start = typeof start === 'undefined' ? core.Settings.NON_LINEAR_START : start;\r\n\r\n            //the maximum number of times to jump\r\n            var max_tries = core.Settings.MAX_NON_LINEAR_TRIES;\r\n\r\n            //halfway through the tries\r\n            var halfway = Math.floor(max_tries / 2);\r\n\r\n            //initialize the number of tries to 10 if not specified\r\n            tries = typeof tries === 'undefined' ? max_tries : tries;\r\n\r\n            //a point at which we check to see if we're converging. By inspection it seems that we can\r\n            //use around 20 iterations to see if we're converging. If not then we retry a jump of x\r\n            var jump_at = core.Settings.NON_LINEAR_JUMP_AT;\r\n\r\n            //we jump by this many points at each pivot point\r\n            var jump = core.Settings.NON_LINEAR_JUMP_SIZE;\r\n\r\n            //used to check if we actually found a solution or if we gave up. Assume we will find a solution.\r\n            var found = true;\r\n\r\n            var create_subs = function (vars, matrix) {\r\n                return vars.map(function (x, i) {\r\n                    return Number(matrix.get(i, 0));\r\n                });\r\n            };\r\n\r\n            var vars = core.Utils.arrayGetVariables(eqns);\r\n            var jacobian = core.Matrix.jacobian(eqns, vars, function (x) {\r\n                return build(x, vars);\r\n            }, true);\r\n\r\n            var max_iter = core.Settings.MAX_NEWTON_ITERATIONS;\r\n            var o, y, iters, xn1, norm, lnorm, xn, d;\r\n\r\n            var f_eqns = eqns.map(function (eq) {\r\n                return build(eq, vars);\r\n            });\r\n\r\n            var J = jacobian.map(function (e) {\r\n                return build(e, vars);\r\n            }, true);\r\n            //initial values\r\n            xn1 = core.Matrix.cMatrix(0, vars);\r\n\r\n            //initialize the c matrix with something close to 0. \r\n            var c = core.Matrix.cMatrix(start, vars);\r\n\r\n            iters = 0;\r\n\r\n            //start of algorithm\r\n            do {\r\n                //if we've reached the max iterations then exit\r\n                if(iters > max_iter) {\r\n                    break;\r\n                    found = false;\r\n                }\r\n\r\n                //set the substitution object\r\n                o = create_subs(vars, c);\r\n\r\n                //set xn\r\n                xn = c.clone();\r\n\r\n                //make all the substitutions for each of the equations\r\n                f_eqns.forEach(function (f, i) {\r\n                    c.set(i, 0, f.apply(null, o));\r\n                });\r\n\r\n                var m = new core.Matrix();\r\n                J.each(function (fn, i, j) {\r\n                    var ans = fn.apply(null, o);\r\n                    m.set(i, j, ans);\r\n                });\r\n\r\n                m = m.invert();\r\n\r\n                //preform the elimination\r\n                y = _.multiply(m, c).negate();\r\n\r\n                //the callback is to avoid overflow in the coeffient denonimator\r\n                //it converts it to a decimal and then back to a fraction. Some precision\r\n                //is lost be it's better than overflow. \r\n                d = y.subtract(xn1, function (x) {\r\n                    return _.parse(Number(x));\r\n                });\r\n\r\n                xn1 = xn.add(y, function (x) {\r\n                    return _.parse(Number(x));\r\n                });\r\n\r\n                //move c is now xn1\r\n                c = xn1;\r\n\r\n                //get the norm\r\n\r\n                //the expectation is that we're converging to some answer as this point regardless of where we start\r\n                //this may have to be adjusted at some point because of erroneous assumptions\r\n                if(iters >= jump_at) {\r\n                    //check the norm. If the norm is greater than one then it's time to try another point\r\n                    if(norm > 1) {\r\n                        //reset the start point at halway\r\n                        if(tries === halfway)\r\n                            start = 0;\r\n                        var sign = tries > halfway ? 1 : -1; //which side are we incrementing\r\n                        //we increment +n at one side and -n at the other. \r\n                        n = (tries % Math.floor(halfway)) + 1;\r\n                        //adjust the start point\r\n                        start += (sign * n * jump);\r\n                        //call restart\r\n                        return __.solveNonLinearSystem(eqns, --tries, start);\r\n                    }\r\n                }\r\n                lnorm = norm;\r\n                iters++;\r\n                norm = d.max();\r\n\r\n                //exit early. Revisit if we get bugs\r\n                if(Number(norm) === Number(lnorm)) {\r\n                    break;\r\n                }\r\n            }\r\n            while(Number(norm) >= Number.EPSILON)\r\n\r\n            //return a blank set if nothing was found;\r\n            if(!found)\r\n                return [];\r\n\r\n            //return c since that's the answer\r\n            return __.systemSolutions(c, vars, true, function (x) {\r\n                return core.Utils.round(Number(x), 14);\r\n            });\r\n        },\r\n        systemSolutions: function (result, vars, expand_result, callback) {\r\n            var solutions = core.Settings.SOLUTIONS_AS_OBJECT ? {} : [];\r\n\r\n            result.each(function (e, idx) {\r\n                var solution = (expand_result ? _.expand(e) : e).valueOf();\r\n                if(callback)\r\n                    solution = callback.call(e, solution);\r\n                var variable = vars[idx];\r\n                if(core.Settings.SOLUTIONS_AS_OBJECT) {\r\n                    solutions[variable] = solution;\r\n                }\r\n                else\r\n                    solutions.push([variable, solution]); /*NO*/\r\n            });\r\n            //done\r\n            return solutions;\r\n        },\r\n        /**\r\n         * Solves a system of equations by substitution. This is useful when\r\n         * no distinct solution exists. e.g. a line, plane, etc.\r\n         * @param {Array} eqns\r\n         * @returns {Array}\r\n         */\r\n        solveSystemBySubstitution: function (eqns) {\r\n            // Assume at least 2 equations. The function variables will just return an empty array if undefined is provided\r\n            var vars_a = variables(eqns[0]);\r\n            var vars_b = variables(eqns[1]);\r\n            // Check if it's a circle equation\r\n            if(eqns.length === 2 && vars_a.length === 2 && core.Utils.arrayEqual(vars_a, vars_b)) {\r\n                return __.solveCircle(eqns, vars_a);\r\n            }\r\n\r\n            return []; // return an empty set\r\n        },\r\n\r\n        //https://www.lakeheadu.ca/sites/default/files/uploads/77/docs/RemaniFinal.pdf\r\n        /**\r\n         * Solves a systems of equations\r\n         * @param {Array} eqns An array of equations\r\n         * @param {Array} var_array An array of variables\r\n         * @returns {Array|object}\r\n         */\r\n        solveSystem: function (eqns, var_array) {\r\n            //check if a var_array was specified\r\n            //nerdamer.clearVars();// this deleted ALL variables: not what we want\r\n            //parse all the equations to LHS. Remember that they come in as strings\r\n            for(var i = 0; i < eqns.length; i++)\r\n                eqns[i] = __.toLHS(eqns[i]);\r\n\r\n            var l = eqns.length,\r\n                    m = new core.Matrix(),\r\n                    c = new core.Matrix(),\r\n                    expand_result = false,\r\n                    vars;\r\n\r\n            if(typeof var_array === 'undefined') {\r\n                //check to make sure that all the equations are linear\r\n                if(!_A.allLinear(eqns)) {\r\n                    try {\r\n                        return __.solveNonLinearSystem(eqns);\r\n                    }\r\n                    catch(e) {\r\n                        if(e instanceof core.exceptions.DivisionByZero) {\r\n                            return __.solveSystemBySubstitution(eqns);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                vars = core.Utils.arrayGetVariables(eqns);\r\n                \r\n                // If the system only has one variable then we solve for the first one and \r\n                // then test the remaining equations with that solution. If any of the remaining\r\n                // equation fails then the system has no solution\r\n                if(vars.length === 1) {\r\n                    var n = 0,\r\n                        sol, e;\r\n                    do {\r\n                        var e = eqns[n].clone();\r\n                        \r\n                        if(n > 0) {\r\n                            e = e.sub(vars[0], sol[0]);\r\n                        }\r\n\r\n                        sol = solve(e, vars[0]);\r\n                        // Skip the first one\r\n                        if(n === 0) \r\n                            continue;\r\n                    }\r\n                    while(++n < eqns.length)\r\n                        \r\n                    // Format the output\r\n                    var solutions;\r\n                    if(Settings.SOLUTIONS_AS_OBJECT) {\r\n                        solutions = {};\r\n                        solutions[vars[0]] = sol;\r\n                    }\r\n                    else if(sol.length === 0) {\r\n                        solutions = sol; // No solutions\r\n                    }\r\n                    else {\r\n                        solutions = [vars[0], sol];\r\n                    }\r\n                        \r\n                    return solutions;\r\n                }\r\n                \r\n                // Deal with redundant equations as expressed in #562\r\n                // The fix is to remove all but the number of equations equal to the number\r\n                // of variables. We then solve those and then evaluate the remaining equations\r\n                // with those solutions. If the all equal true then those are just redundant\r\n                // equations and we can return the solution set.\r\n                if(vars.length < eqns.length) {\r\n                    var reduced = [];\r\n                    var n = eqns.length;\r\n                    for(var i = 0; i < n - 1; i++) {\r\n                        reduced.push(_.parse(eqns[i]));\r\n                    }\r\n\r\n                    var knowns = {};\r\n                    var solutions = __.solveSystem(reduced, vars);\r\n                    // The solutions may have come back as an array\r\n                    if(Array.isArray(solutions)) {\r\n                        solutions.forEach(function (sol) {\r\n                            knowns[sol[0]] = sol[1];\r\n                        });\r\n                    }\r\n                    else {\r\n                        knowns = solutions;\r\n                    }\r\n\r\n                    // Start by assuming they will all evaluate to zero. If even one fails\r\n                    // then all zero will be false\r\n                    var all_zero = true;\r\n                    // Check if the last solution evalutes to zero given these solutions\r\n                    for(var i = n - 1; i < n; i++) {\r\n                        if(!_.parse(eqns[i], knowns).equals(0)) {\r\n                            all_zero = false;\r\n                        }\r\n                    }\r\n\r\n                    if(all_zero) {\r\n                        return solutions;\r\n                    }\r\n                }\r\n\r\n                // deletes only the variables of the linear equations in the nerdamer namespace\r\n                for(var i = 0; i < vars.length; i++) {\r\n                    nerdamer.setVar(vars[i], \"delete\");\r\n                }\r\n                // TODO: move this to cMatrix or something similar\r\n                // populate the matrix\r\n                for(var i = 0; i < l; i++) {\r\n                    var e = eqns[i]; //store the expression\r\n                    // Iterate over the columns\r\n                    for(var j = 0; j < vars.length; j++) {\r\n                        var v = vars[j];\r\n                        var coeffs = [];\r\n                        e.each(function (x) {\r\n                            if(x.contains(v)) {\r\n                                coeffs = coeffs.concat(x.coeffs());\r\n                            }\r\n                        });\r\n\r\n                        var cf = core.Utils.arraySum(coeffs);\r\n                        m.set(i, j, cf);\r\n                    }\r\n\r\n                    //strip the variables from the symbol so we're left with only the zeroth coefficient\r\n                    //start with the symbol and remove each variable and its coefficient\r\n                    var num = e.clone();\r\n                    vars.map(function (e) {\r\n                        num = num.stripVar(e, true);\r\n                    });\r\n                    c.set(i, 0, num.negate());\r\n                }\r\n            }\r\n            else {\r\n                /**\r\n                 * The idea is that we loop through each equation and then expand it. Afterwards we loop\r\n                 * through each term and see if and check to see if it matches one of the variables.\r\n                 * When a match is found we mark it. No other match should be found for that term. If it\r\n                 * is we stop since it's not linear.\r\n                 */\r\n                vars = var_array;\r\n                expand_result = true;\r\n                for(i = 0; i < l; i++) {\r\n                    //prefill\r\n                    c.set(i, 0, new Symbol(0));\r\n                    var e = _.expand(eqns[i]).collectSymbols(); //expand and store\r\n                    //go trough each of the variables\r\n                    for(var j = 0; j < var_array.length; j++) {\r\n                        m.set(i, j, new Symbol(0));\r\n                        var v = var_array[j];\r\n                        //go through the terms and sort the variables\r\n                        for(var k = 0; k < e.length; k++) {\r\n                            var term = e[k],\r\n                                    check = false;\r\n                            for(var z = 0; z < var_array.length; z++) {\r\n                                //check to see if terms contain multiple variables\r\n                                if(term.contains(var_array[z])) {\r\n                                    if(check)\r\n                                        core.err('Multiple variables found for term ' + term);\r\n                                    check = true;\r\n                                }\r\n                            }\r\n                            //we made sure that every term contains one variable so it's safe to assume that if the\r\n                            //variable is found then the remainder is the coefficient.\r\n                            if(term.contains(v)) {\r\n                                var tparts = explode(remove(e, k), v);\r\n                                m.set(i, j, _.add(m.get(i, j), tparts[0]));\r\n                            }\r\n                        }\r\n                    }\r\n                    //all the remaining terms go to the c matrix\r\n                    for(k = 0; k < e.length; k++) {\r\n                        c.set(i, 0, _.add(c.get(i, 0), e[k]));\r\n                    }\r\n                }\r\n                //consider case (a+b)*I+u\r\n            }\r\n\r\n            //check if the system has a distinct solution\r\n            if(vars.length !== eqns.length || m.determinant().equals(0)) {\r\n                // solve the system by hand\r\n                //return __.solveSystemBySubstitution(eqns, vars, m, c);\r\n                throw new core.exceptions.SolveError('System does not have a distinct solution');\r\n            }\r\n\r\n            // Use M^-1*c to solve system\r\n            m = m.invert();\r\n            var result = m.multiply(c);\r\n            //correct the sign as per issue #410\r\n            if(core.Utils.isArray(var_array))\r\n                result.each(function (x) {\r\n                    return x.negate();\r\n                });\r\n\r\n            return __.systemSolutions(result, vars, expand_result);\r\n        },\r\n        /**\r\n         * The quadratic function but only one side.\r\n         * @param {Symbol} c\r\n         * @param {Symbol} b\r\n         * @param {Symbol} a\r\n         * @returns {Symbol}\r\n         */\r\n        quad: function (c, b, a) {\r\n            var discriminant = _.subtract(_.pow(b.clone(), Symbol(2)), _.multiply(_.multiply(a.clone(), c.clone()), Symbol(4)))/*b^2 - 4ac*/;\r\n            // Fix for #608\r\n            discriminant = _.expand(discriminant);\r\n            var det = _.pow(discriminant, Symbol(0.5));\r\n            var den = _.parse(_.multiply(new Symbol(2), a.clone()));\r\n            var retval = [\r\n                _.parse(format('(-({0})+({1}))/({2})', b, det, den)),\r\n                _.parse(format('(-({0})-({1}))/({2})', b, det, den))\r\n            ];\r\n\r\n            return retval;\r\n        },\r\n        /**\r\n         * The cubic equation\r\n         * http://math.stackexchange.com/questions/61725/is-there-a-systematic-way-of-solving-cubic-equations\r\n         * @param {Symbol} d_o\r\n         * @param {Symbol} c_o\r\n         * @param {Symbol} b_o\r\n         * @param {Symbol} a_o\r\n         * @returns {Array}\r\n         */\r\n        cubic: function (d_o, c_o, b_o, a_o) {\r\n            //convert everything to text\r\n            var a = a_o.text(), b = b_o.text(), c = c_o.text(), d = d_o.text();\r\n\r\n            var t = `(-(${b})^3/(27*(${a})^3)+(${b})*(${c})/(6*(${a})^2)-(${d})/(2*(${a})))`;\r\n            var u = `((${c})/(3*(${a}))-(${b})^2/(9*(${a})^2))`;\r\n            var v = `(${b})/(3*(${a}))`;\r\n            var x = `((${t})+sqrt((${t})^2+(${u})^3))^(1/3)+((${t})-sqrt((${t})^2+(${u})^3))^(1/3)-(${v})`;\r\n\r\n            // Convert a to one\r\n            var w = '1/2+sqrt(3)/2*i'; // Cube root of unity\r\n\r\n            return [\r\n                _.parse(x),\r\n                _.parse(`(${x})(${w})`),\r\n                _.parse(`(${x})(${w})^2`)\r\n            ];\r\n        },\r\n        /**\r\n         * The quartic equation\r\n         * @param {Symbol} e\r\n         * @param {Symbol} d\r\n         * @param {Symbol} c\r\n         * @param {Symbol} b\r\n         * @param {Symbol} a\r\n         * @returns {Array}\r\n         */\r\n        quartic: function (e, d, c, b, a) {\r\n            var scope = {};\r\n            core.Utils.arrayUnique(variables(a).concat(variables(b))\r\n                    .concat(variables(c)).concat(variables(d)).concat(variables(e)))\r\n                    .map(function (x) {\r\n                        scope[x] = 1;\r\n                    });\r\n            a = a.toString();\r\n            b = b.toString();\r\n            c = c.toString();\r\n            d = d.toString();\r\n            e = e.toString();\r\n            var p, q, D, D0, D1, Q, x1, x2, x3, x4;\r\n            /*var D = core.Utils.block('PARSE2NUMBER', function() {\r\n             return _.parse(format(\"256*({0})^3*({4})^3-192*({0})^2*({1})*({3})*({4})^2-128*({0})^2*({2})^2*({4})^2+144*({0})^2*({2})*({3})^2*({4})\"+\r\n             \"-27*({0})^2*({3})^4+144*({0})*({1})^2*({2})*({4})^2-6*({0})*({1})^2*({3})^2*({4})-80*({0})*({1})*({2})^2*({3})*({4})+18*({0})*({1})*({2})*({3})^3\"+\r\n             \"+16*({0})*({2})^4*({4})-4*({0})*({2})^3*({3})^2-27*({1})^4*({4})^2+18*({1})^3*({2})*({3})*({4})-4*({1})^3*({3})^3-4*({1})^2*({2})^3*({4})+({1})^2*({2})^2*({3})^2\", \r\n             a, b, c, d, e), scope);\r\n             });*/\r\n\r\n            p = _.parse(format(\"(8*({0})*({2})-3*({1})^2)/(8*({0})^2)\", a, b, c)).toString(); //a, b, c\r\n            q = _.parse(format(\"(({1})^3-4*({0})*({1})*({2})+8*({0})^2*({3}))/(8*({0})^3)\", a, b, c, d)).toString();//a, b, c, d, e\r\n            D0 = _.parse(format(\"12*({0})*({4})-3*({1})*({3})+({2})^2\", a, b, c, d, e)).toString(); //a, b, c, d, e\r\n            D1 = _.parse(format(\"2*({2})^3-9*({1})*({2})*({3})+27*({1})^2*({4})+27*({0})*({3})^2-72*({0})*({2})*({4})\", a, b, c, d, e)).toString(); //a, b, c, d, e\r\n            Q = _.parse(format(\"((({1})+(({1})^2-4*({0})^3)^(1/2))/2)^(1/3)\", D0, D1)).toString(); //D0, D1\r\n            S = _.parse(format(\"(1/2)*(-(2/3)*({1})+(1/(3*({0}))*(({2})+(({3})/({2})))))^(1/2)\", a, p, Q, D0)).toString(); //a, p, Q, D0\r\n            x1 = _.parse(format(\"-(({1})/(4*({0})))-({4})+(1/2)*sqrt(-4*({4})^2-2*({2})+(({3})/({4})))\", a, b, p, q, S)); //a, b, p, q, S\r\n            x2 = _.parse(format(\"-(({1})/(4*({0})))-({4})-(1/2)*sqrt(-4*({4})^2-2*({2})+(({3})/({4})))\", a, b, p, q, S)); //a, b, p, q, S\r\n            x3 = _.parse(format(\"-(({1})/(4*({0})))+({4})+(1/2)*sqrt(-4*({4})^2-2*({2})-(({3})/({4})))\", a, b, p, q, S)); //a, b, p, q, S\r\n            x4 = _.parse(format(\"-(({1})/(4*({0})))+({4})-(1/2)*sqrt(-4*({4})^2-2*({2})-(({3})/({4})))\", a, b, p, q, S)); //a, b, p, q, S\r\n            return [x1, x2, x3, x4];\r\n        },\r\n        /**\r\n         * Breaks the equation up in its factors and tries to solve the smaller parts\r\n         * @param {Symbol} symbol\r\n         * @param {String} solve_for\r\n         * @returns {Array}\r\n         */\r\n        divideAndConquer: function (symbol, solve_for) {\r\n            var sols = [];\r\n            //see if we can solve the factors\r\n            var factors = core.Algebra.Factor.factor(symbol);\r\n            if(factors.group === CB) {\r\n                factors.each(function (x) {\r\n                    x = Symbol.unwrapPARENS(x);\r\n                    sols = sols.concat(solve(x, solve_for));\r\n                });\r\n            }\r\n            return sols;\r\n        },\r\n        /**\r\n         * Attempts to solve the equation assuming it's a polynomial with numeric coefficients\r\n         * @param {Symbol} eq\r\n         * @param {String} solve_for\r\n         * @returns {Array}\r\n         */\r\n        csolve: function (eq, solve_for) {\r\n            return core.Utils.block('IGNORE_E', function () {\r\n                var f, p, pn, n, pf, r, theta, sr, sp, roots;\r\n                roots = [];\r\n                f = core.Utils.decompose_fn(eq, solve_for, true);\r\n                if(f.x.group === S) {\r\n                    p = _.parse(f.x.power);\r\n                    pn = Number(p);\r\n                    n = _.pow(_.divide(f.b.negate(), f.a), p.invert());\r\n                    pf = Symbol.toPolarFormArray(n);\r\n                    r = pf[0];\r\n                    theta = pf[1];\r\n                    sr = r.toString();\r\n                    sp = p.toString();\r\n                    var k, root, str;\r\n                    for(var i = 0; i < pn; i++) {\r\n                        k = i;\r\n                        str = format('({0})*e^(2*{1}*pi*{2}*{3})', sr, k, p, core.Settings.IMAGINARY);\r\n                        root = _.parse(str);\r\n                        roots.push(root);\r\n                    }\r\n                }\r\n                return roots;\r\n            }, true);\r\n        },\r\n        /**\r\n         * Generates starting points for the Newton solver given an expression at zero.\r\n         * It beings by check if zero is a good point and starts expanding by a provided step size. \r\n         * Builds on the fact that if the sign changes over an interval then a zero\r\n         * must exist on that interval\r\n         * @param {Symbol} symbol\r\n         * @param {Number} step\r\n         * @param {Array} points\r\n         * @returns {Array}\r\n         */\r\n        getPoints: function (symbol, step, points) {\r\n            step = step || 0.01;\r\n            points = points || [];\r\n            var f = build(symbol);\r\n            var x0 = 0;\r\n\r\n            var start = Math.round(x0),\r\n                    last = f(start),\r\n                    last_sign = last / Math.abs(last),\r\n                    rside = core.Settings.ROOTS_PER_SIDE, // the max number of roots on right side\r\n                    lside = rside; // the max number of roots on left side\r\n            // check around the starting point\r\n            points.push(Math.floor(start / 2)); //half way from zero might be a good start\r\n            points.push(Math.abs(start)); //|f(0)| could be a good start\r\n            points.push(start);//|f(0)| could be a good start\r\n            //adjust for log. A good starting point to include for log is 0.1\r\n            symbol.each(function (x) {\r\n                if(x.containsFunction(core.Settings.LOG))\r\n                    points.push(0.1);\r\n            });\r\n\r\n            var left = range(-core.Settings.SOLVE_RADIUS, start, step),\r\n                    right = range(start, core.Settings.SOLVE_RADIUS, step);\r\n\r\n            var test_side = function (side, num_roots) {\r\n                var xi, val, sign;\r\n                var hits = [];\r\n                for(var i = 0, l = side.length; i < l; i++) {\r\n                    xi = side[i]; //the point being evaluated\r\n                    val = f(xi);\r\n                    sign = val / Math.abs(val);\r\n                    //Don't add non-numeric values\r\n                    if(isNaN(val) || !isFinite(val) || hits.length > num_roots) {\r\n                        continue;\r\n                    }\r\n\r\n                    //compare the signs. The have to be different if they cross a zero\r\n                    if(sign !== last_sign) {\r\n                        hits.push(xi); //take note of the possible zero location\r\n                    }\r\n                    last_sign = sign;\r\n                }\r\n\r\n                points = points.concat(hits);\r\n            };\r\n\r\n            test_side(left, lside);\r\n            test_side(right, rside);\r\n\r\n            return points;\r\n        },\r\n        /**\r\n         * Implements the bisection method. Returns undefined in no solution is found\r\n         * @param {number} point\r\n         * @param {function} f\r\n         * @returns {undefined | number}\r\n         */\r\n        bisection: function (point, f) {\r\n            var left = point - 1;\r\n            var right = point + 1;\r\n            // First test if this point is even worth evaluating. It should\r\n            // be crossing the x axis so the signs should be different\r\n            if(Math.sign(f(left)) !== Math.sign(f(right))) {\r\n                var safety = 0;\r\n\r\n                var epsilon, middle;\r\n\r\n                do {\r\n                    epsilon = Math.abs(right - left);\r\n                    // Safety against an infinite loop\r\n                    if(safety++ > core.Settings.MAX_BISECTION_ITER || isNaN(epsilon)) {\r\n                        return;\r\n                    }\r\n                    // Calculate the middle point\r\n                    middle = (left + right) / 2;\r\n\r\n                    if(f(left) * f(middle) > 0) {\r\n                        left = middle;\r\n                    }\r\n                    else {\r\n                        right = middle;\r\n                    }\r\n                }\r\n                while(epsilon >= Settings.EPSILON);\r\n\r\n                var solution = (left + right) / 2;\r\n\r\n                // Test the solution to make sure that it's within tolerance\r\n                var x_point = f(solution);\r\n\r\n                if(!isNaN(x_point) && Math.abs(x_point) <= core.Settings.BI_SECTION_EPSILON) {\r\n                    // Returns too many junk solutions if not rounded at 13th place.\r\n                    return core.Utils.round(solution, 13);\r\n                }\r\n            }\r\n        },\r\n        /**\r\n         * Implements Newton's iterations. Returns undefined if no solutions if found\r\n         * @param {number} point\r\n         * @param {function} f\r\n         * @param {function} fp\r\n         * @returns {undefined|number}\r\n         */\r\n        Newton: function (point, f, fp) {\r\n            var maxiter = core.Settings.MAX_NEWTON_ITERATIONS,\r\n                    iter = 0;\r\n            //first try the point itself. If it's zero viola. We're done\r\n            var x0 = point, x;\r\n            do {\r\n                var fx0 = f(x0); //store the result of the function\r\n                //if the value is zero then we're done because 0 - (0/d f(x0)) = 0\r\n                if(x0 === 0 && fx0 === 0) {\r\n                    x = 0;\r\n                    break;\r\n                }\r\n\r\n                iter++;\r\n                if(iter > maxiter)\r\n                    return; //naximum iterations reached\r\n\r\n                x = x0 - fx0 / fp(x0);\r\n                var e = Math.abs(x - x0);\r\n                x0 = x;\r\n            }\r\n            while(e > Settings.NEWTON_EPSILON)\r\n\r\n            //check if the number is indeed zero. 1e-13 seems to give the most accurate results\r\n            if(Math.abs(f(x)) <= Settings.EPSILON)\r\n                return x;\r\n        },\r\n        rewrite: function (rhs, lhs, for_variable) {\r\n            lhs = lhs || new Symbol(0);\r\n            if(rhs.isComposite() && rhs.isLinear()) {\r\n                //try to isolate the square root\r\n                //container for the square roots\r\n                var sqrts = [];\r\n                //all else\r\n                var rem = [];\r\n                rhs.each(function (x) {\r\n                    x = x.clone();\r\n                    if(x.fname === 'sqrt' && x.contains(for_variable)) {\r\n                        sqrts.push(x);\r\n                    }\r\n                    else {\r\n                        rem.push(x);\r\n                    }\r\n                }, true);\r\n\r\n                if(sqrts.length === 1) {\r\n                    //move the remainder to the RHS\r\n                    lhs = _.expand(_.pow(_.subtract(lhs, core.Utils.arraySum(rem)), new Symbol(2)));\r\n                    //square both sides\r\n                    rhs = _.expand(_.pow(Symbol.unwrapSQRT(sqrts[0]), new Symbol(2)));\r\n                }\r\n            }\r\n            else {\r\n                rhs = Symbol.unwrapSQRT(_.expand(rhs)); //expand the term expression go get rid of quotients when possible\r\n            }\r\n\r\n            var c = 0, //a counter to see if we have all terms with the variable\r\n                    l = rhs.length;\r\n            //try to rewrite the whole thing\r\n            if(rhs.group === CP && rhs.contains(for_variable) && rhs.isLinear()) {\r\n                rhs.distributeMultiplier();\r\n                var t = new Symbol(0);\r\n                //first bring all the terms containing the variable to the lhs\r\n                rhs.each(function (x) {\r\n                    if(x.contains(for_variable)) {\r\n                        c++;\r\n                        t = _.add(t, x.clone());\r\n                    }\r\n                    else\r\n                        lhs = _.subtract(lhs, x.clone());\r\n                });\r\n                rhs = t;\r\n\r\n                //if not all the terms contain the variable so it's in the form\r\n                //a*x^2+x\r\n                if(c !== l) {\r\n                    return __.rewrite(rhs, lhs, for_variable);\r\n                }\r\n                else {\r\n                    return [rhs, lhs];\r\n                }\r\n            }\r\n            else if(rhs.group === CB && rhs.contains(for_variable) && rhs.isLinear()) {\r\n                if(rhs.multiplier.lessThan(0)) {\r\n                    rhs.multiplier = rhs.multiplier.multiply(new core.Frac(-1));\r\n                    lhs.multiplier = lhs.multiplier.multiply(new core.Frac(-1));\r\n                }\r\n                if(lhs.equals(0))\r\n                    return new Symbol(0);\r\n                else {\r\n                    var t = new Symbol(1);\r\n                    rhs.each(function (x) {\r\n                        if(x.contains(for_variable))\r\n                            t = _.multiply(t, x.clone());\r\n                        else\r\n                            lhs = _.divide(lhs, x.clone());\r\n                    });\r\n                    rhs = t;\r\n                    return __.rewrite(rhs, lhs, for_variable);\r\n\r\n                }\r\n            }\r\n            else if(!rhs.isLinear() && rhs.contains(for_variable)) {\r\n                var p = _.parse(rhs.power.clone().invert());\r\n                rhs = _.pow(rhs, p.clone());\r\n                lhs = _.pow(_.expand(lhs), p.clone());\r\n                return __.rewrite(rhs, lhs, for_variable);\r\n            }\r\n            else if(rhs.group === FN || rhs.group === S || rhs.group === PL) {\r\n                return [rhs, lhs];\r\n            }\r\n        },\r\n        sqrtSolve: function (symbol, v) {\r\n            var sqrts = new Symbol(0);\r\n            var rem = new Symbol(0);\r\n            if(symbol.isComposite()) {\r\n                symbol.each(function (x) {\r\n                    if(x.fname === 'sqrt' && x.contains(v)) {\r\n                        sqrts = _.add(sqrts, x.clone());\r\n                    }\r\n                    else {\r\n                        rem = _.add(rem, x.clone());\r\n                    }\r\n                });\r\n                //quick and dirty ATM\r\n                if(!sqrts.equals(0)) {\r\n                    var t = _.expand(_.multiply(_.parse(symbol.multiplier), _.subtract(_.pow(rem, new Symbol(2)), _.pow(sqrts, new Symbol(2)))));\r\n                    //square both sides\r\n                    var solutions = solve(t, v);\r\n                    //test the points. The dumb way of getting the answers\r\n                    solutions = solutions.filter(function (e) {\r\n                        if(e.isImaginary())\r\n                            return e;\r\n                        var subs = {};\r\n                        subs[v] = e;\r\n                        var point = evaluate(symbol, subs);\r\n                        if(point.equals(0))\r\n                            return e;\r\n                    });\r\n                    return solutions;\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    /*\r\n     * \r\n     * @param {String[]|String|Equation} eqns\r\n     * @param {String} solve_for\r\n     * @param {Array} solutions\r\n     * @param {Number} depth\r\n     * @param {String|Equation} fn\r\n     * @returns {Array}\r\n     */\r\n    var solve = function (eqns, solve_for, solutions, depth, fn) {\r\n        depth = depth || 0;\r\n\r\n        if(depth++ > Settings.MAX_SOLVE_DEPTH) {\r\n            return solutions;\r\n        }\r\n\r\n        //make preparations if it's an Equation\r\n        if(eqns instanceof Equation) {\r\n            //if it's zero then we're done\r\n            if(eqns.isZero()) {\r\n                return [new Symbol(0)];\r\n            }\r\n            //if the lhs = x then we're done\r\n            if(eqns.LHS.equals(solve_for) && !eqns.RHS.contains(solve_for)) {\r\n                return [eqns.RHS];\r\n            }\r\n            //if the rhs = x then we're done\r\n            if(eqns.RHS.equals(solve_for) && !eqns.LHS.contains(solve_for)) {\r\n                return [eqns.LHS];\r\n            }\r\n        }\r\n\r\n        //unwrap the vector since what we want are the elements\r\n        if(eqns instanceof core.Vector)\r\n            eqns = eqns.elements;\r\n        solve_for = solve_for || 'x'; //assumes x by default\r\n        //If it's an array then solve it as a system of equations\r\n        if(isArray(eqns)) {\r\n            return __.solveSystem.apply(undefined, arguments);\r\n        }\r\n\r\n        // Parse out functions. Fix for issue #300\r\n        // eqns = core.Utils.evaluate(eqns);\r\n        solutions = solutions || [];\r\n        //mark existing solutions as not to have duplicates\r\n        var existing = {};\r\n\r\n        // Easy fail. If it's a rational function and the denominator is zero\r\n        // the we're done. Issue #555\r\n        var known = {};\r\n        known[solve_for] = 0;\r\n        if(isSymbol(eqns) && evaluate(eqns.getDenom(), known).equals(0) === true) {\r\n            return solutions;\r\n        }\r\n\r\n        // Is usued to add solutions to set. \r\n        // TODO: Set is now implemented and should be utilized\r\n        var add_to_result = function (r, has_trig) {\r\n            var r_is_symbol = isSymbol(r);\r\n            if(r === undefined || typeof r === 'number' && isNaN(r))\r\n                return;\r\n            if(isArray(r)) {\r\n                r.forEach(function (sol) {\r\n                    add_to_result(sol);\r\n                });\r\n            }\r\n            else {\r\n                if(r.valueOf() !== 'null') {\r\n                    // Call the pre-add function if defined. This could be useful for rounding\r\n                    if(typeof core.Settings.PRE_ADD_SOLUTION === 'function') {\r\n                        r = core.Settings.PRE_ADD_SOLUTION(r);\r\n                    }\r\n\r\n                    if(!r_is_symbol) {\r\n                        r = _.parse(r);\r\n                    }\r\n                    // try to convert the number to multiples of pi\r\n                    if(core.Settings.make_pi_conversions && has_trig) {\r\n                        var temp = _.divide(r.clone(), new Symbol(Math.PI)),\r\n                                m = temp.multiplier,\r\n                                a = Math.abs(m.num),\r\n                                b = Math.abs(m.den);\r\n                        if(a < 10 && b < 10)\r\n                            r = _.multiply(temp, new Symbol('pi'));\r\n                    }\r\n\r\n                    // And check if we get a number otherwise we might be throwing out symbolic solutions.\r\n                    var r_str = r.toString();\r\n\r\n                    if(!existing[r_str]) {\r\n                        solutions.push(r);\r\n                    }\r\n                    // Mark the answer as seen\r\n                    existing[r_str] = true;\r\n                }\r\n            }\r\n        };\r\n\r\n        // Maybe we get lucky. Try the point at the function. If it works we have a point\r\n        // If not it failed\r\n        if(eqns.group === S && eqns.contains(solve_for)) {\r\n            try {\r\n                var o = {};\r\n                o[solve_for] = 0;\r\n                evaluate(fn, o, 'numer');\r\n                add_to_result(new Symbol(0));\r\n            }\r\n            catch(e) {\r\n                // Do nothing;\r\n            }\r\n\r\n            return solutions;\r\n        }\r\n        if(eqns.group === CB) {\r\n            // It suffices to solve for the numerator\r\n            var num = eqns.getNum();\r\n\r\n            if(num.group === CB) {\r\n                var sf = String(solve_for); //everything else belongs to the coeff\r\n                //get the denominator and make sure it doesn't have x since we don't know how to solve for those\r\n                num.each(function (x) {\r\n                    if(x.contains(sf))\r\n                        solve(x, solve_for, solutions, depth, eqns);\r\n                });\r\n\r\n                return solutions;\r\n            }\r\n\r\n            return solve(num, solve_for, solutions, depth, fn);\r\n        }\r\n\r\n        if(eqns.group === FN && eqns.fname === 'sqrt') {\r\n            eqns = _.pow(Symbol.unwrapSQRT(eqns), new Symbol(2));\r\n        }\r\n        //pass in false to not expand equations such as (x+y)^5.\r\n        //It suffices to solve for the numerator since there's no value in the denominator which yields a zero for the function\r\n        var eq = (core.Utils.isSymbol(eqns) ? eqns : __.toLHS(eqns, false)).getNum(),\r\n                vars = core.Utils.variables(eq), //get a list of all the variables\r\n                numvars = vars.length;//how many variables are we dealing with\r\n\r\n        //it sufficient to solve (x+y) if eq is (x+y)^n since 0^n\r\n        if(core.Utils.isInt(eq.power) && eq.power > 0) {\r\n            eq = _.parse(eq).toLinear();\r\n        }\r\n\r\n        //if we're dealing with a single variable then we first check if it's a \r\n        //polynomial (including rationals).If it is then we use the Jenkins-Traubb algorithm.     \r\n        //Don't waste time\r\n        if(eq.group === S || eq.group === CB && eq.contains(solve_for)) {\r\n            return [new Symbol(0)];\r\n        }\r\n        //force to polynomial. We go through each and then we look at what it would \r\n        //take for its power to be an integer\r\n        //if the power is a fractional we divide by the fractional power\r\n        var fractionals = {},\r\n                cfact;\r\n\r\n        var correct_denom = function (symbol) {\r\n            symbol = _.expand(symbol, {\r\n                expand_denominator: true,\r\n                expand_functions: true\r\n            });\r\n            var original = symbol.clone(); //preserve the original\r\n\r\n            if(symbol.symbols) {\r\n                for(var x in symbol.symbols) {\r\n                    var sym = symbol.symbols[x];\r\n\r\n                    //get the denominator of the sub-symbol\r\n                    var den = sym.getDenom();\r\n\r\n                    if(!den.isConstant(true) && symbol.isComposite()) {\r\n                        var t = new Symbol(0);\r\n                        symbol.each(function (e) {\r\n                            t = _.add(t, _.multiply(e, den.clone()));\r\n                        });\r\n\r\n                        return correct_denom(_.multiply(_.parse(symbol.multiplier), t));\r\n                    }\r\n\r\n                    var parts = explode(sym, solve_for);\r\n                    var is_sqrt = parts[1].fname === core.Settings.SQRT;\r\n                    var v = Symbol.unwrapSQRT(parts[1]);\r\n                    var p = v.power.clone();\r\n                    //circular logic with sqrt. Since sqrt(x) becomes x^(1/2) which then becomes sqrt(x), this continues forever\r\n                    //this needs to be terminated if p = 1/2\r\n                    if(!isSymbol(p) && !p.equals(1 / 2)) {\r\n                        if(p.den.gt(1)) {\r\n                            if(is_sqrt) {\r\n                                symbol = _.subtract(symbol, sym.clone());\r\n                                symbol = _.add(symbol, _.multiply(parts[0].clone(), v));\r\n                                return correct_denom(symbol);\r\n                            }\r\n                            var c = fractionals[p.den];\r\n                            fractionals[p.den] = c ? c++ : 1;\r\n                        }\r\n                        else if(p.sign() === -1) {\r\n                            var factor = _.parse(solve_for + '^' + Math.abs(p)); //this\r\n                            //unwrap the symbol's denoniator\r\n                            symbol.each(function (y, index) {\r\n                                if(y.contains(solve_for)) {\r\n                                    symbol.symbols[index] = _.multiply(y, factor.clone());\r\n                                }\r\n                            });\r\n                            fractionals = {};\r\n                            return correct_denom(_.parse(symbol));\r\n                        }\r\n                        else if(sym.group === PL) {\r\n                            var min_p = core.Utils.arrayMin(core.Utils.keys(sym.symbols));\r\n                            if(min_p < 0) {\r\n                                var factor = _.parse(solve_for + '^' + Math.abs(min_p));\r\n                                var corrected = new Symbol(0);\r\n                                original.each(function (x) {\r\n                                    corrected = _.add(corrected, _.multiply(x.clone(), factor.clone()));\r\n                                }, true);\r\n                                return corrected;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return symbol;\r\n        };\r\n\r\n\r\n        //separate the equation\r\n        var separate = function (eq) {\r\n            var lhs = new Symbol(0),\r\n                    rhs = new Symbol(0);\r\n            eq.each(function (x) {\r\n                if(x.contains(solve_for, true))\r\n                    lhs = _.add(lhs, x.clone());\r\n                else\r\n                    rhs = _.subtract(rhs, x.clone());\r\n            });\r\n            return [lhs, rhs];\r\n        };\r\n\r\n        __.inverseFunctionSolve = function (name, lhs, rhs) {\r\n            //ax+b comes back as [a, x, ax, b];\r\n            var parts = explode(lhs.args[0], solve_for);\r\n            //check if x is by itself\r\n            var x = parts[1];\r\n            if(x.group === S) {\r\n                return _.divide(_.symfunction(name, [_.divide(rhs, _.parse(lhs.multiplier))]), parts[0]);\r\n            }\r\n\r\n        };\r\n\r\n        //first remove any denominators\r\n        eq = correct_denom(eq);\r\n\r\n        if(eq.equals(0))\r\n            return [eq];\r\n        //correct fractionals. I can only handle one type right now\r\n        var fkeys = core.Utils.keys(fractionals);\r\n        if(fkeys.length === 1) {\r\n            //make a note of the factor\r\n            cfact = fkeys[0];\r\n            eq.each(function (x, index) {\r\n                if(x.contains(solve_for)) {\r\n                    var parts = explode(x, solve_for);\r\n                    var v = parts[1];\r\n                    var p = v.power;\r\n                    if(p.den.gt(1)) {\r\n                        v.power = p.multiply(new core.Frac(cfact));\r\n                        eq.symbols[index] = _.multiply(v, parts[0]);\r\n                    }\r\n                }\r\n            });\r\n            eq = _.parse(eq);\r\n        }\r\n\r\n        //try for nested sqrts as per issue #486\r\n        add_to_result(__.sqrtSolve(eq, solve_for));\r\n\r\n        //polynomial single variable\r\n        if(numvars === 1) {\r\n            if(eq.isPoly(true)) {\r\n                //try to factor and solve\r\n                var factors = new core.Algebra.Classes.Factors();\r\n\r\n                core.Algebra.Factor.factor(eq, factors);\r\n                //if the equation has more than one symbolic factor then solve those individually\r\n                if(factors.getNumberSymbolics() > 1) {\r\n                    for(var x in factors.factors) {\r\n                        add_to_result(solve(factors.factors[x], solve_for));\r\n                    }\r\n                }\r\n                else {\r\n                    var coeffs = core.Utils.getCoeffs(eq, solve_for),\r\n                            deg = coeffs.length - 1,\r\n                            was_calculated = false;\r\n                    if(vars[0] === solve_for) {\r\n                        //check to see if all the coefficients are constant\r\n                        if(checkAll(coeffs, function (x) {\r\n                            return x.group !== core.groups.N;\r\n                        })) {\r\n                            var roots = core.Algebra.proots(eq);\r\n                            //if all the roots are integers then return those\r\n                            if(checkAll(roots, function (x) {\r\n                                return !core.Utils.isInt(x);\r\n                            })) {\r\n                                //roots have been calculates\r\n                                was_calculated = true;\r\n                                roots.map(function (x) {\r\n                                    add_to_result(new Symbol(x));\r\n                                });\r\n                            }\r\n                        }\r\n\r\n                        if(!was_calculated) {\r\n                            eqns = _.parse(eqns);\r\n                            if(eqns instanceof core.Equation)\r\n                                eqns = eqns.toLHS();\r\n\r\n                            //we can solve algebraically for degrees 1, 2, 3. The remainder we switch to Jenkins-\r\n                            if(deg === 1)\r\n                                add_to_result(_.divide(coeffs[0], coeffs[1].negate()));\r\n                            else if(deg === 2) {\r\n                                add_to_result(_.expand(__.quad.apply(undefined, coeffs)));\r\n                            }\r\n\r\n                            else if(deg === 3) {\r\n                                var solutions = []; //set to blank\r\n                                //first try to factor and solve\r\n                                var factored = core.Algebra.Factor.factor(eqns);\r\n\r\n                                //if it was successfully factored\r\n                                var solutions = [];\r\n                                if(solutions.length > 0)\r\n                                    add_to_result(solutions);\r\n                                else\r\n                                    add_to_result(__.cubic.apply(undefined, coeffs));\r\n                            }\r\n\r\n                            else {\r\n                                /*\r\n                                 var sym_roots = csolve(eq, solve_for); \r\n                                 if(sym_roots.length === 0)\r\n                                 sym_roots = divnconsolve(eq, solve_for);\r\n                                 if(sym_roots.length > 0) \r\n                                 add_to_result(sym_roots);\r\n                                 else\r\n                                 */\r\n                                _A.proots(eq).map(add_to_result);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                try {\r\n                    // Attempt Newton\r\n                    // Since it's not a polynomial then we'll try to look for a solution using Newton's method\r\n                    var has_trig = eq.hasTrig();\r\n                    // we get all the points where a possible zero might exist.\r\n                    var points1 = __.getPoints(eq, 0.1);\r\n                    var points2 = __.getPoints(eq, 0.05);\r\n                    var points3 = __.getPoints(eq, 0.01);\r\n                    var points = core.Utils.arrayUnique(points1.concat(points2).concat(points3)).sort(function (a, b) {\r\n                        return a - b;\r\n                    });\r\n                    var i, point, solution;\r\n\r\n                    // Compile the function\r\n                    var f = build(eq.clone());\r\n\r\n                    // First try to eliminate some points using bisection\r\n                    var t_points = [];\r\n                    for(i = 0; i < points.length; i++) {\r\n                        point = points[i];\r\n\r\n                        // See if there's a solution at this point\r\n                        solution = __.bisection(point, f);\r\n\r\n                        // If there's no solution then add it to the array for further investigation\r\n                        if(typeof solution === 'undefined') {\r\n                            t_points.push(point);\r\n                            continue;\r\n                        }\r\n\r\n                        // Add the solution to the solution set\r\n                        add_to_result(solution, has_trig);\r\n                    }\r\n\r\n                    // Reset the points to the remaining points\r\n                    points = t_points;\r\n\r\n                    // Build the derivative and compile a function\r\n                    var d = _C.diff(eq.clone());\r\n                    var fp = build(d);\r\n                    for(i = 0; i < points.length; i++) {\r\n                        point = points[i];\r\n\r\n                        add_to_result(__.Newton(point, f, fp), has_trig);\r\n                    }\r\n                    solutions.sort();\r\n                }\r\n                catch(e) {\r\n                    console.log(e);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            //The idea here is to go through the equation and collect the coefficients\r\n            //place them in an array and call the quad or cubic function to get the results\r\n            if(!eq.hasFunc(solve_for) && eq.isComposite()) {\r\n                try {\r\n                    var factored = core.Algebra.Factor.factor(eq.clone());\r\n\r\n                    if(factored.group === CB) {\r\n                        factored.each(function (x) {\r\n                            add_to_result(solve(x, solve_for));\r\n                        });\r\n                    }\r\n                    else {\r\n                        var coeffs = core.Utils.getCoeffs(eq, solve_for);\r\n\r\n                        var l = coeffs.length,\r\n                                deg = l - 1; //the degree of the polynomial\r\n                        //get the denominator and make sure it doesn't have x\r\n\r\n                        //handle the problem based on the degree\r\n                        switch(deg) {\r\n                            case 0:\r\n                                var separated = separate(eq);\r\n                                var lhs = separated[0],\r\n                                        rhs = separated[1];\r\n                                \r\n                                if(lhs.group === core.groups.EX) {\r\n                                    var log = core.Settings.LOG;\r\n                                    var expr_str = `${log}((${rhs})/(${lhs.multiplier}))/${log}(${lhs.value})/${lhs.power.multiplier}`;\r\n                                    add_to_result(_.parse(expr_str));\r\n                                }\r\n                                break;\r\n                            case 1:\r\n                                //nothing to do but to return the quotient of the constant and the LT\r\n                                //e.g. 2*x-1\r\n                                add_to_result(_.divide(coeffs[0], coeffs[1].negate()));\r\n                                break;\r\n                            case 2:\r\n                                add_to_result(__.quad.apply(undefined, coeffs));\r\n                                break;\r\n                            case 3:\r\n                                add_to_result(__.cubic.apply(undefined, coeffs));\r\n                                break;\r\n                            case 4:\r\n                                add_to_result(__.quartic.apply(undefined, coeffs));\r\n                                break;\r\n                            default:\r\n                                add_to_result(__.csolve(eq, solve_for));\r\n                                if(solutions.length === 0)\r\n                                    add_to_result(__.divideAndConquer(eq, solve_for));\r\n                        }\r\n\r\n                        if(solutions.length === 0) {\r\n                            //try factoring\r\n                            add_to_result(solve(factored, solve_for, solutions, depth));\r\n                        }\r\n                    }\r\n\r\n                }\r\n                catch(e) { /*something went wrong. EXITING*/\r\n                    ;\r\n                }\r\n            }\r\n            else {\r\n                try {\r\n                    var rw = __.rewrite(eq, null, solve_for);\r\n                    var lhs = rw[0];\r\n                    var rhs = rw[1];\r\n                    if(lhs.group === FN) {\r\n                        if(lhs.fname === 'abs') {\r\n                            add_to_result([rhs.clone(), rhs.negate()]);\r\n                        }\r\n                        else if(lhs.fname === 'sin') {\r\n                            //asin\r\n                            add_to_result(__.inverseFunctionSolve('asin', lhs, rhs));\r\n                        }\r\n                        else if(lhs.fname === 'cos') {\r\n                            //asin\r\n                            add_to_result(__.inverseFunctionSolve('acos', lhs, rhs));\r\n                        }\r\n                        else if(lhs.fname === 'tan') {\r\n                            //asin\r\n                            add_to_result(__.inverseFunctionSolve('atan', lhs, rhs));\r\n                        }\r\n                        else if(lhs.fname === core.Settings.LOG) {\r\n                            //ax+b comes back as [a, x, ax, b];\r\n                            var parts = explode(lhs.args[0], solve_for);\r\n                            //check if x is by itself\r\n                            var x = parts[1];\r\n                            if(x.group === S) {\r\n                                rhs = _.divide(_.subtract(_.pow(lhs.args.length > 1 ? lhs.args[1] : new Symbol('e'), _.divide(rhs, _.parse(lhs.multiplier))), parts[3]), parts[0]);\r\n                                var eq = new Equation(x, rhs).toLHS();\r\n                                add_to_result(solve(eq, solve_for));\r\n                            }\r\n                        }\r\n                        else\r\n                            add_to_result(_.subtract(lhs, rhs));\r\n                    }\r\n                    else {\r\n                        var neq = new Equation(lhs, rhs).toLHS(); //create a new equation\r\n\r\n                        if(neq.equals(eq))\r\n                            throw new Error('Stopping. No stop condition exists');\r\n                        add_to_result(solve(neq, solve_for));\r\n                    }\r\n                }\r\n                catch(error) {\r\n                    //Let's try this another way\r\n                    try {\r\n                        //1. if the symbol is in the form a*b*c*... then the solution is zero if \r\n                        //either a or b or c is zero.\r\n                        if(eq.group === CB)\r\n                            add_to_result(0);\r\n                        else if(eq.group === CP) {\r\n                            var separated = separate(eq);\r\n                            var lhs = separated[0],\r\n                                    rhs = separated[1];\r\n\r\n                            //reduce the equation\r\n                            if(lhs.group === core.groups.EX && lhs.value === solve_for) {\r\n                                //change the base of both sides\r\n                                var p = lhs.power.clone().invert();\r\n                                add_to_result(_.pow(rhs, p));\r\n                            }\r\n                        }\r\n                    }\r\n                    catch(error) {\r\n                        ;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if(cfact) {\r\n            solutions = solutions.map(function (x) {\r\n                return _.pow(x, new Symbol(cfact));\r\n            });\r\n        }\r\n\r\n        // Perform some cleanup but don't do it agains arrays, etc\r\n        // Check it actually evaluates to zero\r\n        if(isSymbol(eqns)) {\r\n            var knowns = {};\r\n            solutions = solutions.filter(function (x) {\r\n                try {\r\n                    knowns[solve_for] = x;\r\n                    var zero = Number(evaluate(eqns, knowns));\r\n\r\n                    // Allow symbolic answers\r\n                    if(isNaN(zero)) {\r\n                        return true;\r\n                    }\r\n                    return true;\r\n                }\r\n                catch(e) {\r\n                    return false;\r\n                }\r\n            });\r\n        }\r\n\r\n        return solutions;\r\n    };\r\n\r\n    //Register the functions for external use\r\n    nerdamer.register([\r\n        {\r\n            name: 'solveEquations',\r\n            parent: 'nerdamer',\r\n            numargs: -1,\r\n            visible: true,\r\n            build: function () {\r\n                return solve; //comment out to return a vector\r\n                /*\r\n                 return function() {\r\n                 return core.Utils.convertToVector(solve.apply(null, arguments));\r\n                 };\r\n                 */\r\n            }\r\n        },\r\n        {\r\n            name: 'solve',\r\n            parent: 'Solve',\r\n            numargs: 2,\r\n            visible: true,\r\n            build: function () {\r\n                return core.Solve.solve;\r\n            }\r\n        },\r\n        {\r\n            name: 'setEquation',\r\n            parent: 'Solve',\r\n            visible: true,\r\n            build: function () {\r\n                return setEq;\r\n            }\r\n        }\r\n    ]);\r\n    nerdamer.updateAPI();\r\n})();","/*\r\n * Author : Martin Donk\r\n * Website : http://www.nerdamer.com\r\n * Email : martin.r.donk@gmail.com\r\n * Source : https://github.com/jiggzson/nerdamer\r\n * Can be used to load all add-ons with one require\r\n */\r\n\r\nvar nerdamer = require('./nerdamer.core.js');\r\nrequire('./Algebra.js');\r\nrequire('./Calculus.js');\r\nrequire('./Solve.js');\r\nrequire('./Extra.js');\r\n\r\n//export nerdamer\r\nmodule.exports = nerdamer;\r\n","/*\r\n * Author : Martin Donk\r\n * Website : http://www.nerdamer.com\r\n * Email : martin.r.donk@gmail.com\r\n * Source : https://github.com/jiggzson/nerdamer\r\n */\r\n\r\n/* global trig, trigh, Infinity, define, arguments2Array, NaN */\r\n//externals ====================================================================\r\n/* BigInterger.js v1.6.40 https://github.com/peterolson/BigInteger.js/blob/master/LICENSE */\r\n//var nerdamerBigInt = typeof nerdamerBigInt !== 'undefined' ? nerdamerBigInt : require(\"big-integer\");\r\n/* big.js v5.2.2 https://github.com/MikeMcl/big.js/LICENCE */\r\n//var nerdamerBigDecimal = typeof nerdamerBigDecimal !== 'undefined' ? nerdamerBigDecimal : require('big.js');\r\n\r\nvar nerdamer = (function (imports) {\r\n    \"use strict\"; \r\n\r\n//version ======================================================================\r\n    var version = '1.1.13';\r\n\r\n//inits ========================================================================\r\n    var _ = new Parser(); //nerdamer's parser\r\n\r\n    //import bigInt\r\n    var bigInt = imports.bigInt;\r\n    var bigDec = imports.bigDec;\r\n\r\n    //set the precision to js precision\r\n    bigDec.set({\r\n        precision: 250\r\n    });\r\n\r\n    var Groups = {};\r\n\r\n    //container of pregenerated primes\r\n    var PRIMES = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113\r\n                , 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251,\r\n        257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397,\r\n        401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557,\r\n        563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701,\r\n        709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863,\r\n        877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031,\r\n        1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171,\r\n        1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303,\r\n        1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471,\r\n        1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607,\r\n        1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753,\r\n        1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931,\r\n        1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083];\r\n\r\n//Settings =====================================================================\r\n    var CUSTOM_OPERATORS = {};\r\n\r\n    var Settings = {\r\n        //Enables/Disables call peekers. False means callPeekers are disabled and true means callPeekers are enabled.\r\n        callPeekers: false,\r\n\r\n        //the max number up to which to cache primes. Making this too high causes performance issues\r\n        init_primes: 1000,\r\n\r\n        exclude: [],\r\n        //If you don't care about division by zero for example then this can be set to true.\r\n        //Has some nasty side effects so choose carefully.\r\n        suppress_errors: false,\r\n        //the global used to invoke the libary to parse to a number. Normally cos(9) for example returns\r\n        //cos(9) for convenience but parse to number will always try to return a number if set to true.\r\n        PARSE2NUMBER: false,\r\n        //this flag forces the a clone to be returned when add, subtract, etc... is called\r\n        SAFE: false,\r\n        //the symbol to use for imaginary symbols\r\n        IMAGINARY: 'i',\r\n        //the modules used to link numeric function holders\r\n        FUNCTION_MODULES: [Math],\r\n        //Allow certain characters\r\n        ALLOW_CHARS: ['π'],\r\n        //Allow nerdamer to convert multi-character variables\r\n        USE_MULTICHARACTER_VARS: true,\r\n        //Allow changing of power operator\r\n        POWER_OPERATOR: '^',\r\n        //The variable validation regex\r\n        //VALIDATION_REGEX: /^[a-z_][a-z\\d\\_]*$/i\r\n        VALIDATION_REGEX: /^[a-z_αAβBγΓδΔϵEζZηHθΘιIκKλΛμMνNξΞoOπΠρPσΣτTυϒϕΦχXψΨωΩ∞][0-9a-z_αAβBγΓδΔϵEζZηHθΘιIκKλΛμMνNξΞoOπΠρPσΣτTυϒϕΦχXψΨωΩ]*$/i,\r\n        // The regex used to determine which characters should be included in implied multiplication\r\n        IMPLIED_MULTIPLICATION_REGEX: /([\\+\\-\\/\\*]*[0-9]+)([a-z_αAβBγΓδΔϵEζZηHθΘιIκKλΛμMνNξΞoOπΠρPσΣτTυϒϕΦχXψΨωΩ]+[\\+\\-\\/\\*]*)/gi,\r\n        //Aliases\r\n        ALIASES: {\r\n            'π': 'pi',\r\n            '∞': 'Infinity'\r\n        },\r\n        POSITIVE_MULTIPLIERS: false,\r\n        //Cached items\r\n        CACHE: {},\r\n        //Print out warnings or not\r\n        SILENCE_WARNINGS: false,\r\n        // Precision\r\n        PRECISION: 21,\r\n        // The Expression defaults to this value for decimal places\r\n        EXPRESSION_DECP: 19,\r\n        // The text function defaults to this value for decimal places\r\n        DEFAULT_DECP: 16,\r\n        //function mappings\r\n        VECTOR: 'vector',\r\n        PARENTHESIS: 'parens',\r\n        SQRT: 'sqrt',\r\n        ABS: 'abs',\r\n        FACTORIAL: 'factorial',\r\n        DOUBLEFACTORIAL: 'dfactorial',\r\n        //reference pi and e\r\n        LONG_PI: '3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214' +\r\n                '808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196',\r\n        LONG_E: '2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427427466' +\r\n                '39193200305992181741359662904357290033429526059563073813232862794349076323382988075319525101901',\r\n        PI: Math.PI,\r\n        E: Math.E,\r\n        LOG: 'log',\r\n        LOG10: 'log10',\r\n        LOG10_LATEX: 'log_{10}',\r\n        MAX_EXP: 200000,\r\n        //The number of scientific place to round to\r\n        SCIENTIFIC_MAX_DECIMAL_PLACES: 14,\r\n        //True if ints should not be converted to\r\n        SCIENTIFIC_IGNORE_ZERO_EXPONENTS: true\r\n    };\r\n\r\n    (function () {\r\n        Settings.CACHE.roots = {};\r\n        var x = 40,\r\n                y = 40;\r\n        for(var i = 2; i <= x; i++) {\r\n            for(var j = 2; j <= y; j++) {\r\n                var nthpow = bigInt(i).pow(j);\r\n                Settings.CACHE.roots[nthpow + '-' + j] = i;\r\n            }\r\n        }\r\n    })();\r\n\r\n    //Add the groups. These have been reorganized as of v0.5.1 to make CP the highest group\r\n    //The groups that help with organizing during parsing. Note that for FN is still a function even\r\n    //when it's raised to a symbol, which typically results in an EX\r\n    var N = Groups.N = 1, // A number\r\n            P = Groups.P = 2, // A number with a rational power e.g. 2^(3/5).\r\n            S = Groups.S = 3, // A single variable e.g. x.\r\n            EX = Groups.EX = 4, // An exponential\r\n            FN = Groups.FN = 5, // A function\r\n            PL = Groups.PL = 6, // A symbol/expression having same name with different powers e.g. 1/x + x^2\r\n            CB = Groups.CB = 7, // A symbol/expression composed of one or more variables through multiplication e.g. x*y\r\n            CP = Groups.CP = 8; // A symbol/expression composed of one variable and any other symbol or number x+1 or x+y\r\n\r\n    var CONST_HASH = Settings.CONST_HASH = '#';\r\n\r\n    var PARENTHESIS = Settings.PARENTHESIS;\r\n\r\n    var SQRT = Settings.SQRT;\r\n\r\n    var ABS = Settings.ABS;\r\n\r\n    var FACTORIAL = Settings.FACTORIAL;\r\n\r\n    var DOUBLEFACTORIAL = Settings.DOUBLEFACTORIAL;\r\n\r\n    //the storage container \"memory\" for parsed expressions\r\n    var EXPRESSIONS = [];\r\n\r\n    //variables\r\n    var VARS = {};\r\n\r\n    //the container used to store all the reserved functions\r\n    var RESERVED = [];\r\n\r\n    var WARNINGS = [];\r\n\r\n    /**\r\n     * Use this when errors are suppressible\r\n     * @param {String} msg\r\n     * @param {object} ErrorObj\r\n     */\r\n    var err = function (msg, ErrorObj) {\r\n        if(!Settings.suppress_errors) {\r\n            if(ErrorObj)\r\n                throw new ErrorObj(msg);\r\n            else\r\n                throw new Error(msg);\r\n        }\r\n    };\r\n\r\n//Utils ========================================================================\r\n    var customError = function (name) {\r\n        var E = function (message) {\r\n            this.name = name;\r\n            this.message = message !== undefined ? message : '';\r\n            var error = new Error(this.message);\r\n            error.name = this.name;\r\n            this.stack = error.stack;\r\n        }; //create an empty error\r\n        E.prototype = Object.create(Error.prototype);\r\n        return E;\r\n    };\r\n\r\n    /**\r\n     * Checks to see if value is one of nerdamer's reserved names\r\n     * @param {String} value\r\n     * @return boolean\r\n     */\r\n    var isReserved = function (value) {\r\n        return RESERVED.indexOf(value) !== -1;\r\n    };\r\n\r\n    /**\r\n     * Checks to see that all symbols in array are the same\r\n     * @param {Symbol[]} arr\r\n     * @returns {bool}\r\n     */\r\n    var allSame = function (arr) {\r\n        var last = arr[0];\r\n        for(var i = 1, l = arr.length; i < l; i++)\r\n            if(!arr[i].equals(last))\r\n                return false;\r\n        return true;\r\n    };\r\n\r\n    /**\r\n     * Used to pass warnings or low severity errors about the library\r\n     * @param msg\r\n     */\r\n    var warn = function (msg) {\r\n        WARNINGS.push(msg);\r\n        if(Settings.SHOW_WARNINGS && console && console.warn) {\r\n            console.warn(msg);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Enforces rule: \"must start with a letter or underscore and\r\n     * can have any number of underscores, letters, and numbers thereafter.\"\r\n     * @param name The name of the symbol being checked\r\n     * @param {String} typ - The type of symbols that's being validated\r\n     * @throws {Exception}  - Throws an exception on fail\r\n     */\r\n    var validateName = function (name, typ) {\r\n        typ = typ || 'variable';\r\n        if(Settings.ALLOW_CHARS.indexOf(name) !== -1)\r\n            return;\r\n        var regex = Settings.VALIDATION_REGEX;\r\n        if(!(regex.test(name))) {\r\n            throw new InvalidVariableNameError(name + ' is not a valid ' + typ + ' name');\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Convert number from scientific format to decimal format\r\n     * @param {Number} num\r\n     */\r\n    var scientificToDecimal = function (num) {\r\n        var nsign = Math.sign(num);\r\n        //remove the sign\r\n        num = Math.abs(num);\r\n        //if the number is in scientific notation remove it\r\n        if(/\\d+\\.?\\d*e[\\+\\-]*\\d+/i.test(num)) {\r\n            var zero = '0',\r\n                    parts = String(num).toLowerCase().split('e'), //split into coeff and exponent\r\n                    e = parts.pop(), //store the exponential part\r\n                    l = Math.abs(e), //get the number of zeros\r\n                    sign = e / l,\r\n                    coeff_array = parts[0].split('.');\r\n            if(sign === -1) {\r\n                l = l - coeff_array[0].length;\r\n                if(l < 0) {\r\n                    num = coeff_array[0].slice(0, l) + '.' + coeff_array[0].slice(l) + (coeff_array.length === 2 ? coeff_array[1] : '');\r\n                }\r\n                else {\r\n                    num = zero + '.' + new Array(l + 1).join(zero) + coeff_array.join('');\r\n                }\r\n            }\r\n            else {\r\n                var dec = coeff_array[1];\r\n                if(dec)\r\n                    l = l - dec.length;\r\n                if(l < 0) {\r\n                    num = coeff_array[0] + dec.slice(0, l) + '.' + dec.slice(l);\r\n                }\r\n                else {\r\n                    num = coeff_array.join('') + new Array(l + 1).join(zero);\r\n                }\r\n            }\r\n        }\r\n\r\n        return nsign < 0 ? '-' + num : num;\r\n    };\r\n    /**\r\n     * Checks if number is a prime number\r\n     * @param {Number} n - the number to be checked\r\n     */\r\n    var isPrime = function (n) {\r\n        var q = Math.floor(Math.sqrt(n));\r\n        for(var i = 2; i <= q; i++) {\r\n            if(n % i === 0)\r\n                return false;\r\n        }\r\n        return true;\r\n    };\r\n\r\n    /**\r\n     * Generates an object with known variable value for evaluation\r\n     * @param {String} variable\r\n     * @param {any} value Any stringifyable object\r\n     * @returns {Object} \r\n     */\r\n    var knownVariable = function (variable, value) {\r\n        var o = {};\r\n        o[variable] = value;\r\n        return o;\r\n    };\r\n\r\n    /**\r\n     * Checks if n is a number\r\n     * @param {any} n\r\n     */\r\n    var isNumber = function (n) {\r\n        return /^\\d+\\.?\\d*$/.test(n);\r\n    };\r\n\r\n    /**\r\n     * Checks to see if an array contains only numeric values\r\n     * @param {Array} arr\r\n     */\r\n    var allNumeric = function (arr) {\r\n        for(var i = 0; i < arr.length; i++)\r\n            if(!isNumber(arr[i]))\r\n                return false;\r\n        return true;\r\n    };\r\n    /**\r\n     * Checks to see if a number or Symbol is a fraction\r\n     * @param {Number|Symbol} num\r\n     * @returns {boolean}\r\n     */\r\n    var isFraction = function (num) {\r\n        if(isSymbol(num))\r\n            return isFraction(num.multiplier.toDecimal());\r\n        return (num % 1 !== 0);\r\n    };\r\n\r\n    /**\r\n     * Checks to see if the object provided is a Symbol\r\n     * @param {Object} obj\r\n     */\r\n    var isSymbol = function (obj) {\r\n        return (obj instanceof Symbol);\r\n    };\r\n\r\n    /**\r\n     * Checks to see if the object provided is an Expression\r\n     * @param {Object} obj\r\n     */\r\n    var isExpression = function (obj) {\r\n        return (obj instanceof Expression);\r\n    };\r\n\r\n    /**\r\n     * This method traverses the symbol structure and grabs all the variables in a symbol. The variable\r\n     * names are then returned in alphabetical order.\r\n     * @param {Symbol} obj\r\n     * @param {Boolean} poly\r\n     * @param {Object} vars - An object containing the variables. Do not pass this in as it generated\r\n     * automatically. In the future this will be a Collector object.\r\n     * @returns {String[]} - An array containing variable names\r\n     */\r\n    var variables = function (obj, poly, vars) {\r\n        vars = vars || {\r\n            c: [],\r\n            add: function (value) {\r\n                if(this.c.indexOf(value) === -1 && isNaN(value))\r\n                    this.c.push(value);\r\n            }\r\n        };\r\n\r\n        if(isSymbol(obj)) {\r\n            var group = obj.group,\r\n                    prevgroup = obj.previousGroup;\r\n            if(group === EX)\r\n                variables(obj.power, poly, vars);\r\n\r\n            if(group === CP || group === CB || prevgroup === CP || prevgroup === CB) {\r\n                for(var x in obj.symbols) {\r\n                    variables(obj.symbols[x], poly, vars);\r\n                }\r\n            }\r\n            else if(group === S || prevgroup === S) {\r\n                //very crude needs fixing. TODO\r\n                if(!(obj.value === 'e' || obj.value === 'pi' || obj.value === Settings.IMAGINARY))\r\n                    vars.add(obj.value);\r\n            }\r\n            else if(group === PL || prevgroup === PL) {\r\n                variables(firstObject(obj.symbols), poly, vars);\r\n            }\r\n            else if(group === EX) {\r\n                if(!isNaN(obj.value))\r\n                    vars.add(obj.value);\r\n                variables(obj.power, poly, vars);\r\n            }\r\n            else if(group === FN && !poly) {\r\n                for(var i = 0; i < obj.args.length; i++) {\r\n                    variables(obj.args[i], poly, vars);\r\n                }\r\n            }\r\n        }\r\n\r\n        return vars.c.sort();\r\n    };\r\n\r\n    /**\r\n     * Returns the sum of an array\r\n     * @param {Array} arr\r\n     * @param {boolean} toNumber\r\n     * @returns {Symbol}\r\n     */\r\n    var arraySum = function (arr, toNumber) {\r\n        var sum = new Symbol(0);\r\n        for(var i = 0; i < arr.length; i++) {\r\n            var x = arr[i];\r\n            // Convert to symbol if not\r\n            sum = _.add(sum, !isSymbol(x) ? _.parse(x) : x);\r\n        }\r\n\r\n        return toNumber ? Number(sum) : sum;\r\n    };\r\n\r\n    /**\r\n     * Separates out the variables into terms of variabls.\r\n     * e.g. x+y+x*y+sqrt(2)+pi returns\r\n     * {x: x, y: y, x y: x*y, constants: sqrt(2)+pi\r\n     * @param {type} symbol\r\n     * @param {type} o\r\n     * @returns {undefined}\r\n     * @throws {Error} for expontentials\r\n     */\r\n    var separate = function (symbol, o) {\r\n        symbol = _.expand(symbol);\r\n        o = o || {};\r\n        var insert = function (key, sym) {\r\n            if(!o[key])\r\n                o[key] = new Symbol(0);\r\n            o[key] = _.add(o[key], sym.clone());\r\n        };\r\n        symbol.each(function (x) {\r\n            if(x.isConstant('all')) {\r\n                insert('constants', x);\r\n            }\r\n            else if(x.group === S) {\r\n                insert(x.value, x);\r\n            }\r\n            else if(x.group === FN && (x.fname === ABS || x.fname === '')) {\r\n                separate(x.args[0]);\r\n            }\r\n            else if(x.group === EX || x.group === FN) {\r\n                throw new Error('Unable to separate. Term cannot be a function!');\r\n            }\r\n            else {\r\n                insert(variables(x).join(' '), x);\r\n            }\r\n        });\r\n\r\n        return o;\r\n    };\r\n\r\n    /**\r\n     * Fills holes in an array with zero symbol or generates one with n zeroes\r\n     * @param {Array} arr\r\n     * @param {Number} n\r\n     */\r\n    var fillHoles = function (arr, n) {\r\n        n = n || arr.length;\r\n        for(var i = 0; i < n; i++) {\r\n            var sym = arr[i];\r\n            if(!sym)\r\n                arr[i] = new Symbol(0);\r\n        }\r\n        return arr;\r\n    };\r\n\r\n    /**\r\n     *\r\n     * Checks to see if the object provided is a Vector\r\n     * @param {Object} obj\r\n     */\r\n    var isVector = function (obj) {\r\n        return (obj instanceof Vector);\r\n    };\r\n\r\n    /**\r\n     * Checks to see if the object provided is a Matrix\r\n     * @param {Object} obj\r\n     */\r\n    var isMatrix = function (obj) {\r\n        return (obj instanceof Matrix);\r\n    };\r\n\r\n    var isSet = function (obj) {\r\n        return (obj instanceof Set);\r\n    };\r\n\r\n    /**\r\n     * Checks to see if a symbol is in group N\r\n     * @param {Symbol} symbol\r\n     */\r\n    var isNumericSymbol = function (symbol) {\r\n        return symbol.group === N || symbol.group === P;\r\n    };\r\n\r\n    /**\r\n     * Checks to see if a symbol is a variable with no multiplier nor power\r\n     * @param {Symbol} symbol\r\n     */\r\n    var isVariableSymbol = function (symbol) {\r\n        return symbol.group === S && symbol.multiplier.equals(1) && symbol.power.equals(1);\r\n    };\r\n\r\n    /**\r\n     * Checks to see if the object provided is an Array\r\n     * @param {Object} arr\r\n     */\r\n    var isArray = function (arr) {\r\n        return Array.isArray(arr);\r\n    };\r\n\r\n    /**\r\n     * Checks to see if a number is an integer\r\n     * @param {Number} num\r\n     */\r\n    var isInt = function (num) {\r\n        return /^[-+]?\\d+e?\\+?\\d*$/gim.test(num.toString());\r\n    };\r\n\r\n    /**\r\n     * @param {Number|Symbol} obj\r\n     * @returns {boolean}\r\n     */\r\n    var isNegative = function (obj) {\r\n        if(isSymbol(obj)) {\r\n            obj = obj.multiplier;\r\n        }\r\n        return obj.lessThan(0);\r\n    };\r\n    /**\r\n     * Safely stringify object\r\n     * @param o\r\n     */\r\n    var stringify = function (o) {\r\n        if(!o)\r\n            return o;\r\n        return String(o);\r\n    };\r\n\r\n    /**\r\n     * @param {String} str\r\n     * @returns {String} - returns a formatted string surrounded by brackets\r\n     */\r\n    var inBrackets = function (str) {\r\n        return '(' + str + ')';\r\n    };\r\n\r\n    /**\r\n     * A helper function to replace parts of string\r\n     * @param {String} str - The original string\r\n     * @param {Integer} from - The starting index\r\n     * @param {Integer} to - The ending index\r\n     * @param {String} with_str - The replacement string\r\n     * @returns {String} - A formatted string\r\n     */\r\n    var stringReplace = function (str, from, to, with_str) {\r\n        return str.substr(0, from) + with_str + str.substr(to, str.length);\r\n    };\r\n\r\n    /**\r\n     * the Parser uses this to check if it's allowed to convert the obj to type Symbol\r\n     * @param {Object} obj\r\n     * @returns {boolean}\r\n     */\r\n    var customType = function (obj) {\r\n        return obj !== undefined && obj.custom;\r\n    };\r\n\r\n    /**\r\n     * Checks to see if numbers are both negative or are both positive\r\n     * @param {Number} a\r\n     * @param {Number} b\r\n     * @returns {boolean}\r\n     */\r\n    var sameSign = function (a, b) {\r\n        return (a < 0) === (b < 0);\r\n    };\r\n\r\n    /**\r\n     * A helper function to replace multiple occurences in a string. Takes multiple arguments\r\n     * @example format('{0} nice, {0} sweet', 'something')\r\n     * //returns 'something nice, something sweet'\r\n     */\r\n    var format = function () {\r\n        var args = [].slice.call(arguments),\r\n                str = args.shift();\r\n        var new_str = str.replace(/{(\\d+)}/g, function (match, index) {\r\n            var arg = args[index];\r\n            return typeof arg === 'function' ? arg() : arg;\r\n        });\r\n\r\n        return new_str;\r\n    };\r\n\r\n    /**\r\n     * Generates an array with values within a range. Multiplies by a step if provided\r\n     * @param {Number} start\r\n     * @param {Number} end\r\n     * @param {Number} step\r\n     */\r\n    var range = function (start, end, step) {\r\n        var arr = [];\r\n        step = step || 1;\r\n        for(var i = start; i <= end; i++)\r\n            arr.push(i * step);\r\n        return arr;\r\n    };\r\n\r\n    /**\r\n     * Returns an array of all the keys in an array\r\n     * @param {Object} obj\r\n     * @returns {Array}\r\n     */\r\n    var keys = Object.keys;\r\n\r\n    /**\r\n     * Returns the first encountered item in an object. Items do not have a fixed order in objects\r\n     * so only use if you need any first random or if there's only one item in the object\r\n     * @param {Object} obj\r\n     * @param {String} key Return this key as first object\r\n     * @param {Boolean} both\r\n     * @returns {*}\r\n     */\r\n    var firstObject = function (obj, key, both) {\r\n        for(var x in obj)\r\n            break;\r\n        if(key)\r\n            return x;\r\n        if(both)\r\n            return {\r\n                key: x,\r\n                obj: obj[x]\r\n            };\r\n        return obj[x];\r\n    };\r\n\r\n    /**\r\n     * Substitutes out variables for two symbols, parses them to a number and them compares them numerically\r\n     * @param {Symbol} sym1\r\n     * @param {Symbol} sym2\r\n     * @param {String[]} vars - an optional array of variables to use\r\n     * @returns {bool}\r\n     */\r\n    var compare = function (sym1, sym2, vars) {\r\n        var n = 5; //a random number between 1 and 5 is good enough\r\n        var scope = {}; // scope object with random numbers generated using vars\r\n        var comparison;\r\n        for(var i = 0; i < vars.length; i++)\r\n            scope[vars[i]] = new Symbol(Math.floor(Math.random() * n) + 1);\r\n        block('PARSE2NUMBER', function () {\r\n            comparison = _.parse(sym1, scope).equals(_.parse(sym2, scope));\r\n        });\r\n        return comparison;\r\n    };\r\n\r\n    /**\r\n     * Is used to set a user defined function using the function assign operator\r\n     * @param {String} name\r\n     * @param {String[]} params_array\r\n     * @param {String} body\r\n     * @returns {Boolean}\r\n     */\r\n    var setFunction = function (name, params_array, body) {\r\n        validateName(name);\r\n        if(!isReserved(name)) {\r\n            params_array = params_array || variables(_.parse(body));\r\n            // The function gets set to PARSER.mapped function which is just\r\n            // a generic function call.\r\n            _.functions[name] = [_.mapped_function, params_array.length, {\r\n                    name: name,\r\n                    params: params_array,\r\n                    body: body\r\n                }];\r\n\r\n            return body;\r\n        }\r\n        return null;\r\n    };\r\n\r\n    /**\r\n     * Returns the minimum number in an array\r\n     * @param {Array} arr\r\n     * @returns {Number}\r\n     */\r\n    var arrayMax = function (arr) {\r\n        return Math.max.apply(undefined, arr);\r\n    };\r\n\r\n    /**\r\n     * Returns the maximum number in an array\r\n     * @param {Array} arr\r\n     * @returns {Number}\r\n     */\r\n    var arrayMin = function (arr) {\r\n        return Math.min.apply(undefined, arr);\r\n    };\r\n\r\n    /**\r\n     * Checks to see if two arrays are equal\r\n     * @param {Array} arr1 \r\n     * @param {Array} arr2 \r\n     */\r\n    var arrayEqual = function (arr1, arr2) {\r\n        arr1.sort();\r\n        arr2.sort();\r\n\r\n        // The must be of the same length\r\n        if(arr1.length === arr2.length) {\r\n            for(var i = 0; i < arr1.length; i++) {\r\n                // If any two items don't match we're done\r\n                if(arr1[i] !== arr2[i]) {\r\n                    return false;\r\n                }\r\n            }\r\n            // Otherwise they're equal\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n    /**\r\n     * Clones array with clonable items\r\n     * @param {Array} arr\r\n     * @returns {Array}\r\n     */\r\n    var arrayClone = function (arr) {\r\n        var new_array = [], l = arr.length;\r\n        for(var i = 0; i < l; i++)\r\n            new_array[i] = arr[i].clone();\r\n        return new_array;\r\n    };\r\n\r\n    /**\r\n     * Fills numbers between array values\r\n     * @param {Numbers[]} arr\r\n     * @param {Integer} slices\r\n     */\r\n    var arrayAddSlices = function (arr, slices) {\r\n        slices = slices || 20;\r\n        var retval = [];\r\n        var c, delta, e;\r\n        retval.push(arr[0]); //push the beginning\r\n        for(var i = 0; i < arr.length - 1; i++) {\r\n            c = arr[i];\r\n            delta = arr[i + 1] - c; //get the difference\r\n            e = delta / slices; //chop it up in the desired number of slices\r\n            for(var j = 0; j < slices; j++) {\r\n                c += e; //add the mesh to the last slice\r\n                retval.push(c);\r\n            }\r\n        }\r\n\r\n        return retval;\r\n    };\r\n\r\n    /**\r\n     * Gets nth roots of a number\r\n     * @param {Symbol} symbol\r\n     * @returns {Vector}\r\n     */\r\n    var nroots = function (symbol) {\r\n        var a, b;\r\n\r\n        if(symbol.group === FN && symbol.fname === '') {\r\n            a = Symbol.unwrapPARENS(_.parse(symbol).toLinear());\r\n            b = _.parse(symbol.power);\r\n        }\r\n        else if(symbol.group === P) {\r\n            a = _.parse(symbol.value);\r\n            b = _.parse(symbol.power);\r\n        }\r\n\r\n        if(a && b && (a.group === N) && b.group === N && a.multiplier.isNegative()) {\r\n            var _roots = [];\r\n\r\n            var parts = Symbol.toPolarFormArray(evaluate(symbol));\r\n            var r = parts[0];\r\n\r\n            //var r = _.parse(a).abs().toString();\r\n\r\n            //https://en.wikipedia.org/wiki/De_Moivre%27s_formula\r\n            var x = _.arg(a);\r\n            var n = b.multiplier.den.toString();\r\n            var p = b.multiplier.num.toString();\r\n\r\n            var formula = '(({0})^({1})*(cos({3})+({2})*sin({3})))^({4})';\r\n\r\n            for(var i = 0; i < n; i++) {\r\n                var t = evaluate(_.parse(format(\"(({0})+2*pi*({1}))/({2})\", x, i, n))).multiplier.toDecimal();\r\n                _roots.push(evaluate(_.parse(format(formula, r, n, Settings.IMAGINARY, t, p))));\r\n            }\r\n            return Vector.fromArray(_roots);\r\n        }\r\n        else if(symbol.isConstant(true, true)) {\r\n            var sign = symbol.sign();\r\n            var x = evaluate(symbol.abs());\r\n            var root = _.sqrt(x);\r\n\r\n            var _roots = [root.clone(), root.negate()];\r\n\r\n            if(sign < 0)\r\n                _roots = _roots.map(function (x) {\r\n                    return _.multiply(x, Symbol.imaginary());\r\n                });\r\n\r\n        }\r\n        else {\r\n            _roots = [_.parse(symbol)];\r\n        }\r\n\r\n        return Vector.fromArray(_roots);\r\n    };\r\n\r\n    /**\r\n     * Sorts and array given 2 parameters\r\n     * @param {String} a\r\n     * @param {String} b\r\n     */\r\n    var comboSort = function (a, b) {\r\n        var l = a.length,\r\n                combined = []; //the linker\r\n        for(var i = 0; i < a.length; i++) {\r\n            combined.push([a[i], b[i]]); //create the map\r\n        }\r\n\r\n        combined.sort(function (x, y) {\r\n            return x[0] - y[0];\r\n        });\r\n\r\n        var na = [], nb = [];\r\n\r\n        for(i = 0; i < l; i++) {\r\n            na.push(combined[i][0]);\r\n            nb.push(combined[i][1]);\r\n        }\r\n\r\n        return [na, nb];\r\n    };\r\n    /**\r\n     * TODO: Pick a more descriptive name and better description\r\n     * Breaks a function down into it's parts wrt to a variable, mainly coefficients\r\n     * Example a*x^2+b wrt x\r\n     * @param {Symbol} fn\r\n     * @param {String} wrt\r\n     * @param {bool} as_obj\r\n     */\r\n    var decompose_fn = function (fn, wrt, as_obj) {\r\n        wrt = String(wrt); //convert to string\r\n        var ax, a, x, b;\r\n        if(fn.group === CP) {\r\n            var t = _.expand(fn.clone()).stripVar(wrt);\r\n            ax = _.subtract(fn.clone(), t.clone());\r\n            b = t;\r\n        }\r\n        else\r\n            ax = fn.clone();\r\n        a = ax.stripVar(wrt);\r\n        x = _.divide(ax.clone(), a.clone());\r\n        b = b || new Symbol(0);\r\n        if(as_obj)\r\n            return {\r\n                a: a,\r\n                x: x,\r\n                ax: ax,\r\n                b: b\r\n            };\r\n        return [a, x, ax, b];\r\n    };\r\n    /**\r\n     * Rounds a number up to x decimal places\r\n     * @param {Number} x\r\n     * @param {Number} s\r\n     */\r\n    var nround = function (x, s) {\r\n        if(isInt(x)) {\r\n            if(x >= Number.MAX_VALUE)\r\n                return x.toString();\r\n            return Number(x);\r\n        }\r\n\r\n        s = typeof s === 'undefined' ? 14 : s;\r\n        return Math.round(x * Math.pow(10, s)) / Math.pow(10, s);\r\n    };\r\n\r\n    /**\r\n     * Is used for u-substitution. Gets a suitable u for substitution. If for\r\n     * instance a is used in the symbol then it keeps going down the line until\r\n     * one is found that's not in use. If all letters are taken then it\r\n     * starts appending numbers.\r\n     * IMPORTANT! It assumes that the substitution will be undone\r\n     * beore the user gets to interact with the object again.\r\n     * @param {Symbol} symbol\r\n     */\r\n    var getU = function (symbol) {\r\n        //start with u\r\n        var u = 'u', //start with u\r\n                v = u, //init with u\r\n                c = 0, //postfix number\r\n                vars = variables(symbol);\r\n        //make sure this variable isn't reserved and isn't in the variable list\r\n        while(!(RESERVED.indexOf(v) === - 1 && vars.indexOf(v) === - 1))\r\n            v = u + c++;\r\n        //get an empty slot. It seems easier to just push but the\r\n        //problem is that we may have some which are created by clearU\r\n        for(var i = 0, l = RESERVED.length; i <= l; i++)\r\n            //reserved cannot equals false or 0 so we can safely check for a falsy type\r\n            if(!RESERVED[i]) {\r\n                RESERVED[i] = v; //reserve the variable\r\n                break;\r\n            }\r\n        return v;\r\n    };\r\n\r\n    /**\r\n     * Clears the u variable so it's no longer reserved\r\n     * @param {String} u\r\n     */\r\n    var clearU = function (u) {\r\n        var indx = RESERVED.indexOf(u);\r\n        if(indx !== -1)\r\n            RESERVED[indx] = undefined;\r\n    };\r\n\r\n    /**\r\n     * Loops through each item in object and calls function with item as param\r\n     * @param {Object|Array} obj\r\n     * @param {Function} fn\r\n     */\r\n    var each = function (obj, fn) {\r\n        if(isArray(obj)) {\r\n            var l = obj.length;\r\n            for(var i = 0; i < l; i++)\r\n                fn.call(obj, i);\r\n        }\r\n        else {\r\n            for(var x in obj)\r\n                if(obj.hasOwnProperty(x))\r\n                    fn.call(obj, x);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Checks to see if a number is an even number\r\n     * @param {Number} num\r\n     * @returns {boolean}\r\n     */\r\n    var even = function (num) {\r\n        return num % 2 === 0;\r\n    };\r\n\r\n    /**\r\n     * Checks to see if a fraction is divisible by 2\r\n     * @param {Number} num\r\n     * @returns {boolean}\r\n     */\r\n    var evenFraction = function (num) {\r\n        return 1 / (num % 1) % 2 === 0;\r\n    };\r\n\r\n    /**\r\n     * Strips duplicates out of an array\r\n     * @param {Array} arr\r\n     */\r\n    var arrayUnique = function (arr) {\r\n        var l = arr.length, a = [];\r\n        for(var i = 0; i < l; i++) {\r\n            var item = arr[i];\r\n            if(a.indexOf(item) === -1)\r\n                a.push(item);\r\n        }\r\n        return a;\r\n    };\r\n\r\n    /**\r\n     * Gets all the variables in an array of Symbols\r\n     * @param {Symbol[]} arr \r\n     */\r\n    var arrayGetVariables = function (arr) {\r\n        var vars = variables(arr[0], null, null, true);\r\n\r\n        //get all variables\r\n        for(var i = 1, l = arr.length; i < l; i++)\r\n            vars = vars.concat(variables(arr[i]));\r\n        //remove duplicates\r\n        vars = arrayUnique(vars).sort();\r\n\r\n        //done\r\n        return vars;\r\n    };\r\n\r\n    /**\r\n     * Removes duplicates from an array. Returns a new array\r\n     * @param {Array} arr\r\n     * @param {Function} condition\r\n     */\r\n    var removeDuplicates = function (arr, condition) {\r\n        var conditionType = typeof condition;\r\n\r\n        if(conditionType !== 'function' || conditionType === 'undefined') {\r\n            condition = function (a, b) {\r\n                return a === b;\r\n            };\r\n        }\r\n\r\n        var seen = [];\r\n\r\n        while(arr.length) {\r\n            var a = arr[0];\r\n            //only one element left so we're done\r\n            if(arr.length === 1) {\r\n                seen.push(a);\r\n                break;\r\n            }\r\n            var temp = [];\r\n            seen.push(a); //we already scanned these\r\n            for(var i = 1; i < arr.length; i++) {\r\n                var b = arr[i];\r\n                //if the number is outside the specified tolerance\r\n                if(!condition(a, b))\r\n                    temp.push(b);\r\n            }\r\n            //start over with the remainder\r\n            arr = temp;\r\n        }\r\n\r\n        return seen;\r\n    };\r\n\r\n    /**\r\n     * Reserves the names in an object so they cannot be used as function names\r\n     * @param {Object} obj\r\n     */\r\n    var reserveNames = function (obj) {\r\n        var add = function (item) {\r\n            if(RESERVED.indexOf(item) === -1)\r\n                RESERVED.push(item);\r\n        };\r\n\r\n        if(typeof obj === 'string')\r\n            add(obj);\r\n        else {\r\n            each(obj, function (x) {\r\n                add(x);\r\n            });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Removes an item from either an array or an object. If the object is an array, the index must be\r\n     * specified after the array. If it's an object then the key must be specified\r\n     * @param {Object|Array} obj\r\n     * @param {Integer} indexOrKey\r\n     */\r\n    var remove = function (obj, indexOrKey) {\r\n        var result;\r\n        if(isArray(obj)) {\r\n            result = obj.splice(indexOrKey, 1)[0];\r\n        }\r\n        else {\r\n            result = obj[indexOrKey];\r\n            delete obj[indexOrKey];\r\n        }\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a temporary block in which one of the global settings is temporarily modified while\r\n     * the function is called. For instance if you want to parse directly to a number rather than have a symbolic\r\n     * answer for a period you would set PARSE2NUMBER to true in the block.\r\n     * @example block('PARSE2NUMBER', function(){//symbol being parsed to number}, true);\r\n     * @param {String} setting - The setting being accessed\r\n     * @param {Function} f\r\n     * @param {boolean} opt - The value of the setting in the block\r\n     * @param {String} obj - The obj of interest. Usually a Symbol but could be any object\r\n     */\r\n    var block = function (setting, f, opt, obj) {\r\n        var current_setting = Settings[setting];\r\n        Settings[setting] = opt === undefined ? true : !!opt;\r\n        var retval = f.call(obj);\r\n        Settings[setting] = current_setting;\r\n        return retval;\r\n    };\r\n\r\n    /**\r\n     * provide a mechanism for accessing functions directly. Not yet complete!!!\r\n     * Some functions will return undefined. This can maybe just remove the\r\n     * function object at some point when all functions are eventually\r\n     * housed in the global function object. Returns ALL parser available\r\n     * functions. Parser.functions may not contain all functions\r\n     */\r\n    var importFunctions = function () {\r\n        var o = {};\r\n        for(var x in _.functions)\r\n            o[x] = _.functions[x][0];\r\n        return o;\r\n    };\r\n\r\n    /**\r\n     * Converts function arguments to an array. Now used by gcd and lcm in Algebra.js :)\r\n     * @param {Array|object} obj\r\n     */\r\n    var arguments2Array = function (obj) {\r\n        return [].slice.call(obj);\r\n    };\r\n\r\n    /**\r\n     * Returns the coefficients of a symbol given a variable. Given ax^2+b^x+c, it divides\r\n     * each nth term by x^n.\r\n     * @param {Symbol} symbol\r\n     * @param {Symbol} wrt\r\n     */\r\n    var getCoeffs = function (symbol, wrt, info) {\r\n        var coeffs = [];\r\n        //we loop through the symbols and stick them in their respective\r\n        //containers e.g. y*x^2 goes to index 2\r\n        symbol.each(function (term) {\r\n            if(term.contains(wrt)) {\r\n                //we want only the coefficient which in this case will be everything but the variable\r\n                //e.g. a*b*x -> a*b if the variable to solve for is x\r\n                var coeff = term.stripVar(wrt),\r\n                        x = _.divide(term.clone(), coeff.clone()),\r\n                        p = x.power.toDecimal();\r\n            }\r\n            else {\r\n                coeff = term;\r\n                p = 0;\r\n            }\r\n            var e = coeffs[p];\r\n            //if it exists just add it to it\r\n            coeffs[p] = e ? _.add(e, coeff) : coeff;\r\n\r\n        }, true);\r\n\r\n        for(var i = 0; i < coeffs.length; i++)\r\n            if(!coeffs[i])\r\n                coeffs[i] = new Symbol(0);\r\n        //fill the holes\r\n        return coeffs;\r\n    };\r\n\r\n    /**\r\n     * As the name states. It forces evaluation of the expression\r\n     * @param {Symbol} symbol\r\n     * @param {Symbol} o\r\n     */\r\n    var evaluate = function (symbol, o) {\r\n        return block('PARSE2NUMBER', function () {\r\n            return _.parse(symbol, o);\r\n        }, true);\r\n    };\r\n\r\n    /**\r\n     * Converts an array to a vector. Consider moving this to Vector.fromArray\r\n     * @param {String[]|String|Symbol|Number|Number[]} x\r\n     */\r\n    var convertToVector = function (x) {\r\n        if(isArray(x)) {\r\n            var vector = new Vector([]);\r\n            for(var i = 0; i < x.length; i++)\r\n                vector.elements.push(convertToVector(x[i]));\r\n            return vector;\r\n        }\r\n        //Ensure that a nerdamer ready object is returned\r\n        if(!isSymbol(x))\r\n            return _.parse(x);\r\n        return x;\r\n    };\r\n\r\n    /**\r\n     * Generates prime numbers up to a specified number\r\n     * @param {Number} upto\r\n     */\r\n    var generatePrimes = function (upto) {\r\n        //get the last prime in the array\r\n        var last_prime = PRIMES[PRIMES.length - 1] || 2;\r\n        //no need to check if we've already encountered the number. Just check the cache.\r\n        for(var i = last_prime; i < upto; i++) {\r\n            if(isPrime(i))\r\n                PRIMES.push(i);\r\n        }\r\n    };\r\n    /**\r\n     * Checks to see if all arguments are numbers\r\n     * @param {object} args\r\n     */\r\n    var allNumbers = function (args) {\r\n        for(var i = 0; i < args.length; i++)\r\n            if(args[i].group !== N)\r\n                return false;\r\n        return true;\r\n    };\r\n    /*\r\n     * Checks if all arguments aren't just all number but if they\r\n     * are constants as well e.g. pi, e.\r\n     * @param {object} args\r\n     */\r\n    var allConstants = function (args) {\r\n        for(var i = 0; i < args.length; i++) {\r\n            if(args[i].isPi() || args[i].isE())\r\n                continue;\r\n            if(!args[i].isConstant(true))\r\n                return false;\r\n        }\r\n        return true;\r\n    };\r\n\r\n    /**\r\n     * Used to multiply two expression in expanded form\r\n     * @param {Symbol} a\r\n     * @param {Symbol} b\r\n     */\r\n    var mix = function (a, b, opt) {\r\n        // Flip them if b is a CP or PL and a is not\r\n        if(b.isComposite() && !a.isComposite() || b.isLinear() && !a.isLinear()) {\r\n            [a, b] = [b, a];\r\n        }\r\n        // A temporary variable to hold the expanded terms\r\n        var t = new Symbol(0);\r\n        if(a.isLinear()) {\r\n            a.each(function (x) {\r\n                // If b is not a PL or a CP then simply multiply it\r\n                if(!b.isComposite()) {\r\n                    var term = _.multiply(_.parse(x), _.parse(b));\r\n                    t = _.add(t, _.expand(term, opt));\r\n                }\r\n                // Otherwise multiply out each term.\r\n                else if(b.isLinear()) {\r\n                    b.each(function (y) {\r\n                        var term = _.multiply(_.parse(x), _.parse(y));\r\n                        var expanded = _.expand(_.parse(term), opt);\r\n                        t = _.add(t, expanded);\r\n                    }, true);\r\n                }\r\n                else {\r\n                    t = _.add(t, _.multiply(x, _.parse(b)));\r\n                }\r\n            }, true);\r\n        }\r\n        else {\r\n            // Just multiply them together\r\n            t = _.multiply(a, b);\r\n        }\r\n\r\n        // The expanded function is now t\r\n        return t;\r\n    };\r\n\r\n//Exceptions ===================================================================\r\n    //Is thrown for division by zero\r\n    var DivisionByZero = customError('DivisionByZero');\r\n    // Is throw if an error occured during parsing\r\n    var ParseError = customError('ParseError');\r\n    // Is thrown if the expression results in undefined\r\n    var UndefinedError = customError('UndefinedError');\r\n    // Is throw input is out of the function domain\r\n    var OutOfFunctionDomainError = customError('OutOfFunctionDomainError');\r\n    // Is throw if a function exceeds x amount of iterations\r\n    var MaximumIterationsReached = customError('MaximumIterationsReached');\r\n    // Is thrown if the parser receives an incorrect type\r\n    var NerdamerTypeError = customError('NerdamerTypeError');\r\n    // Is thrown if bracket parity is not correct\r\n    var ParityError = customError('ParityError');\r\n    // Is thrown if an unexpectd or incorrect operator is encountered\r\n    var OperatorError = customError('OperatorError');\r\n    // Is thrown if an index is out of range.\r\n    var OutOfRangeError = customError('OutOfRangeError');\r\n    // Is thrown if dimensions are incorrect. Mostly for matrices\r\n    var DimensionError = customError('DimensionError');\r\n    // Is thrown if variable name violates naming rule\r\n    var InvalidVariableNameError = customError('InvalidVariableNameError');\r\n    // Is thrown if the limits of the library are exceeded for a function\r\n    // This can be that the function become unstable passed a value\r\n    var ValueLimitExceededError = customError('ValueLimitExceededError');\r\n    // Is throw if the value is an incorrect LH or RH value\r\n    var NerdamerValueError = customError('NerdamerValueError');\r\n    // Is thrown if the value is an incorrect LH or RH value\r\n    var SolveError = customError('SolveError');\r\n    // Is thrown for an infinite loop\r\n    var InfiniteLoopError = customError('InfiniteLoopError');\r\n    // Is thrown if an operator is found when there shouldn't be one\r\n    var UnexpectedTokenError = customError('UnexpectedTokenError');\r\n\r\n    var exceptions = {\r\n        DivisionByZero: DivisionByZero,\r\n        ParseError: ParseError,\r\n        OutOfFunctionDomainError: OutOfFunctionDomainError,\r\n        UndefinedError: UndefinedError,\r\n        MaximumIterationsReached: MaximumIterationsReached,\r\n        NerdamerTypeError: NerdamerTypeError,\r\n        ParityError: ParityError,\r\n        OperatorError: OperatorError,\r\n        OutOfRangeError: OutOfRangeError,\r\n        DimensionError: DimensionError,\r\n        InvalidVariableNameError: InvalidVariableNameError,\r\n        ValueLimitExceededError: ValueLimitExceededError,\r\n        NerdamerValueError: NerdamerValueError,\r\n        SolveError: SolveError,\r\n        InfiniteLoopError: InfiniteLoopError,\r\n        UnexpectedTokenError: UnexpectedTokenError\r\n    };\r\n//Math2 ========================================================================\r\n    //This object holds additional functions for nerdamer. Think of it as an extension of the Math object.\r\n    //I really don't like touching objects which aren't mine hence the reason for Math2. The names of the\r\n    //functions within are pretty self-explanatory.\r\n    //NOTE: DO NOT USE INLINE COMMENTS WITH THE MATH2 OBJECT! THIS BREAK DURING COMPILATION OF BUILDFUNCTION.\r\n    var Math2 = {\r\n        csc: function (x) {\r\n            return 1 / Math.sin(x);\r\n        },\r\n        sec: function (x) {\r\n            return 1 / Math.cos(x);\r\n        },\r\n        cot: function (x) {\r\n            return 1 / Math.tan(x);\r\n        },\r\n        acsc: function (x) {\r\n            return Math.asin(1 / x);\r\n        },\r\n        asec: function (x) {\r\n            return Math.acos(1 / x);\r\n        },\r\n        acot: function (x) {\r\n            return (Math.PI / 2) - Math.atan(x);\r\n        },\r\n        // https://gist.github.com/jiggzson/df0e9ae8b3b06ff3d8dc2aa062853bd8\r\n        erf: function (x) {\r\n            var t = 1 / (1 + 0.5 * Math.abs(x));\r\n            var result = 1 - t * Math.exp(-x * x - 1.26551223 +\r\n                    t * (1.00002368 +\r\n                            t * (0.37409196 +\r\n                                    t * (0.09678418 +\r\n                                            t * (-0.18628806 +\r\n                                                    t * (0.27886807 +\r\n                                                            t * (-1.13520398 +\r\n                                                                    t * (1.48851587 +\r\n                                                                            t * (-0.82215223 +\r\n                                                                                    t * (0.17087277)))))))))\r\n                    );\r\n            return x >= 0 ? result : -result;\r\n        },\r\n        diff: function (f) {\r\n            var h = 0.001;\r\n\r\n            var derivative = function (x) {\r\n                return (f(x + h) - f(x - h)) / (2 * h);\r\n            };\r\n\r\n            return derivative;\r\n        },\r\n        median: function (...values) {\r\n            values.sort(function (a, b) {\r\n                return a - b;\r\n            });\r\n\r\n            var half = Math.floor(values.length / 2);\r\n\r\n            if(values.length % 2)\r\n                return values[half];\r\n\r\n            return (values[half - 1] + values[half]) / 2.0;\r\n        },\r\n        /*\r\n         * Reverses continued fraction calculation\r\n         * @param {obj} contd\r\n         * @returns {Number}\r\n         */\r\n        fromContinued: function (contd) {\r\n            var arr = contd.fractions.slice();\r\n            var e = 1 / arr.pop();\r\n            for(var i = 0, l = arr.length; i < l; i++) {\r\n                e = 1 / (arr.pop() + e);\r\n            }\r\n            return contd.sign * (contd.whole + e);\r\n        },\r\n        /*\r\n         * Calculates continued fractions\r\n         * @param {Number} n\r\n         * @param {Number} x The number of places\r\n         * @returns {Number}\r\n         */\r\n        continuedFraction: function (n, x) {\r\n            x = x || 20;\r\n            var sign = Math.sign(n); /*store the sign*/\r\n            var absn = Math.abs(n); /*get the absolute value of the number*/\r\n            var whole = Math.floor(absn); /*get the whole*/\r\n            var ni = absn - whole; /*subtract the whole*/\r\n            var c = 0; /*the counter to keep track of iterations*/\r\n            var done = false;\r\n            var epsilon = 1e-14;\r\n            var max = 1e7;\r\n            var e, w;\r\n            var retval = {\r\n                whole: whole,\r\n                sign: sign,\r\n                fractions: []\r\n            };\r\n            /*start calculating*/\r\n            while(!done && ni !== 0) {\r\n                /*invert and get the whole*/\r\n                e = 1 / ni;\r\n                w = Math.floor(e);\r\n                if(w > max) {\r\n                    /*this signals that we may have already gone too far*/\r\n                    var d = Math2.fromContinued(retval) - n;\r\n                    if(d <= Number.EPSILON)\r\n                        break;\r\n                }\r\n                /*add to result*/\r\n                retval.fractions.push(w);\r\n                /*move the ni to the decimal*/\r\n                ni = e - w;\r\n                /*ni should always be a decimal. If we have a whole number then we're in the rounding errors*/\r\n                if(ni <= epsilon || c >= x - 1)\r\n                    done = true;\r\n                c++;\r\n            }\r\n            /*cleanup 1/(n+1/1) = 1/(n+1) so just move the last digit one over if it's one*/\r\n            var idx = retval.fractions.length - 1;\r\n            if(retval.fractions[idx] === 1) {\r\n                retval.fractions.pop();\r\n                /*increase the last one by one*/\r\n                retval.fractions[--idx]++;\r\n            }\r\n            return retval;\r\n        },\r\n        bigpow: function (n, p) {\r\n            if(!(n instanceof Frac))\r\n                n = Frac.create(n);\r\n            if(!(p instanceof Frac))\r\n                p = Frac.create(p);\r\n            var retval = new Frac(0);\r\n            if(p.isInteger()) {\r\n                retval.num = n.num.pow(p.toString());\r\n                retval.den = n.den.pow(p.toString());\r\n            }\r\n            else {\r\n                var num = Frac.create(Math.pow(n.num, p.num));\r\n                var den = Frac.create(Math.pow(n.den, p.num));\r\n\r\n                retval.num = Math2.nthroot(num, p.den.toString());\r\n                retval.den = Math2.nthroot(den, p.den);\r\n            }\r\n            return retval;\r\n        },\r\n        //http://stackoverflow.com/questions/15454183/how-to-make-a-function-that-computes-the-factorial-for-numbers-with-decimals\r\n        gamma: function (z) {\r\n            var g = 7;\r\n            var C = [\r\n                0.99999999999980993,\r\n                676.5203681218851,\r\n                -1259.1392167224028,\r\n                771.32342877765313,\r\n                -176.61502916214059,\r\n                12.507343278686905,\r\n                -0.13857109526572012,\r\n                9.9843695780195716e-6,\r\n                1.5056327351493116e-7]\r\n                    ;\r\n\r\n            if(z < 0.5)\r\n                return Math.PI / (Math.sin(Math.PI * z) * Math2.gamma(1 - z));\r\n            else {\r\n                z -= 1;\r\n\r\n                var x = C[0];\r\n                for(var i = 1; i < g + 2; i++)\r\n                    x += C[i] / (z + i);\r\n\r\n                var t = z + g + 0.5;\r\n                return Math.sqrt(2 * Math.PI) * Math.pow(t, (z + 0.5)) * Math.exp(-t) * x;\r\n            }\r\n        },\r\n        //factorial\r\n        bigfactorial: function (x) {\r\n            var retval = new bigInt(1);\r\n            for(var i = 2; i <= x; i++)\r\n                retval = retval.times(i);\r\n            return new Frac(retval);\r\n        },\r\n        //https://en.wikipedia.org/wiki/Logarithm#Calculation\r\n        bigLog: function (x) {\r\n            varr\n            if(CACHE[x]) {\r\n                return Frac.quick.apply(null, CACHE[x].split('/'));\r\n            }\r\n            x = new Frac(x);\r\n            var n = 80;\r\n            var retval = new Frac(0);\r\n            var a = x.subtract(new Frac(1));\r\n            var b = x.add(new Frac(1));\r\n            for(var i = 0; i < n; i++) {\r\n                var t = new Frac(2 * i + 1);\r\n                var k = Math2.bigpow(a.divide(b), t);\r\n                var r = t.clone().invert().multiply(k);\r\n                retval = retval.add(r);\r\n\r\n            }\r\n            return retval.multiply(new Frac(2));\r\n        },\r\n        //the factorial function but using the big library instead\r\n        factorial: function (x) {\r\n            var is_int = x % 1 === 0;\r\n\r\n            /*factorial for negative integers is complex infinity according to Wolfram Alpha*/\r\n            if(is_int && x < 0)\r\n                return NaN;\r\n\r\n            if(!is_int)\r\n                return Math2.gamma(x + 1);\r\n\r\n            var retval = 1;\r\n            for(var i = 2; i <= x; i++)\r\n                retval = retval * i;\r\n            return retval;\r\n        },\r\n        //double factorial\r\n        //http://mathworld.wolfram.com/DoubleFactorial.html\r\n        dfactorial: function (x) {\r\n            if(isInt(x)) {\r\n                var even = x % 2 === 0;\r\n                /* If x = even then n = x/2 else n = (x-1)/2*/\r\n                var n = even ? x / 2 : (x + 1) / 2;\r\n                /*the return value*/\r\n                var r = new Frac(1);\r\n                /*start the loop*/\r\n                if(even)\r\n                    for(var i = 1; i <= n; i++)\r\n                        r = r.multiply(new Frac(2).multiply(new Frac(i)));\r\n                else\r\n                    for(var i = 1; i <= n; i++)\r\n                        r = r.multiply(new Frac(2).multiply(new Frac(i)).subtract(new Frac(1)));\r\n            }\r\n            else {\r\n                /*Not yet extended to bigNum*/\r\n                r = Math.pow(2, (1 + 2 * x - Math.cos(Math.PI * x)) / 4) * Math.pow(Math.PI, (Math.cos(Math.PI * x) - 1) / 4) * Math2.gamma(1 + x / 2);\r\n            }\r\n\r\n            /*done*/\r\n            return r;\r\n        },\r\n        GCD: function () {\r\n            var args = arrayUnique([].slice.call(arguments)\r\n                    .map(function (x) {\r\n                        return Math.abs(x);\r\n                    })).sort(),\r\n                    a = Math.abs(args.shift()),\r\n                    n = args.length;\r\n\r\n            while(n-- > 0) {\r\n                var b = Math.abs(args.shift());\r\n                while(true) {\r\n                    a %= b;\r\n                    if(a === 0) {\r\n                        a = b;\r\n                        break;\r\n                    }\r\n                    b %= a;\r\n                    if(b === 0)\r\n                        break;\r\n                    ;\r\n                }\r\n            }\r\n            return a;\r\n        },\r\n        QGCD: function () {\r\n            var args = [].slice.call(arguments);\r\n            var a = args[0];\r\n            for(var i = 1; i < args.length; i++) {\r\n                var b = args[i];\r\n                var sign = a.isNegative() && b.isNegative() ? -1 : 1;\r\n                a = b.gcd(a);\r\n                if(sign < 0)\r\n                    a.negate();\r\n            }\r\n            return a;\r\n        },\r\n        LCM: function (a, b) {\r\n            return (a * b) / Math2.GCD(a, b);\r\n        },\r\n        //pow but with the handling of negative numbers\r\n        //http://stackoverflow.com/questions/12810765/calculating-cubic-root-for-negative-number\r\n        pow: function (b, e) {\r\n            if(b < 0) {\r\n                if(Math.abs(e) < 1) {\r\n                    /*nth root of a negative number is imaginary when n is even*/\r\n                    if(1 / e % 2 === 0)\r\n                        return NaN;\r\n                    return -Math.pow(Math.abs(b), e);\r\n                }\r\n            }\r\n            return Math.pow(b, e);\r\n        },\r\n        factor: function (n) {\r\n            n = Number(n);\r\n            var sign = Math.sign(n); /*store the sign*/\r\n            /*move the number to absolute value*/\r\n            n = Math.abs(n);\r\n            var ifactors = Math2.ifactor(n);\r\n            var factors = new Symbol();\r\n            factors.symbols = {};\r\n            factors.group = CB;\r\n            for(var x in ifactors) {\r\n                var factor = new Symbol(1);\r\n                factor.group = P; /*cheat a little*/\r\n                factor.value = x;\r\n                factor.power = new Symbol(ifactors[x]);\r\n                factors.symbols[x] = factor;\r\n            }\r\n            factors.updateHash();\r\n\r\n            if(n === 1) {\r\n                factors = new Symbol(n);\r\n            }\r\n\r\n            /*put back the sign*/\r\n            if(sign < 0)\r\n                factors.negate();\r\n\r\n            return factors;\r\n        },\r\n        /**\r\n         * Uses trial division\r\n         * @param {Integer} n - the number being factored\r\n         * @param {object} factors -  the factors object\r\n         * @returns {object}\r\n         */\r\n        sfactor: function (n, factors) {\r\n            factors = factors || {};\r\n            var r = Math.floor(Math.sqrt(n));\r\n            var lcprime = PRIMES[PRIMES.length - 1];\r\n            /*a one-time cost... Hopefully ... And don't bother for more than a million*/\r\n            /*takes too long*/\r\n            if(r > lcprime && n < 1e6)\r\n                generatePrimes(r);\r\n            var l = PRIMES.length;\r\n            for(var i = 0; i < l; i++) {\r\n                var prime = PRIMES[i];\r\n                /*trial division*/\r\n                while(n % prime === 0) {\r\n                    n = n / prime;\r\n                    factors[prime] = (factors[prime] || 0) + 1;\r\n                }\r\n            }\r\n            if(n > 1)\r\n                factors[n] = 1;\r\n            return factors;\r\n        },\r\n        /**\r\n         * Pollard's rho\r\n         * @param {Integer} n\r\n         * @returns {object}\r\n         */\r\n        ifactor: function (n) {\r\n            var input = new bigInt(n);\r\n\r\n            n = String(n);\r\n\r\n            if(n === '0')\r\n                return {'0': 1};\r\n            n = new bigInt(n); /*convert to bigInt for safety*/\r\n            var sign = n.sign ? -1 : 1;\r\n            n = n.abs();\r\n            var factors = {}; /*factor object being returned.*/\r\n            if(n.lt('65536')) { /*less than 2^16 just use trial division*/\r\n                factors = Math2.sfactor(n, factors);\r\n            }\r\n            else {\r\n                var add = function (e) {\r\n                    if(!e.isPrime()) {\r\n                        factors = Math2.sfactor(e, factors);\r\n                    }\r\n                    else\r\n                        factors[e] = (factors[e] || 0) + 1;\r\n                };\r\n\r\n                try {\r\n                    //set a safety\r\n                    var max = 1e3;\r\n                    var safety = 0;\r\n\r\n                    while(!n.abs().equals(1)) {\r\n                        if(n.isPrime()) {\r\n                            add(n);\r\n                            break;\r\n                        }\r\n                        else {\r\n                            function rho(c) {\r\n                                var xf = new bigInt(c),\r\n                                        cz = 2,\r\n                                        x = new bigInt(c),\r\n                                        factor = new bigInt(1);\r\n\r\n                                while(factor.equals(1)) {\r\n                                    for(var i = 0; i <= cz && factor.equals(1); i++) {\r\n                                        //trigger the safety\r\n                                        if(safety++ > max)\r\n                                            throw new Error('stopping');\r\n\r\n                                        x = x.pow(2).add(1).mod(n);\r\n                                        factor = bigInt.gcd(x.minus(xf).abs(), n);\r\n                                    }\r\n\r\n                                    cz = cz * 2;\r\n                                    xf = x;\r\n                                }\r\n                                if(factor.equals(n)) {\r\n                                    return rho(c + 1);\r\n                                }\r\n                                return factor;\r\n                            }\r\n                            var factor = rho(2);\r\n                            add(factor);\r\n                            /*divide out the factor*/\r\n                            n = n.divide(factor);\r\n                        }\r\n                    }\r\n                }\r\n                catch(e) {\r\n                    //reset factors\r\n                    factors = {};\r\n                    add(input);\r\n                }\r\n\r\n            }\r\n\r\n            /*put the sign back*/\r\n            if(sign === -1) {\r\n                var sm = arrayMin(keys(factors)); /*/get the smallest number*/\r\n                factors['-' + sm] = factors[sm];\r\n                delete factors[sm];\r\n            }\r\n\r\n            return factors;\r\n        },\r\n        //factors a number into rectangular box. If sides are primes that this will be\r\n        //their prime factors. e.g. 21 -> (7)(3), 133 -> (7)(19)\r\n        boxfactor: function (n, max) {\r\n            max = max || 200; //stop after this number of iterations\r\n            var c, r,\r\n                    d = Math.floor((5 / 12) * n), //the divisor\r\n                    i = 0, //number of iterations\r\n                    safety = false;\r\n            while(true) {\r\n                c = Math.floor(n / d);\r\n                r = n % d;\r\n                if(r === 0)\r\n                    break; //we're done\r\n                if(safety)\r\n                    return [n, 1];\r\n                d = Math.max(r, d - r);\r\n                i++;\r\n                safety = i > max;\r\n            }\r\n            return [c, d, i];\r\n        },\r\n        fib: function (n) {\r\n            var sign = Math.sign(n);\r\n            n = Math.abs(n);\r\n            sign = even(n) ? sign : Math.abs(sign);\r\n            var a = 0, b = 1, f = 1;\r\n            for(var i = 2; i <= n; i++) {\r\n                f = a + b;\r\n                a = b;\r\n                b = f;\r\n            }\r\n            return f * sign;\r\n        },\r\n        mod: function (x, y) {\r\n            return x % y;\r\n        },\r\n        //http://mathworld.wolfram.com/IntegerPart.html\r\n        integer_part: function (x) {\r\n            var sign = Math.sign(x);\r\n            return sign * Math.floor(Math.abs(x));\r\n        },\r\n        simpson: function (f, a, b, step) {\r\n            var get_value = function (f, x, side) {\r\n                var v = f(x);\r\n                var d = 0.000000000001;\r\n                if(isNaN(v)) {\r\n                    v = f(side === 1 ? x + d : x - d);\r\n                }\r\n                return v;\r\n            };\r\n\r\n            step = step || 0.0001;\r\n            //calculate the number of intervals\r\n            var n = Math.abs(Math.floor((b - a) / step));\r\n            //simpson's rule requires an even number of intervals. If it's not then add 1\r\n            if(n % 2 !== 0)\r\n                n++;\r\n            //get the interval size\r\n            var dx = (b - a) / n;\r\n            //get x0\r\n            var retval = get_value(f, a, 1);\r\n\r\n            //get the middle part 4x1+2x2+4x3 ...\r\n            //but first set a flag to see if it's even or odd.\r\n            //The first one is odd so we start there\r\n            var even = false;\r\n            //get x1\r\n            var xi = a + dx;\r\n            //the coefficient\r\n            var c, k;\r\n            //https://en.wikipedia.org/wiki/Simpson%27s_rule\r\n            for(var i = 1; i < n; i++) {\r\n                c = even ? 2 : 4;\r\n                k = c * get_value(f, xi, 1);\r\n                retval += k;\r\n                //flip the even flag\r\n                even = !even;\r\n                //increment xi\r\n                xi += dx;\r\n            }\r\n\r\n            //add xn\r\n            return (retval + get_value(f, xi, 2)) * (dx / 3);\r\n\r\n        },\r\n        /**\r\n         * https://github.com/scijs/integrate-adaptive-simpson\r\n         * @param {Function} f - the function being integrated\r\n         * @param {Number} a - lower bound\r\n         * @param {Number} b - upper bound\r\n         * @param {Number} tol - step width\r\n         * @param {Number} maxdepth\r\n         * @returns {Number}\r\n         */\r\n        num_integrate: function (f, a, b, tol, maxdepth) {\r\n            if(maxdepth < 0)\r\n                throw new Error('max depth cannot be negative');\r\n\r\n            /* This algorithm adapted from pseudocode in:*/\r\n            /* http://www.math.utk.edu/~ccollins/refs/Handouts/rich.pdf*/\r\n            function adsimp(f, a, b, fa, fm, fb, V0, tol, maxdepth, depth, state) {\r\n                if(state.nanEncountered) {\r\n                    return NaN;\r\n                }\r\n                var h, f1, f2, sl, sr, s2, m, V1, V2, err;\r\n                h = b - a;\r\n                f1 = f(a + h * 0.25);\r\n                f2 = f(b - h * 0.25);\r\n                /* Simple check for NaN:*/\r\n                if(isNaN(f1)) {\r\n                    state.nanEncountered = true;\r\n                    return;\r\n                }\r\n                /* Simple check for NaN:*/\r\n                if(isNaN(f2)) {\r\n                    state.nanEncountered = true;\r\n                    return;\r\n                }\r\n\r\n                sl = h * (fa + 4 * f1 + fm) / 12;\r\n                sr = h * (fm + 4 * f2 + fb) / 12;\r\n                s2 = sl + sr;\r\n                err = (s2 - V0) / 15;\r\n\r\n                if(state.maxDepthCount > 1000 * maxdepth) {\r\n                    return;\r\n                }\r\n\r\n\r\n                if(depth > maxdepth) {\r\n                    state.maxDepthCount++;\r\n                    return s2 + err;\r\n                }\r\n                else if(Math.abs(err) < tol) {\r\n                    return s2 + err;\r\n                }\r\n                else {\r\n                    m = a + h * 0.5;\r\n                    V1 = adsimp(f, a, m, fa, f1, fm, sl, tol * 0.5, maxdepth, depth + 1, state);\r\n                    if(isNaN(V1)) {\r\n                        state.nanEncountered = true;\r\n                        return NaN;\r\n                    }\r\n                    V2 = adsimp(f, m, b, fm, f2, fb, sr, tol * 0.5, maxdepth, depth + 1, state);\r\n\r\n                    if(isNaN(V2)) {\r\n                        state.nanEncountered = true;\r\n                        return NaN;\r\n                    }\r\n\r\n                    return V1 + V2;\r\n                }\r\n            }\r\n\r\n            function integrate(f, a, b, tol, maxdepth) {\r\n                var state = {\r\n                    maxDepthCount: 0,\r\n                    nanEncountered: false\r\n                };\r\n\r\n                if(tol === undefined) {\r\n                    tol = 1e-9;\r\n                }\r\n                if(maxdepth === undefined) {\r\n                    /*Issue #458 - This was lowered because of performance issues. */\r\n                    /*This was suspected from before but is now confirmed with this issue*/\r\n                    maxdepth = 45;\r\n                }\r\n\r\n                var fa = f(a);\r\n                var fm = f(0.5 * (a + b));\r\n                var fb = f(b);\r\n\r\n                var V0 = (fa + 4 * fm + fb) * (b - a) / 6;\r\n\r\n                var result = adsimp(f, a, b, fa, fm, fb, V0, tol, maxdepth, 1, state);\r\n\r\n                if(state.maxDepthCount > 0) {\r\n                    warn('integrate-adaptive-simpson: Warning: maximum recursion depth (' + maxdepth + ') reached ' + state.maxDepthCount + ' times');\r\n                }\r\n\r\n                if(state.nanEncountered) {\r\n                    throw new Error('Function does not converge over interval!');\r\n                }\r\n\r\n                return result;\r\n            }\r\n            var retval;\r\n\r\n            try {\r\n                retval = integrate(f, a, b, tol, maxdepth);\r\n            }\r\n            catch(e) {\r\n                /*fallback to non-adaptive*/\r\n                return Math2.simpson(f, a, b);\r\n            }\r\n            return nround(retval, 12);\r\n        },\r\n        //https://en.wikipedia.org/wiki/Trigonometric_integral\r\n        //CosineIntegral\r\n        Ci: function (x) {\r\n            var n = 20,\r\n                    /*roughly Euler–Mascheroni*/\r\n                    g = 0.5772156649015329,\r\n                    sum = 0;\r\n            for(var i = 1; i < n; i++) {\r\n                /*cache 2n*/\r\n                var n2 = 2 * i;\r\n                sum += (Math.pow(-1, i) * Math.pow(x, n2)) / (n2 * Math2.factorial(n2));\r\n            }\r\n            return Math.log(x) + g + sum;\r\n        },\r\n        /*SineIntegral*/\r\n        Si: function (x) {\r\n            var n = 20,\r\n                    sum = 0;\r\n            for(var i = 0; i < n; i++) {\r\n                var n2 = 2 * i;\r\n                sum += (Math.pow(-1, i) * Math.pow(x, n2 + 1)) / ((n2 + 1) * Math2.factorial(n2 + 1));\r\n            }\r\n            return sum;\r\n        },\r\n        /*ExponentialIntegral*/\r\n        Ei: function (x) {\r\n            if(Number(x) === 0)\r\n                return -Infinity;\r\n            var n = 30,\r\n                    g = 0.5772156649015328606, /*roughly Euler–Mascheroni*/\r\n                    sum = 0;\r\n            for(var i = 1; i < n; i++) {\r\n                sum += Math.pow(x, i) / (i * Math2.factorial(i));\r\n            }\r\n            return g + Math.abs(Math.log(x)) + sum;\r\n        },\r\n        /*Hyperbolic Sine Integral*/\r\n        /*http://mathworld.wolfram.com/Shi.html*/\r\n        Shi: function (x) {\r\n            var n = 30,\r\n                    sum = 0,\r\n                    k, t;\r\n            for(var i = 0; i < n; i++) {\r\n                k = 2 * i;\r\n                t = k + 1;\r\n                sum += Math.pow(x, t) / (t * t * Math2.factorial(k));\r\n            }\r\n            return sum;\r\n        },\r\n        /*the cosine integral function*/\r\n        Chi: function (x) {\r\n            var dx, g, f;\r\n            dx = 0.001;\r\n            g = 0.5772156649015328606;\r\n            f = function (t) {\r\n                return (Math.cosh(t) - 1) / t;\r\n            };\r\n            return Math.log(x) + g + Math2.num_integrate(f, 0.002, x, dx);\r\n        },\r\n        /*the log integral*/\r\n        Li: function (x) {\r\n            return Math2.Ei(Math2.bigLog(x));\r\n        },\r\n        /*the gamma incomplete function*/\r\n        gamma_incomplete: function (n, x) {\r\n            var t = n - 1,\r\n                    sum = 0,\r\n                    x = x || 0;\r\n            for(var i = 0; i < t; i++) {\r\n                sum += Math.pow(x, i) / Math2.factorial(i);\r\n            }\r\n            return Math2.factorial(t) * Math.exp(-x) * sum;\r\n        },\r\n        /*\r\n         * Heaviside step function - Moved from Special.js (originally contributed by Brosnan Yuen)\r\n         * Specification : http://mathworld.wolfram.com/HeavisideStepFunction.html\r\n         * if x > 0 then 1\r\n         * if x == 0 then 1/2\r\n         * if x < 0 then 0\r\n         */\r\n        step: function (x) {\r\n            if(x > 0)\r\n                return 1;\r\n            if(x < 0)\r\n                return 0;\r\n            return 0.5;\r\n        },\r\n        /*\r\n         * Rectangle function - Moved from Special.js (originally contributed by Brosnan Yuen)\r\n         * Specification : http://mathworld.wolfram.com/RectangleFunction.html\r\n         * if |x| > 1/2 then 0\r\n         * if |x| == 1/2 then 1/2\r\n         * if |x| < 1/2 then 1\r\n         */\r\n        rect: function (x) {\r\n            var x = Math.abs(x);\r\n            if(x === 0.5)\r\n                return x;\r\n            if(x > 0.5)\r\n                return 0;\r\n            return 1;\r\n        },\r\n        /*\r\n         * Sinc function - Moved from Special.js (originally contributed by Brosnan Yuen)\r\n         * Specification : http://mathworld.wolfram.com/SincFunction.html\r\n         * if x == 0 then 1\r\n         * otherwise sin(x)/x\r\n         */\r\n        sinc: function (x) {\r\n            if(x.equals(0))\r\n                return 1;\r\n            return Math.sin(x) / x;\r\n        },\r\n        /*\r\n         * Triangle function - Moved from Special.js (originally contributed by Brosnan Yuen)\r\n         * Specification : http://mathworld.wolfram.com/TriangleFunction.html\r\n         * if |x| >= 1 then 0\r\n         * if |x| < then 1-|x|\r\n         */\r\n        tri: function (x) {\r\n            x = Math.abs(x);\r\n            if(x >= 1)\r\n                return 0;\r\n            return 1 - x;\r\n        },\r\n        //https://en.wikipedia.org/wiki/Nth_root_algorithm\r\n        nthroot: function (A, n) {\r\n            /*make sure the input is of type Frac*/\r\n            if(!(A instanceof Frac))\r\n                A = new Frac(A.toString());\r\n            if(!(n instanceof Frac))\r\n                n = new Frac(n.toString());\r\n            if(n.equals(1))\r\n                return A;\r\n            /*begin algorithm*/\r\n            var xk = A.divide(new Frac(2)); /*x0*/\r\n            var e = new Frac(1e-15);\r\n            var dk, dk0, d0;\r\n            var a = n.clone().invert(),\r\n                    b = n.subtract(new Frac(1));\r\n            do {\r\n                var powb = Math2.bigpow(xk, b);\r\n                var dk_dec = a.multiply(A.divide(powb).subtract(xk)).toDecimal(25);\r\n                dk = Frac.create(dk_dec);\r\n                if(d0)\r\n                    break;\r\n\r\n                xk = xk.add(dk);\r\n                /*check to see if there's no change from the last xk*/\r\n                var dk_dec = dk.toDecimal();\r\n                d0 = dk0 ? dk0 === dk_dec : false;\r\n                dk0 = dk_dec;\r\n            }\r\n            while(dk.abs().gte(e))\r\n\r\n            return xk;\r\n        },\r\n        /*https://gist.github.com/jiggzson/0c5b33cbcd7b52b36132b1e96573285f*/\r\n        /*Just the square root function but big :)*/\r\n        sqrt: function (n) {\r\n            if(!(n instanceof Frac))\r\n                n = new Frac(n);\r\n            var xn, d, ld, same_delta;\r\n            var c = 0; /*counter*/\r\n            var done = false;\r\n            var delta = new Frac(1e-20);\r\n            xn = n.divide(new Frac(2));\r\n            var safety = 1000;\r\n            do {\r\n                /*break if we're not converging*/\r\n                if(c > safety)\r\n                    throw new Error('Unable to calculate square root for ' + n);\r\n                xn = xn.add(n.divide(xn)).divide(new Frac(2));\r\n                xn = new Frac(xn.decimal(30));\r\n                /*get the difference from the true square*/\r\n                d = n.subtract(xn.multiply(xn));\r\n                /*if the square of the calculated number is close enough to the number*/\r\n                /*we're getting the square root or the last delta was the same as the new delta*/\r\n                /*then we're done*/\r\n                same_delta = ld ? ld.equals(d) : false;\r\n                if(d.clone().abs().lessThan(delta) || same_delta)\r\n                    done = true;\r\n                /*store the calculated delta*/\r\n                ld = d;\r\n                c++; /*increase the counter*/\r\n            }\r\n            while(!done)\r\n\r\n            return xn;\r\n        }\r\n    };\r\n    //link the Math2 object to Settings.FUNCTION_MODULES\r\n    Settings.FUNCTION_MODULES.push(Math2);\r\n    reserveNames(Math2); //reserve the names in Math2\r\n\r\n\r\n//Polyfills ====================================================================\r\n    //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/\r\n    Math.sign = Math.sign || function (x) {\r\n        x = +x; // convert to a number\r\n        if(x === 0 || isNaN(x)) {\r\n            return x;\r\n        }\r\n        return x > 0 ? 1 : -1;\r\n    };\r\n\r\n    Math.cosh = Math.cosh || function (x) {\r\n        var y = Math.exp(x);\r\n        return (y + 1 / y) / 2;\r\n    };\r\n\r\n    Math.sech = Math.sech || function (x) {\r\n        return 1 / Math.cosh(x);\r\n    };\r\n\r\n    Math.csch = Math.csch || function (x) {\r\n        return 1 / Math.sinh(x);\r\n    };\r\n\r\n    Math.coth = Math.coth || function (x) {\r\n        return 1 / Math.tanh(x);\r\n    };\r\n\r\n    Math.sinh = Math.sinh || function (x) {\r\n        var y = Math.exp(x);\r\n        return (y - 1 / y) / 2;\r\n    };\r\n\r\n    Math.tanh = Math.tanh || function (x) {\r\n        if(x === Infinity) {\r\n            return 1;\r\n        }\r\n        else if(x === -Infinity) {\r\n            return -1;\r\n        }\r\n        else {\r\n            var y = Math.exp(2 * x);\r\n            return (y - 1) / (y + 1);\r\n        }\r\n    };\r\n\r\n    Math.asinh = Math.asinh || function (x) {\r\n        if(x === -Infinity) {\r\n            return x;\r\n        }\r\n        else {\r\n            return Math.log(x + Math.sqrt(x * x + 1));\r\n        }\r\n    };\r\n\r\n    Math.acosh = Math.acosh || function (x) {\r\n        return Math.log(x + Math.sqrt(x * x - 1));\r\n    };\r\n\r\n    Math.atanh = Math.atanh || function (x) {\r\n        return Math.log((1 + x) / (1 - x)) / 2;\r\n    };\r\n\r\n    Math.log10 = Math.log10 || function (x) {\r\n        return Math.log(x) * Math.LOG10E;\r\n    };\r\n\r\n    Math.trunc = Math.trunc || function (x) {\r\n        if(isNaN(x)) {\r\n            return NaN;\r\n        }\r\n        if(x > 0) {\r\n            return Math.floor(x);\r\n        }\r\n        return Math.ceil(x);\r\n    };\r\n\r\n//Global functions =============================================================\r\n    /**\r\n     * This method will return a hash or a text representation of a Symbol, Matrix, or Vector.\r\n     * If all else fails it *assumes* the object has a toString method and will call that.\r\n     *\r\n     * @param {Object} obj\r\n     * @param {String} option get is as a hash\r\n     * @param {int} useGroup\r\n     * @returns {String}\r\n     */\r\n    function text(obj, option, useGroup, decp) { \r\n        var asHash = option === 'hash',\r\n                //whether to wrap numbers in brackets\r\n                wrapCondition = undefined,\r\n                opt = asHash ? undefined : option,\r\n                asDecimal = opt === 'decimal' || opt === 'decimals';\r\n\r\n        if(asDecimal && typeof decp === 'undefined')\r\n            decp = Settings.DEFAULT_DECP;\r\n\r\n        function toString(obj) {\r\n            switch(option)\r\n            {\r\n                case 'decimals':\r\n                case 'decimal':\r\n                    wrapCondition = wrapCondition || function (str) {\r\n                        return false;\r\n                    };\r\n                    return obj.valueOf();\r\n                case 'recurring':\r\n                    wrapCondition = wrapCondition || function (str) {\r\n                        return str.indexOf(\"'\") !== -1;\r\n                    };\r\n\r\n                    var str = obj.toString();\r\n                    //verify that the string is actually a fraction\r\n                    var frac = /^-?\\d+(?:\\/\\d+)?$/.exec(str);\r\n                    if(frac.length === 0)\r\n                        return str;\r\n\r\n                    //split the fraction into the numerator and denominator\r\n                    var parts = frac[0].split('/');\r\n                    var negative = false;\r\n                    var m = Number(parts[0]);\r\n                    if(m < 0) {\r\n                        m = -m;\r\n                        negative = true;\r\n                    }\r\n                    var n = Number(parts[1]);\r\n                    if(!n)\r\n                        n = 1;\r\n\r\n                    //https://softwareengineering.stackexchange.com/questions/192070/what-is-a-efficient-way-to-find-repeating-decimal#comment743574_192081\r\n                    var quotient = Math.floor(m / n), c = 10 * (m - quotient * n);\r\n                    quotient = quotient.toString() + \".\";\r\n                    while(c && c < n) {\r\n                        c *= 10;\r\n                        quotient += \"0\";\r\n                    }\r\n                    var digits = \"\", passed = [], i = 0;\r\n                    while(true) {\r\n                        if(typeof passed[c] !== 'undefined') {\r\n                            var prefix = digits.slice(0, passed[c]),\r\n                                    cycle = digits.slice(passed[c]),\r\n                                    result = quotient + prefix + \"'\" + cycle + \"'\";\r\n                            return (negative ? \"-\" : \"\") + result.replace(\"'0'\", \"\").replace(/\\.$/, \"\");\r\n                        }\r\n                        var q = Math.floor(c / n), r = c - q * n;\r\n                        passed[c] = i;\r\n                        digits += q.toString();\r\n                        i += 1;\r\n                        c = 10 * r;\r\n                    }\r\n                case 'mixed':\r\n                    wrapCondition = wrapCondition || function (str) {\r\n                        return str.indexOf('/') !== -1;\r\n                    };\r\n\r\n                    var str = obj.toString();\r\n                    //verify that the string is actually a fraction\r\n                    var frac = /^-?\\d+(?:\\/\\d+)?$/.exec(str);\r\n                    if(frac.length === 0)\r\n                        return str;\r\n\r\n                    //split the fraction into the numerator and denominator\r\n                    var parts = frac[0].split('/');\r\n                    var numer = new bigInt(parts[0]);\r\n                    var denom = new bigInt(parts[1]);\r\n                    if(denom.equals(0))\r\n                        denom = new bigInt(1);\r\n\r\n                    //return the quotient plus the remainder\r\n                    var divmod = numer.divmod(denom);\r\n                    var quotient = divmod.quotient;\r\n                    var remainder = divmod.remainder;\r\n                    var operator = parts[0][0] === '-' || quotient.equals(0) || remainder.equals(0) ? '' : '+';\r\n                    return (quotient.equals(0) ? '' : quotient.toString()) + operator + (remainder.equals(0) ? '' : (remainder.toString() + '/' + parts[1]));\r\n                case 'scientific':\r\n                    wrapCondition = wrapCondition || function (str) {\r\n                        return false;\r\n                    };\r\n                    return new Scientific(obj.valueOf()).toString(Settings.SCIENTIFIC_MAX_DECIMAL_PLACES);\r\n                default:\r\n                    wrapCondition = wrapCondition || function (str) {\r\n                        return str.indexOf('/') !== -1;\r\n                    };\r\n\r\n                    return obj.toString();\r\n            }\r\n        }\r\n\r\n        //if the object is a symbol\r\n        if(isSymbol(obj)) {\r\n            var multiplier = '',\r\n                    power = '',\r\n                    sign = '',\r\n                    group = obj.group || useGroup,\r\n                    value = obj.value;\r\n\r\n            //if the value is to be used as a hash then the power and multiplier need to be suppressed\r\n            if(!asHash) {\r\n                //use asDecimal to get the object back as a decimal\r\n                var om = toString(obj.multiplier);\r\n                if(om == '-1' && String(obj.multiplier) === '-1') {\r\n                    sign = '-';\r\n                    om = '1';\r\n                }\r\n                //only add the multiplier if it's not 1\r\n                if(om != '1')\r\n                    multiplier = om;\r\n                //use asDecimal to get the object back as a decimal\r\n                var p = obj.power ? toString(obj.power) : '';\r\n                //only add the multiplier\r\n                if(p != '1') {\r\n                    //is it a symbol\r\n                    if(isSymbol(p)) {\r\n                        power = text(p, opt);\r\n                    }\r\n                    else {\r\n                        power = p;\r\n                    }\r\n                }\r\n            }\r\n\r\n            switch(group) {\r\n                case N:\r\n                    multiplier = '';\r\n                    //round if requested\r\n                    var m = decp && asDecimal ? obj.multiplier.toDecimal(decp) : toString(obj.multiplier);\r\n                    //if it's numerical then all we need is the multiplier\r\n                    value = String(obj.multiplier) == '-1' ? '1' : m;\r\n                    power = '';\r\n                    break;\r\n                case PL:\r\n                    value = obj.collectSymbols().map(function (x) {\r\n                        var txt = text(x, opt, useGroup, decp);\r\n                        if(txt == '0')\r\n                            txt = '';\r\n                        return txt;\r\n                    }).sort().join('+').replace(/\\+\\-/g, '-');\r\n                    break;\r\n                case CP:\r\n                    value = obj.collectSymbols().map(function (x) {\r\n                        var txt = text(x, opt, useGroup, decp);\r\n                        if(txt == '0')\r\n                            txt = '';\r\n                        return txt;\r\n                    }).sort().join('+').replace(/\\+\\-/g, '-');\r\n                    break;\r\n                case CB:\r\n                    value = obj.collectSymbols(function (symbol) {\r\n                        var g = symbol.group;\r\n                        //both groups will already be in brackets if their power is greater than 1\r\n                        //so skip it.\r\n                        if((g === PL || g === CP) && (symbol.power.equals(1) && symbol.multiplier.equals(1))) {\r\n                            return inBrackets(text(symbol, opt));\r\n                        }\r\n                        return text(symbol, opt);\r\n                    }).join('*');\r\n                    break;\r\n                case EX:\r\n                    var pg = obj.previousGroup,\r\n                            pwg = obj.power.group;\r\n\r\n                    //PL are the exception. It's simpler to just collect and set the value\r\n                    if(pg === PL)\r\n                        value = obj.collectSymbols(text, opt).join('+').replace('+-', '-');\r\n                    if(!(pg === N || pg === S || pg === FN) && !asHash) {\r\n                        value = inBrackets(value);\r\n                    }\r\n\r\n                    if((pwg === CP || pwg === CB || pwg === PL || obj.power.multiplier.toString() != '1') && power) {\r\n                        power = inBrackets(power);\r\n                    }\r\n                    break;\r\n            }\r\n\r\n            if(group === FN) {\r\n                value = obj.fname + inBrackets(obj.args.map(function (symbol) {\r\n                    return text(symbol, opt);\r\n                }).join(','));\r\n            }\r\n            //TODO: Needs to be more efficient. Maybe.\r\n            if(group === FN && obj.fname in CUSTOM_OPERATORS) {\r\n                var a = text(obj.args[0]);\r\n                var b = text(obj.args[1]);\r\n                if(obj.args[0].isComposite()) //preserve the brackets\r\n                    a = inBrackets(a);\r\n                if(obj.args[1].isComposite()) //preserve the brackets\r\n                    b = inBrackets(b);\r\n                value = a + CUSTOM_OPERATORS[obj.fname] + b;\r\n            }\r\n            //wrap the power since / is less than ^\r\n            //TODO: introduce method call isSimple\r\n            if(power && group !== EX && wrapCondition(power)) {\r\n                power = inBrackets(power);\r\n            }\r\n\r\n            //the following groups are held together by plus or minus. They can be raised to a power or multiplied\r\n            //by a multiplier and have to be in brackets to preserve the order of precedence\r\n            if(((group === CP || group === PL) && (multiplier && multiplier != '1' || sign === '-'))\r\n                    || ((group === CB || group === CP || group === PL) && (power && power != '1'))\r\n                    || !asHash && group === P && value == -1\r\n                    || obj.fname === PARENTHESIS) {\r\n\r\n                value = inBrackets(value);\r\n            }\r\n\r\n            if(decp && (option === 'decimal' || option === 'decimals' && multiplier)) {\r\n                multiplier = nround(multiplier, decp);\r\n            }\r\n\r\n\r\n            //add the sign back\r\n            var c = sign + multiplier;\r\n\r\n            if(multiplier && wrapCondition(multiplier))\r\n                c = inBrackets(c);\r\n\r\n            if(power < 0)\r\n                power = inBrackets(power);\r\n\r\n            //add the multiplication back\r\n            if(multiplier)\r\n                c = c + '*';\r\n\r\n            if(power) {\r\n                if(value === 'e' && Settings.E_TO_EXP) {\r\n                    return c + 'exp' + inBrackets(power);\r\n                }\r\n                power = Settings.POWER_OPERATOR + power;\r\n            }\r\n\r\n            //this needs serious rethinking. Must fix\r\n            if(group === EX && value.charAt(0) === '-') {\r\n                value = inBrackets(value);\r\n            }\r\n\r\n            var cv = c + value;\r\n\r\n            if(obj.parens) {\r\n                cv = inBrackets(cv);\r\n            }\r\n\r\n            return cv + power;\r\n        }\r\n        else if(isVector(obj)) {\r\n            var l = obj.elements.length,\r\n                    c = [];\r\n            for(var i = 0; i < l; i++)\r\n                c.push(obj.elements[i].text(option));\r\n            return '[' + c.join(',') + ']';\r\n        }\r\n        else {\r\n            try {\r\n                return obj.toString();\r\n            }\r\n            catch(e) {\r\n                return '';\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Calculates prime factors for a number. It first checks if the number\r\n     * is a prime number. If it's not then it will calculate all the primes \r\n     * for that number.\r\n     * @param {int} num\r\n     * @returns {Array}\r\n     */\r\n\r\n    function primeFactors(num) {\r\n        if(isPrime(num)) {\r\n            return [num];\r\n        }\r\n\r\n        var l = num, i = 1, factors = [],\r\n                epsilon = 2.2204460492503130808472633361816E-16;\r\n        while(i < l) {\r\n            var quotient = num / i;\r\n            var whole = Math.floor(quotient);\r\n            var remainder = quotient - whole;\r\n\r\n            if(remainder <= epsilon && i > 1) {\r\n                // If the prime wasn't found but calculated then save it and\r\n                // add it as a factor.\r\n                if(isPrime(i)) {\r\n                    if(PRIMES.indexOf(i) === -1) {\r\n                        PRIMES.push(i);\r\n                    }\r\n                    factors.push(i);\r\n                }\r\n\r\n                // Check if the remainder is a prime\r\n                if(isPrime(whole)) {\r\n                    factors.push(whole);\r\n                    break;\r\n                }\r\n\r\n                l = whole;\r\n            }\r\n            i++;\r\n        }\r\n\r\n        return factors.sort(function (a, b) {\r\n            return a - b;\r\n        });\r\n    }\r\n    ;\r\n    primeFactors(314146179365)\r\n//Expression ===================================================================\r\n    /**\r\n     * This is what nerdamer returns. It's sort of a wrapper around the symbol class and\r\n     * provides the user with some useful functions. If you want to provide the user with extra\r\n     * library functions then add them to this class's prototype.\r\n     * @param {Symbol} symbol\r\n     * @returns {Expression} wraps around the Symbol class\r\n     */\r\n    function Expression(symbol) {\r\n        //we don't want arrays wrapped\r\n        this.symbol = symbol;\r\n    }\r\n    /**\r\n     * Returns stored expression at index. For first index use 1 not 0.\r\n     * @param {bool} asType\r\n     * @param {Integer} expression_number\r\n     */\r\n    Expression.getExpression = function (expression_number, asType) {\r\n        if(expression_number === 'last' || !expression_number)\r\n            expression_number = EXPRESSIONS.length;\r\n        if(expression_number === 'first')\r\n            expression_number = 1;\r\n        var index = expression_number - 1,\r\n                expression = EXPRESSIONS[index],\r\n                retval = expression ? new Expression(expression) : expression;\r\n        return retval;\r\n    };\r\n    Expression.prototype = {\r\n        /**\r\n         * Returns the text representation of the expression\r\n         * @param {String} opt - option of formatting numbers\r\n         * @param {Number} n The number of significant figures\r\n         * @returns {String}\r\n         */\r\n        text: function (opt, n) {\r\n            n = n || Settings.EXPRESSION_DECP;\r\n            opt = opt || 'decimals';\r\n            if(this.symbol.text_)\r\n                return this.symbol.text_(opt);\r\n\r\n            return text(this.symbol, opt, undefined, n);\r\n        },\r\n        /**\r\n         * Returns the latex representation of the expression\r\n         * @param {String} option - option for formatting numbers\r\n         * @returns {String}\r\n         */\r\n        latex: function (option) {\r\n            if(this.symbol.latex)\r\n                return this.symbol.latex(option);\r\n            return LaTeX.latex(this.symbol, option);\r\n        },\r\n        valueOf: function () {\r\n            return this.symbol.valueOf();\r\n        },\r\n\r\n        /**\r\n         * Evaluates the expression and tries to reduce it to a number if possible.\r\n         * If an argument is given in the form of %{integer} it will evaluate that expression.\r\n         * Other than that it will just use it's own text and reparse\r\n         * @returns {Expression}\r\n         */\r\n        evaluate: function () {\r\n\r\n            // Don't evaluate an empty vector\r\n            if(isVector(this.symbol) && this.symbol.dimensions() === 0) {\r\n                return this;\r\n            }\r\n\r\n            var first_arg = arguments[0], expression, idx = 1;\r\n\r\n            //Enable getting of expressions using the % so for example %1 should get the first expression\r\n            if(typeof first_arg === 'string') {\r\n                expression = (first_arg.charAt(0) === '%') ? Expression.getExpression(first_arg.substr(1)).text() : first_arg;\r\n            }\r\n            else if(first_arg instanceof Expression || isSymbol(first_arg)) {\r\n                expression = first_arg.text();\r\n            }\r\n            else {\r\n                expression = this.symbol.text();\r\n                idx--;\r\n            }\r\n\r\n            var subs = arguments[idx] || {};\r\n\r\n            var retval = new Expression(block('PARSE2NUMBER', function () {\r\n                return _.parse(expression, subs);\r\n            }, true));\r\n\r\n            return retval;\r\n        },\r\n        /**\r\n         * Converts a symbol to a JS function. Pass in an array of variables to use that order instead of\r\n         * the default alphabetical order\r\n         * @param vars {Array}\r\n         */\r\n        buildFunction: function (vars) {\r\n            return Build.build(this.symbol, vars);\r\n        },\r\n        /**\r\n         * Checks to see if the expression is just a plain old number\r\n         * @returns {boolean}\r\n         */\r\n        isNumber: function () {\r\n            return isNumericSymbol(this.symbol);\r\n        },\r\n        /**\r\n         * Checks to see if the expression is infinity\r\n         * @returns {boolean}\r\n         */\r\n        isInfinity: function () {\r\n            return Math.abs(this.symbol.multiplier) === Infinity;\r\n        },\r\n        /**\r\n         * Checks to see if the expression contains imaginary numbers\r\n         * @returns {boolean}\r\n         */\r\n        isImaginary: function () {\r\n            return evaluate(_.parse(this.symbol)).isImaginary();\r\n        },\r\n        /**\r\n         * Returns all the variables in the expression\r\n         * @returns {Array}\r\n         */\r\n        variables: function () {\r\n            return variables(this.symbol);\r\n        },\r\n\r\n        toString: function () {\r\n            try {\r\n                if(isArray(this.symbol))\r\n                    return '[' + this.symbol.toString() + ']';\r\n                return this.symbol.toString();\r\n            }\r\n            catch(e) {\r\n                return '';\r\n            }\r\n        },\r\n        //forces the symbol to be returned as a decimal\r\n        toDecimal: function (prec) {\r\n            Settings.precision = prec;\r\n            var dec = text(this.symbol, 'decimals');\r\n            Settings.precision = undefined;\r\n            return dec;\r\n        },\r\n        //checks to see if the expression is a fraction\r\n        isFraction: function () {\r\n            return isFraction(this.symbol);\r\n        },\r\n        //checks to see if the symbol is a multivariate polynomial\r\n        isPolynomial: function () {\r\n            return this.symbol.isPoly();\r\n        },\r\n        //performs a substitution\r\n        sub: function (symbol, for_symbol) {\r\n            return new Expression(this.symbol.sub(_.parse(symbol), _.parse(for_symbol)));\r\n        },\r\n        operation: function (otype, symbol) {\r\n            if(isExpression(symbol))\r\n                symbol = symbol.symbol;\r\n            else if(!isSymbol(symbol))\r\n                symbol = _.parse(symbol);\r\n            return new Expression(_[otype](this.symbol.clone(), symbol.clone()));\r\n        },\r\n        add: function (symbol) {\r\n            return this.operation('add', symbol);\r\n        },\r\n        subtract: function (symbol) {\r\n            return this.operation('subtract', symbol);\r\n        },\r\n        multiply: function (symbol) {\r\n            return this.operation('multiply', symbol);\r\n        },\r\n        divide: function (symbol) {\r\n            return this.operation('divide', symbol);\r\n        },\r\n        pow: function (symbol) {\r\n            return this.operation('pow', symbol);\r\n        },\r\n        expand: function () {\r\n            return new Expression(_.expand(this.symbol));\r\n        },\r\n        each: function (callback, i) {\r\n            if(this.symbol.each)\r\n                this.symbol.each(callback, i);\r\n            else if(isArray(this.symbol)) {\r\n                for(var i = 0; i < this.symbol.length; i++)\r\n                    callback.call(this.symbol, this.symbol[i], i);\r\n            }\r\n            else\r\n                callback.call(this.symbol);\r\n        },\r\n        eq: function (value) {\r\n            if(!isSymbol(value))\r\n                value = _.parse(value);\r\n            try {\r\n                var d = _.subtract(this.symbol.clone(), value);\r\n                return d.equals(0);\r\n            }\r\n            catch(e) {\r\n                return false;\r\n            }\r\n            ;\r\n        },\r\n        lt: function (value) {\r\n            if(!isSymbol(value))\r\n                value = _.parse(value);\r\n            try {\r\n                var d = evaluate(_.subtract(this.symbol.clone(), value));\r\n                return d.lessThan(0);\r\n            }\r\n            catch(e) {\r\n                return false;\r\n            }\r\n            ;\r\n        },\r\n        gt: function (value) {\r\n            if(!isSymbol(value))\r\n                value = _.parse(value);\r\n            try {\r\n                var d = evaluate(_.subtract(this.symbol.clone(), value));\r\n                return d.greaterThan(0);\r\n            }\r\n            catch(e) {\r\n                return false;\r\n            }\r\n        },\r\n        gte: function (value) {\r\n            return this.gt(value) || this.eq(value);\r\n        },\r\n        lte: function (value) {\r\n            return this.lt(value) || this.eq(value);\r\n        },\r\n\r\n        numerator: function () {\r\n            return new Expression(this.symbol.getNum());\r\n        },\r\n        denominator: function () {\r\n            return new Expression(this.symbol.getDenom());\r\n        },\r\n        hasFunction: function (f) {\r\n            return this.symbol.containsFunction(f);\r\n        },\r\n        contains: function (variable) {\r\n            return this.symbol.contains(variable);\r\n        }\r\n    };\r\n    //Aliases\r\n    Expression.prototype.toTeX = Expression.prototype.latex;\r\n\r\n    \r\n//Scientific ===================================================================\r\n    /*\r\n     * Javascript has the toExponential method but this allows you to work with string and therefore any number of digits of your choosing\r\n     * For example Scientific('464589498449496467924197545625247695464569568959124568489548454');\r\n     */\r\n\r\n    function Scientific(num) {\r\n        if(!(this instanceof Scientific))\r\n            return new Scientific(num);\r\n\r\n        num = String(typeof num === 'undefined' ? 0 : num); //convert to a string\r\n\r\n        //remove the sign\r\n        if(num.startsWith('-')) {\r\n            this.sign = -1;\r\n            //remove the sign\r\n            num = num.substr(1, num.length);\r\n        }\r\n        else {\r\n            this.sign = 1;\r\n        }\r\n\r\n        if(Scientific.isScientific(num)) {\r\n            this.fromScientific(num);\r\n        }\r\n        else {\r\n            this.convert(num);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    Scientific.prototype = {\r\n        fromScientific: function (num) {\r\n            var parts = String(num).toLowerCase().split('e');\r\n            this.coeff = parts[0];\r\n            this.exponent = parts[1];\r\n\r\n            return this;\r\n        },\r\n        convert: function (num) {\r\n            //get wholes and decimals\r\n            var parts = num.split('.');\r\n            //make zero go away\r\n            var w = parts[0] || '';\r\n            var d = parts[1] || '';\r\n            //convert zero to blank strings\r\n            w = Scientific.removeLeadingZeroes(w);\r\n            d = Scientific.removeTrailingZeroes(d);\r\n            //find the location of the decimal place which is right after the wholes\r\n            var dot_location = w.length;\r\n            //add them together so we can move the dot\r\n            var n = w + d;\r\n            //find the next number\r\n            var zeroes = Scientific.leadingZeroes(n).length;\r\n            //set the exponent\r\n            this.exponent = dot_location - (zeroes + 1);\r\n            //set the coeff but first remove leading zeroes\r\n            var coeff = Scientific.removeLeadingZeroes(n);\r\n            this.coeff = coeff.charAt(0) + '.' + (coeff.substr(1, coeff.length) || '0');\r\n\r\n            //the coeff decimal places\r\n            var dec = this.coeff.split('.')[1] || ''; //if it's undefined or zero it's going to blank\r\n\r\n            this.decp = dec === '0' ? 0 : dec.length;\r\n            //decimals\r\n            this.dec = d;\r\n            //wholes\r\n            this.wholes = w;\r\n\r\n            return this;\r\n        },\r\n        round: function (num) {\r\n            var n = this.copy();\r\n\r\n            num = Number(num); //cast to number for safety\r\n            //since we know it guaranteed to be in the format {digit}{optional dot}{optional digits}\r\n            //we can round based on this\r\n            if(num === 0)\r\n                n.coeff = n.coeff.charAt(0);\r\n            else {\r\n                //get up to n-1 digits\r\n                var rounded = this.coeff.substring(0, num + 1);\r\n                //get the next two\r\n                var next_two = this.coeff.substring(num + 1, num + 3);\r\n                //the extra digit\r\n                var ed = next_two.charAt(0);\r\n\r\n                if(next_two.charAt(1) > 4)\r\n                    ed++;\r\n\r\n                n.coeff = rounded + ed;\r\n            }\r\n\r\n            return n;\r\n        },\r\n        copy: function () {\r\n            var n = new Scientific(0);\r\n            n.coeff = this.coeff;\r\n            n.exponent = this.exponent;\r\n            n.sign = this.sign;\r\n            return n;\r\n        },\r\n        toString: function (n) {\r\n            var retval;\r\n\r\n            if(Settings.SCIENTIFIC_IGNORE_ZERO_EXPONENTS && this.exponent === 0 && this.decp < n) {\r\n                if(this.decp === 0)\r\n                    retval = this.wholes;\r\n                else\r\n                    retval = this.coeff;\r\n            }\r\n            else {\r\n                var coeff = typeof n === 'undefined' ? this.coeff : Scientific.round(this.coeff, Math.min(n, this.decp || 1));\r\n                retval = this.exponent === 0 ? coeff : coeff + 'e' + this.exponent;\r\n            }\r\n\r\n            return (this.sign === -1 ? '-' : '') + retval;\r\n        }\r\n    };\r\n\r\n    Scientific.isScientific = function (num) {\r\n        return /\\d+\\.?\\d*e[\\+\\-]*\\d+/i.test(num);\r\n    };\r\n    Scientific.leadingZeroes = function (num) {\r\n        var match = num.match(/^(0*).*$/);\r\n        return match ? match[1] : '';\r\n    };\r\n    Scientific.removeLeadingZeroes = function (num) {\r\n        var match = num.match(/^0*(.*)$/);\r\n        return match ? match[1] : '';\r\n    };\r\n\r\n    Scientific.removeTrailingZeroes = function (num) {\r\n        var match = num.match(/0*$/);\r\n        return match ? num.substring(0, num.length - match[0].length) : '';\r\n    };\r\n\r\n    Scientific.round = function (c, n) {\r\n        var coeff = nround(c, n);\r\n        var m = String(coeff).split('.').pop();\r\n        var d = n - m.length;\r\n        //if we're asking for more significant figures\r\n        if(d > 0) {\r\n            coeff = coeff + (new Array(d + 1).join(0));\r\n        }\r\n        return coeff;\r\n    };\r\n\r\n//Frac =========================================================================\r\n    function Frac(n) {\r\n        if(n instanceof Frac)\r\n            return n;\r\n        if(n === undefined)\r\n            return this;\r\n        try {\r\n            if(isInt(n)) {\r\n                try {\r\n                    this.num = bigInt(n);\r\n                    this.den = bigInt(1);\r\n                }\r\n                catch(e) {\r\n                    return Frac.simple(n);\r\n                }\r\n            }\r\n            else {\r\n                var frac = n instanceof bigDec ? Fraction.quickConversion(n) : Fraction.convert(n);\r\n                this.num = new bigInt(frac[0]);\r\n                this.den = new bigInt(frac[1]);\r\n            }\r\n        }\r\n        catch(e) {\r\n            return Frac.simple(n);\r\n        }\r\n\r\n    }\r\n    //safe to use with negative numbers or other types\r\n    Frac.create = function (n) {\r\n        if(n instanceof Frac)\r\n            return n;\r\n        n = n.toString();\r\n        var is_neg = n.charAt(0) === '-'; //check if it's negative\r\n        if(is_neg)\r\n            n = n.substr(1, n.length - 1); //remove the sign\r\n        var frac = new Frac(n);\r\n        //put the sign back\r\n        if(is_neg)\r\n            frac.negate();\r\n        return frac;\r\n    };\r\n    Frac.isFrac = function (o) {\r\n        return (o instanceof Frac);\r\n    };\r\n    Frac.quick = function (n, d) {\r\n        var frac = new Frac();\r\n        frac.num = new bigInt(n);\r\n        frac.den = new bigInt(d);\r\n        return frac;\r\n    };\r\n    Frac.simple = function (n) {\r\n        var nstr = String(scientificToDecimal(n)),\r\n                m_dc = nstr.split('.'),\r\n                num = m_dc.join(''),\r\n                den = 1,\r\n                l = (m_dc[1] || '').length;\r\n        for(var i = 0; i < l; i++)\r\n            den += '0';\r\n        var frac = Frac.quick(num, den);\r\n        return frac.simplify();\r\n    };\r\n    Frac.prototype = {\r\n        multiply: function (m) {\r\n            if(this.isOne()) {\r\n                return m.clone();\r\n            }\r\n            if(m.isOne()) {\r\n                return this.clone();\r\n            }\r\n\r\n            var c = this.clone();\r\n            c.num = c.num.multiply(m.num);\r\n            c.den = c.den.multiply(m.den);\r\n\r\n            return c.simplify();\r\n        },\r\n        divide: function (m) {\r\n            if(m.equals(0))\r\n                throw new DivisionByZero('Division by zero not allowed!');\r\n            return this.clone().multiply(m.clone().invert()).simplify();\r\n        },\r\n        subtract: function (m) {\r\n            return this.clone().add(m.clone().neg());\r\n        },\r\n        neg: function () {\r\n            this.num = this.num.multiply(-1);\r\n            return this;\r\n        },\r\n        add: function (m) {\r\n            var n1 = this.den, n2 = m.den, c = this.clone();\r\n            var a = c.num, b = m.num;\r\n            if(n1.equals(n2)) {\r\n                c.num = a.add(b);\r\n            }\r\n            else {\r\n                c.num = a.multiply(n2).add(b.multiply(n1));\r\n                c.den = n1.multiply(n2);\r\n            }\r\n\r\n            return c.simplify();\r\n        },\r\n        mod: function (m) {\r\n            var a = this.clone(),\r\n                    b = m.clone();\r\n            //make their denominators even and return the mod of their numerators\r\n            a.num = a.num.multiply(b.den);\r\n            a.den = a.den.multiply(b.den);\r\n            b.num = b.num.multiply(this.den);\r\n            b.den = b.den.multiply(this.den);\r\n            a.num = a.num.mod(b.num);\r\n            return a.simplify();\r\n        },\r\n        simplify: function () {\r\n            var gcd = bigInt.gcd(this.num, this.den);\r\n\r\n            this.num = this.num.divide(gcd);\r\n            this.den = this.den.divide(gcd);\r\n            return this;\r\n        },\r\n        clone: function () {\r\n            var m = new Frac();\r\n            m.num = new bigInt(this.num);\r\n            m.den = new bigInt(this.den);\r\n            return m;\r\n        },\r\n        decimal: function (prec) {\r\n            var sign = this.num.isNegative() ? '-' : '';\r\n            if(this.num.equals(this.den)) {\r\n                return '1';\r\n            }\r\n            //go plus one for rounding\r\n            prec = prec || Settings.PRECISION;\r\n            prec++;\r\n            var narr = [],\r\n                    n = this.num.abs(),\r\n                    d = this.den;\r\n            for(var i = 0; i < prec; i++) {\r\n                var w = n.divide(d), //divide out whole\r\n                        r = n.subtract(w.multiply(d)); //get remainder\r\n\r\n                narr.push(w);\r\n                if(r.equals(0))\r\n                    break;\r\n                n = r.times(10); //shift one dec place\r\n            }\r\n            var whole = narr.shift();\r\n            if(narr.length === 0) {\r\n                return sign + whole.toString();\r\n            }\r\n\r\n            if(i === prec) {\r\n                var lt = [];\r\n                //get the last two so we can round it\r\n                for(var i = 0; i < 2; i++)\r\n                    lt.unshift(narr.pop());\r\n                //put the last digit back by rounding the last two\r\n                narr.push(Math.round(lt.join('.')));\r\n            }\r\n\r\n            var dec = whole.toString() + '.' + narr.join('');\r\n            return sign + dec;\r\n        },\r\n        toDecimal: function (prec) { \r\n            prec = prec || Settings.PRECISION;\r\n            if(prec) {\r\n                return this.decimal(prec);\r\n            }\r\n            else {\r\n                return this.num / this.den;\r\n            }\r\n        },\r\n        qcompare: function (n) {\r\n            return [this.num.multiply(n.den), n.num.multiply(this.den)];\r\n        },\r\n        equals: function (n) {\r\n            if(!isNaN(n))\r\n                n = new Frac(n);\r\n            var q = this.qcompare(n);\r\n\r\n            return q[0].equals(q[1]);\r\n        },\r\n        absEquals: function (n) {\r\n            if(!isNaN(n))\r\n                n = new Frac(n);\r\n            var q = this.qcompare(n);\r\n\r\n            return q[0].abs().equals(q[1]);\r\n        },\r\n        //lazy check to be fixed. Sufficient for now but will cause future problems\r\n        greaterThan: function (n) {\r\n            if(!isNaN(n))\r\n                n = new Frac(n);\r\n            var q = this.qcompare(n);\r\n\r\n            return q[0].gt(q[1]);\r\n        },\r\n        gte: function (n) {\r\n            return this.greaterThan(n) || this.equals(n);\r\n        },\r\n        lte: function (n) {\r\n            return this.lessThan(n) || this.equals(n);\r\n        },\r\n        lessThan: function (n) {\r\n            if(!isNaN(n))\r\n                n = new Frac(n);\r\n            var q = this.qcompare(n);\r\n\r\n            return q[0].lt(q[1]);\r\n        },\r\n        isInteger: function () {\r\n            return this.den.equals(1);\r\n        },\r\n        negate: function () {\r\n            this.num = this.num.multiply(-1);\r\n            return this;\r\n        },\r\n        invert: function () {\r\n            var t = this.den;\r\n            //why invert 0/1? It'll become 1/0 and that's a lie.\r\n            if(!this.num.equals(0)) {\r\n                var isnegative = this.num.isNegative();\r\n                this.den = this.num.abs();\r\n                this.num = t;\r\n                if(isnegative)\r\n                    this.num = this.num.multiply(-1);\r\n            }\r\n\r\n            return this;\r\n        },\r\n        isOne: function () {\r\n            return this.num.equals(1) && this.den.equals(1);\r\n        },\r\n        sign: function () {\r\n            return this.num.isNegative() ? -1 : 1;\r\n        },\r\n        abs: function () {\r\n            this.num = this.num.abs();\r\n            return this;\r\n        },\r\n        gcd: function (f) {\r\n            return Frac.quick(bigInt.gcd(f.num, this.num), bigInt.lcm(f.den, this.den));\r\n        },\r\n        toString: function () {\r\n            return !this.den.equals(1) ? this.num.toString() + '/' + this.den.toString() : this.num.toString();\r\n        },\r\n        valueOf: function () {\r\n//            if(this.num == 24) throw new Error(999)\r\n            if(Settings.USE_BIG)\r\n                return new bigDec(this.num.toString()).div(new bigDec(this.den.toString()));\r\n            var retval = this.num / this.den;\r\n            return retval;\r\n        },\r\n        isNegative: function () {\r\n            return this.toDecimal() < 0;\r\n        }\r\n    };\r\n\r\n//Symbol =======================================================================\r\n    /**\r\n     * All symbols e.g. x, y, z, etc or functions are wrapped in this class. All symbols have a multiplier and a group.\r\n     * All symbols except for \"numbers (group N)\" have a power.\r\n     * @class Primary data type for the Parser.\r\n     * @param {String} obj\r\n     * @returns {Symbol}\r\n     */\r\n    function Symbol(obj) {\r\n        var isInfinity = obj === 'Infinity';\r\n        // This enables the class to be instantiated without the new operator\r\n        if(!(this instanceof Symbol)) {\r\n            return new Symbol(obj);\r\n        }\r\n        // Convert big numbers to a string\r\n        if(obj instanceof bigDec) {\r\n            obj = obj.toString();\r\n        }\r\n        //define numeric symbols\r\n        if(/^(\\-?\\+?\\d+)\\.?\\d*e?\\-?\\+?\\d*/i.test(obj) || obj instanceof bigDec) {\r\n            this.group = N;\r\n            this.value = CONST_HASH;\r\n            this.multiplier = new Frac(obj);\r\n        }\r\n        //define symbolic symbols\r\n        else {\r\n            this.group = S;\r\n            validateName(obj);\r\n            this.value = obj;\r\n            this.multiplier = new Frac(1);\r\n            this.imaginary = obj === Settings.IMAGINARY;\r\n            this.isInfinity = isInfinity;\r\n        }\r\n\r\n        //As of 6.0.0 we switched to infinite precision so all objects have a power\r\n        //Although this is still redundant in constants, it simplifies the logic in\r\n        //other parts so we'll keep it\r\n        this.power = new Frac(1);\r\n\r\n        // Added to silence the strict warning.\r\n        return this;\r\n    }\r\n    /**\r\n     * Returns vanilla imaginary symbol\r\n     * @returns {Symbol}\r\n     */\r\n    Symbol.imaginary = function () {\r\n        var s = new Symbol(Settings.IMAGINARY);\r\n        s.imaginary = true;\r\n        return s;\r\n    };\r\n    /**\r\n     * Return nerdamer's representation of Infinity\r\n     * @param {int} negative -1 to return negative infinity\r\n     * @returns {Symbol}\r\n     */\r\n    Symbol.infinity = function (negative) {\r\n        var v = new Symbol('Infinity');\r\n        if(negative === -1)\r\n            v.negate();\r\n        return v;\r\n    };\r\n    Symbol.shell = function (group, value) {\r\n        var symbol = new Symbol(value);\r\n        symbol.group = group;\r\n        symbol.symbols = {};\r\n        symbol.length = 0;\r\n        return symbol;\r\n    };\r\n    //sqrt(x) -> x^(1/2)\r\n    Symbol.unwrapSQRT = function (symbol, all) {\r\n        var p = symbol.power;\r\n        if(symbol.fname === SQRT && (symbol.isLinear() || all)) {\r\n            var t = symbol.args[0].clone();\r\n            t.power = t.power.multiply(new Frac(1 / 2));\r\n            t.multiplier = t.multiplier.multiply(symbol.multiplier);\r\n            symbol = t;\r\n            if(all)\r\n                symbol.power = p.multiply(new Frac(1 / 2));\r\n        }\r\n\r\n        return symbol;\r\n    };\r\n    Symbol.hyp = function (a, b) {\r\n        a = a || new Symbol(0);\r\n        b = b || new Symbol(0);\r\n        return _.sqrt(_.add(_.pow(a.clone(), new Symbol(2)), _.pow(b.clone(), new Symbol(2))));\r\n    };\r\n    //converts to polar form array\r\n    Symbol.toPolarFormArray = function (symbol) {\r\n        var re, im, r, theta;\r\n        re = symbol.realpart();\r\n        im = symbol.imagpart();\r\n        r = Symbol.hyp(re, im);\r\n        theta = re.equals(0) ? _.parse('pi/2') : _.trig.atan(_.divide(im, re));\r\n        return [r, theta];\r\n    };\r\n    //removes parentheses\r\n    Symbol.unwrapPARENS = function (symbol) {\r\n        if(symbol.fname === '') {\r\n            var r = symbol.args[0];\r\n            r.power = r.power.multiply(symbol.power);\r\n            r.multiplier = r.multiplier.multiply(symbol.multiplier);\r\n            if(symbol.fname === '')\r\n                return Symbol.unwrapPARENS(r);\r\n            return r;\r\n        }\r\n        return symbol;\r\n    };\r\n    //quickly creates a Symbol\r\n    Symbol.create = function (value, power) {\r\n        power = power === undefined ? 1 : power;\r\n        return _.parse('(' + value + ')^(' + power + ')');\r\n    };\r\n    Symbol.prototype = {\r\n        /**\r\n         * Gets nth root accounting for rounding errors\r\n         * @param {Number} n\r\n         * @return {Number}\r\n         */\r\n        getNth: function (n) {\r\n            // First calculate the root\r\n            var root = evaluate(_.pow(_.parse(this.multiplier), _.parse(n).invert()));\r\n            // Round of any errors\r\n            var rounded = _.parse(nround(root));\r\n            // Reverse the root\r\n            var e = evaluate(_.pow(rounded, _.parse(n)));\r\n            // If the rounded root equals the original number then we're good \r\n            if(e.equals(_.parse(this.multiplier))) {\r\n                return rounded;\r\n            }\r\n            // Otherwise return the unrounded version\r\n            return root;\r\n        },\r\n        /**\r\n         * Checks if symbol is to the nth power\r\n         * @returns {Boolean}\r\n         */\r\n        isToNth: function (n) {\r\n            // Start by check in the multiplier for squareness\r\n            // First get the root but round it because currently we still depend \r\n            var root = this.getNth(n);\r\n            var nthMultiplier = isInt(root);\r\n            var nthPower;\r\n\r\n            if(this.group === CB) {\r\n                // Start by assuming that all will be square.\r\n                nthPower = true;\r\n                // All it takes is for one of the symbols to not have an even power\r\n                // e.g. x^n1*y^n2 requires that both n1 and n2 are even\r\n                this.each(function (x) {\r\n                    var isNth = x.isToNth(n);\r\n\r\n                    if(!isNth) {\r\n                        nthPower = false;\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                // Check if the power is divisible by n if it's not a number.\r\n                nthPower = this.group === N ? true : isInt(_.divide(_.parse(this.power), _.parse(n)));\r\n            }\r\n\r\n            return nthMultiplier && nthPower;\r\n        },\r\n        /**\r\n         * Checks if a symbol is square\r\n         * @return {Boolean}\r\n         */\r\n        isSquare: function () {\r\n            return this.isToNth(2);\r\n        },\r\n        /**\r\n         * Checks if a symbol is cube\r\n         * @return {Boolean}\r\n         */\r\n        isCube: function () {\r\n            return this.isToNth(3);\r\n        },\r\n        /**\r\n         * Checks if a symbol is a bare variable\r\n         * @return {Boolean}\r\n         */\r\n        isSimple: function () {\r\n            return this.power.equals(1) && this.multiplier.equals(1);\r\n        },\r\n        /**\r\n         * Simplifies the power of the symbol\r\n         * @returns {Symbol} a clone of the symbol\r\n         */\r\n        powSimp: function () {\r\n            if(this.group === CB) {\r\n                var powers = [],\r\n                        sign = this.multiplier.sign();\r\n                this.each(function (x) {\r\n                    var p = x.power;\r\n                    //why waste time if I can't do anything anyway\r\n                    if(isSymbol(p) || p.equals(1))\r\n                        return this.clone();\r\n                    powers.push(p);\r\n                });\r\n                var min = new Frac(arrayMin(powers));\r\n\r\n                //handle the coefficient\r\n                //handle the multiplier\r\n                var sign = this.multiplier.sign(),\r\n                        m = this.multiplier.clone().abs(),\r\n                        mfactors = Math2.ifactor(m);\r\n                //if we have a multiplier of 6750 and a min of 2 then the factors are 5^3*5^3*2\r\n                //we can then reduce it to 2*3*5*(15)^2\r\n                var out_ = new Frac(1);\r\n                var in_ = new Frac(1);\r\n\r\n                for(var x in mfactors) {\r\n                    var n = new Frac(mfactors[x]);\r\n                    if(!n.lessThan(min)) {\r\n                        n = n.divide(min).subtract(new Frac(1));\r\n                        in_ = in_.multiply(new Frac(x)); //move the factor inside the bracket\r\n                    }\r\n\r\n                    out_ = out_.multiply(_.parse(inBrackets(x) + '^' + inBrackets(n)).multiplier);\r\n                }\r\n                var t = new Symbol(in_);\r\n                this.each(function (x) {\r\n                    x = x.clone();\r\n                    x.power = x.power.divide(min);\r\n                    t = _.multiply(t, x);\r\n                });\r\n\r\n                var xt = _.symfunction(PARENTHESIS, [t]);\r\n                xt.power = min;\r\n                xt.multiplier = sign < 0 ? out_.negate() : out_;\r\n\r\n                return xt;\r\n            }\r\n            return this.clone();\r\n        },\r\n        /**\r\n         * Checks to see if two functions are of equal value\r\n         * @param {Symbol} symbol\r\n         */\r\n        equals: function (symbol) {\r\n            if(!isSymbol(symbol))\r\n                symbol = new Symbol(symbol);\r\n            return this.value === symbol.value && this.power.equals(symbol.power)\r\n                    && this.multiplier.equals(symbol.multiplier)\r\n                    && this.group === symbol.group;\r\n        },\r\n        abs: function () {\r\n            var e = this.clone();\r\n            e.multiplier.abs();\r\n            return e;\r\n        },\r\n        // Greater than\r\n        gt: function (symbol) {\r\n            if(!isSymbol(symbol))\r\n                symbol = new Symbol(symbol);\r\n            return this.isConstant() && symbol.isConstant() && this.multiplier.greaterThan(symbol.multiplier);\r\n        },\r\n        // Greater than\r\n        gte: function (symbol) {\r\n            if(!isSymbol(symbol))\r\n                symbol = new Symbol(symbol);\r\n            return this.equals(symbol) ||\r\n                    this.isConstant() && symbol.isConstant() && this.multiplier.greaterThan(symbol.multiplier);\r\n        },\r\n        // Less than\r\n        lt: function (symbol) {\r\n            if(!isSymbol(symbol))\r\n                symbol = new Symbol(symbol);\r\n            return this.isConstant() && symbol.isConstant() && this.multiplier.lessThan(symbol.multiplier);\r\n        },\r\n        // Less than\r\n        lte: function (symbol) {\r\n            if(!isSymbol(symbol))\r\n                symbol = new Symbol(symbol);\r\n            return this.equals(symbol) ||\r\n                    this.isConstant() && symbol.isConstant() && this.multiplier.lessThan(symbol.multiplier);\r\n        },\r\n        /**\r\n         * Because nerdamer doesn't group symbols by polynomials but\r\n         * rather a custom grouping method, this has to be\r\n         * reinserted in order to make use of most algorithms. This function\r\n         * checks if the symbol meets the criteria of a polynomial.\r\n         * @param {bool} multivariate\r\n         * @returns {boolean}\r\n         */\r\n        isPoly: function (multivariate) {\r\n            var g = this.group,\r\n                    p = this.power;\r\n            //the power must be a integer so fail if it's not\r\n            if(!isInt(p) || p < 0)\r\n                return false;\r\n            //constants and first orders\r\n            if(g === N || g === S || this.isConstant(true))\r\n                return true;\r\n            var vars = variables(this);\r\n            if(g === CB && vars.length === 1) {\r\n                //the variable is assumed the only one that was found\r\n                var v = vars[0];\r\n                //if no variable then guess what!?!? We're done!!! We have a polynomial.\r\n                if(!v)\r\n                    return true;\r\n                for(var x in this.symbols) {\r\n                    var sym = this.symbols[x];\r\n                    //sqrt(x)\r\n                    if(sym.group === FN && !sym.args[0].isConstant())\r\n                        return false;\r\n                    if(!sym.contains(v) && !sym.isConstant(true))\r\n                        return false;\r\n                }\r\n                return true;\r\n            }\r\n            //PL groups. These only fail if a power is not an int\r\n            //this should handle cases such as x^2*t\r\n            if(this.isComposite() || g === CB && multivariate) {\r\n                //fail if we're not checking for multivariate polynomials\r\n                if(!multivariate && vars.length > 1)\r\n                    return false;\r\n                //loop though the symbols and check if they qualify\r\n                for(var x in this.symbols) {\r\n                    //we've already the symbols if we're not checking for multivariates at this point\r\n                    //so we check the sub-symbols\r\n                    if(!this.symbols[x].isPoly(multivariate))\r\n                        return false;\r\n                }\r\n                return true;\r\n            }\r\n            else\r\n                return false;\r\n\r\n            /*\r\n             //all tests must have passed so we must be dealing with a polynomial\r\n             return true;\r\n             */\r\n        },\r\n        //removes the requested variable from the symbol and returns the remainder\r\n        stripVar: function (x, exclude_x) {\r\n            var retval;\r\n            if((this.group === PL || this.group === S) && this.value === x)\r\n                retval = new Symbol(exclude_x ? 0 : this.multiplier);\r\n            else if(this.group === CB && this.isLinear()) {\r\n                retval = new Symbol(1);\r\n                this.each(function (s) {\r\n                    if(!s.contains(x, true))\r\n                        retval = _.multiply(retval, s.clone());\r\n                });\r\n                retval.multiplier = retval.multiplier.multiply(this.multiplier);\r\n            }\r\n            else if(this.group === CP && !this.isLinear()) {\r\n                retval = new Symbol(this.multiplier);\r\n            }\r\n            else if(this.group === CP && this.isLinear()) {\r\n                retval = new Symbol(0);\r\n                this.each(function (s) {\r\n                    if(!s.contains(x)) {\r\n                        var t = s.clone();\r\n                        t.multiplier = t.multiplier.multiply(this.multiplier);\r\n                        retval = _.add(retval, t);\r\n                    }\r\n                });\r\n                //BIG TODO!!! It doesn't make much sense\r\n                if(retval.equals(0))\r\n                    retval = new Symbol(this.multiplier);\r\n            }\r\n            else if(this.group === EX && this.power.contains(x, true)) {\r\n                retval = new Symbol(this.multiplier);\r\n            }\r\n            else if(this.group === FN && this.contains(x)) {\r\n                retval = new Symbol(this.multiplier);\r\n            }\r\n            else\r\n                //wth? This should technically be the multiplier.\r\n                //Unfortunately this method wasn't very well thought out :`(.\r\n                //should be: retval = new Symbol(this.multiplier);\r\n                //use: ((1+x^2)*sqrt(-1+x^2))^(-1) for correction.\r\n                //this will break a bunch of unit tests so be ready to for the long haul\r\n                retval = this.clone();\r\n\r\n\r\n            return retval;\r\n        },\r\n        //returns symbol in array form with x as base e.g. a*x^2+b*x+c = [c, b, a].\r\n        toArray: function (v, arr) {\r\n            arr = arr || {\r\n                arr: [],\r\n                add: function (x, idx) {\r\n                    var e = this.arr[idx];\r\n                    this.arr[idx] = e ? _.add(e, x) : x;\r\n                }\r\n            };\r\n            var g = this.group;\r\n\r\n            if(g === S && this.contains(v)) {\r\n                arr.add(new Symbol(this.multiplier), this.power);\r\n            }\r\n            else if(g === CB) {\r\n                var a = this.stripVar(v),\r\n                        x = _.divide(this.clone(), a.clone());\r\n                var p = x.isConstant() ? 0 : x.power;\r\n                arr.add(a, p);\r\n            }\r\n            else if(g === PL && this.value === v) {\r\n                this.each(function (x, p) {\r\n                    arr.add(x.stripVar(v), p);\r\n                });\r\n            }\r\n            else if(g === CP) {\r\n                //the logic: they'll be broken into symbols so e.g. (x^2+x)+1 or (a*x^2+b*x+c)\r\n                //each case is handled above\r\n                this.each(function (x) {\r\n                    x.toArray(v, arr);\r\n                });\r\n            }\r\n            else if(this.contains(v)) {\r\n                throw new NerdamerTypeError('Cannot convert to array! Exiting');\r\n            }\r\n            else {\r\n                arr.add(this.clone(), 0); //it's just a constant wrt to v\r\n            }\r\n            //fill the holes\r\n            arr = arr.arr; //keep only the array since we don't need the object anymore\r\n            for(var i = 0; i < arr.length; i++)\r\n                if(!arr[i])\r\n                    arr[i] = new Symbol(0);\r\n            return arr;\r\n        },\r\n        //checks to see if a symbol contans a function\r\n        hasFunc: function (v) {\r\n            var fn_group = this.group === FN || this.group === EX;\r\n            if(fn_group && !v || fn_group && this.contains(v))\r\n                return true;\r\n            if(this.symbols) {\r\n                for(var x in this.symbols) {\r\n                    if(this.symbols[x].hasFunc(v))\r\n                        return true;\r\n                }\r\n            }\r\n            return false;\r\n        },\r\n        sub: function (a, b) {\r\n            a = !isSymbol(a) ? _.parse(a) : a.clone();\r\n            b = !isSymbol(b) ? _.parse(b) : b.clone();\r\n            if(a.group === N || a.group === P)\r\n                err('Cannot substitute a number. Must be a variable');\r\n            var same_pow = false,\r\n                    a_is_unit_multiplier = a.multiplier.equals(1),\r\n                    m = this.multiplier.clone(),\r\n                    retval;\r\n            /*\r\n             * In order to make the substitution the bases have to first match take\r\n             * (x+1)^x -> (x+1)=y || x^2 -> x=y^6\r\n             * In both cases the first condition is that the bases match so we begin there\r\n             * Either both are PL or both are not PL but we cannot have PL and a non-PL group match\r\n             */\r\n            if(this.value === a.value && (this.group !== PL && a.group !== PL || this.group === PL && a.group === PL)) {\r\n                //we cleared the first hurdle but a subsitution may not be possible just yet\r\n                if(a_is_unit_multiplier || a.multiplier.equals(this.multiplier)) {\r\n                    if(a.isLinear()) {\r\n                        retval = b;\r\n                    }\r\n                    else if(a.power.equals(this.power)) {\r\n                        retval = b;\r\n                        same_pow = true;\r\n                    }\r\n                    if(a.multiplier.equals(this.multiplier))\r\n                        m = new Frac(1);\r\n                }\r\n            }\r\n            //the next thing is to handle CB\r\n            else if(this.group === CB || this.previousGroup === CB) {\r\n                retval = new Symbol(1);\r\n                this.each(function (x) {\r\n                    var subbed = _.parse(x.sub(a, b)); //parse it again for safety\r\n                    retval = _.multiply(retval, subbed);\r\n\r\n                });\r\n            }\r\n            else if(this.isComposite()) {\r\n                var symbol = this.clone();\r\n\r\n                if(a.isComposite() && symbol.isComposite() && symbol.isLinear() && a.isLinear()) {\r\n                    var find = function (stack, needle) {\r\n                        for(var x in stack.symbols) {\r\n                            var sym = stack.symbols[x];\r\n                            //if the symbol equals the needle or it's within the sub-symbols we're done\r\n                            if(sym.isComposite() && find(sym, needle) || sym.equals(needle))\r\n                                return true;\r\n                        }\r\n                        return false;\r\n                    };\r\n                    //go fish\r\n                    for(var x in a.symbols) {\r\n                        if(!find(symbol, a.symbols[x]))\r\n                            return symbol.clone();\r\n                    }\r\n                    retval = _.add(_.subtract(symbol.clone(), a), b);\r\n                }\r\n                else {\r\n                    retval = new Symbol(0);\r\n                    symbol.each(function (x) {\r\n                        retval = _.add(retval, x.sub(a, b));\r\n                    });\r\n                }\r\n            }\r\n            else if(this.group === EX) {\r\n                // the parsed value could be a function so parse and sub\r\n                retval = _.parse(this.value).sub(a, b);\r\n            }\r\n            else if(this.group === FN) {\r\n                var nargs = [];\r\n                for(var i = 0; i < this.args.length; i++) {\r\n                    var arg = this.args[i];\r\n                    if(!isSymbol(arg))\r\n                        arg = _.parse(arg);\r\n                    nargs.push(arg.sub(a, b));\r\n                }\r\n                retval = _.symfunction(this.fname, nargs);\r\n            }\r\n            //if we did manage a substitution\r\n            if(retval) {\r\n                if(!same_pow) {\r\n                    //substitute the power\r\n                    var p = this.group === EX ? this.power.sub(a, b) : _.parse(this.power);\r\n                    //now raise the symbol to that power\r\n                    retval = _.pow(retval, p);\r\n                }\r\n\r\n                //transfer the multiplier\r\n                retval.multiplier = retval.multiplier.multiply(m);\r\n\r\n                //done\r\n                return retval;\r\n            }\r\n            //if all else fails\r\n            return this.clone();\r\n        },\r\n        isMonomial: function () {\r\n            if(this.group === S)\r\n                return true;\r\n            if(this.group === CB) {\r\n                for(var x in this.symbols)\r\n                    if(this.symbols[x].group !== S)\r\n                        return false;\r\n            }\r\n            else\r\n                return false;\r\n            return true;\r\n        },\r\n        isPi: function () {\r\n            return this.group === S && this.value === 'pi';\r\n        },\r\n        sign: function () {\r\n            return this.multiplier.sign();\r\n        },\r\n        isE: function () {\r\n            return this.value === 'e';\r\n        },\r\n        isSQRT: function () {\r\n            return this.fname === SQRT;\r\n        },\r\n        isConstant: function (check_all, check_symbols) {\r\n            if(check_symbols && this.group === CB) {\r\n                for(var x in this.symbols) {\r\n                    if(this.symbols[x].isConstant(true))\r\n                        return true;\r\n                }\r\n            }\r\n\r\n            if(check_all === 'functions' && this.isComposite()) {\r\n                var isConstant = true;\r\n\r\n                this.each(function (x) {\r\n                    if(!x.isConstant(check_all, check_symbols)) {\r\n                        isConstant = false;\r\n                    }\r\n                }, true);\r\n\r\n                return isConstant;\r\n            }\r\n\r\n            if(check_all === 'all' && (this.isPi() || this.isE())) {\r\n                return true;\r\n            }\r\n\r\n            if(check_all && this.group === FN) {\r\n                for(var i = 0; i < this.args.length; i++) {\r\n                    if(!this.args[i].isConstant(check_all))\r\n                        return false;\r\n                }\r\n                return true;\r\n            }\r\n\r\n            if(check_all)\r\n                return isNumericSymbol(this);\r\n            return this.value === CONST_HASH;\r\n        },\r\n        //the symbols is imaginary if\r\n        //1. n*i\r\n        //2. a+b*i\r\n        //3. a*i\r\n        isImaginary: function () {\r\n            if(this.imaginary)\r\n                return true;\r\n            else if(this.symbols) {\r\n                for(var x in this.symbols)\r\n                    if(this.symbols[x].isImaginary())\r\n                        return true;\r\n            }\r\n            return false;\r\n        },\r\n        /**\r\n         * Returns the real part of a symbol\r\n         * @returns {Symbol}\r\n         */\r\n        realpart: function () {\r\n            if(this.isConstant()) {\r\n                return this.clone();\r\n            }\r\n            else if(this.imaginary)\r\n                return new Symbol(0);\r\n            else if(this.isComposite()) {\r\n                var retval = new Symbol(0);\r\n                this.each(function (x) {\r\n                    retval = _.add(retval, x.realpart());\r\n                });\r\n                return retval;\r\n            }\r\n            else if(this.isImaginary())\r\n                return new Symbol(0);\r\n            return this.clone();\r\n        },\r\n        /*\r\n         * Return imaginary part of a symbol\r\n         * @returns {Symbol}\r\n         */\r\n        imagpart: function () {\r\n            if(this.group === S && this.isImaginary())\r\n                return new Symbol(this.multiplier);\r\n            if(this.isComposite()) {\r\n                var retval = new Symbol(0);\r\n                this.each(function (x) {\r\n                    retval = _.add(retval, x.imagpart());\r\n                });\r\n                return retval;\r\n            }\r\n            if(this.group === CB)\r\n                return this.stripVar(Settings.IMAGINARY);\r\n            return new Symbol(0);\r\n        },\r\n        isInteger: function () {\r\n            return this.isConstant() && this.multiplier.isInteger();\r\n        },\r\n        isLinear: function (wrt) {\r\n            if(wrt) {\r\n                if(this.isConstant())\r\n                    return true;\r\n                if(this.group === S) {\r\n                    if(this.value === wrt)\r\n                        return this.power.equals(1);\r\n                    else\r\n                        return true;\r\n                }\r\n\r\n                if(this.isComposite() && this.power.equals(1)) {\r\n                    for(var x in this.symbols) {\r\n                        if(!this.symbols[x].isLinear(wrt))\r\n                            return false;\r\n                    }\r\n                    return true;\r\n                }\r\n\r\n                if(this.group === CB && this.symbols[wrt])\r\n                    return this.symbols[wrt].isLinear(wrt);\r\n                return false;\r\n            }\r\n            else\r\n                return this.power.equals(1);\r\n        },\r\n        /**\r\n         * Checks to see if a symbol has a function by a specified name or within a specified list\r\n         * @param {String|String[]} names\r\n         * @returns {Boolean}\r\n         */\r\n        containsFunction: function (names) {\r\n            if(typeof names === 'string')\r\n                names = [names];\r\n            if(this.group === FN && names.indexOf(this.fname) !== -1)\r\n                return true;\r\n            if(this.symbols) {\r\n                for(var x in this.symbols) {\r\n                    if(this.symbols[x].containsFunction(names))\r\n                        return true;\r\n                }\r\n            }\r\n            return false;\r\n        },\r\n        multiplyPower: function (p2) {\r\n            //leave out 1\r\n            if(this.group === N && this.multiplier.equals(1))\r\n                return this;\r\n\r\n            var p1 = this.power;\r\n\r\n            if(this.group !== EX && p2.group === N) {\r\n                var p = p2.multiplier;\r\n                if(this.group === N && !p.isInteger()) {\r\n                    this.convert(P);\r\n                }\r\n\r\n                this.power = p1.equals(1) ? p.clone() : p1.multiply(p);\r\n\r\n                if(this.group === P && isInt(this.power)) {\r\n                    //bring it back to an N\r\n                    this.value = Math.pow(this.value, this.power);\r\n                    this.toLinear();\r\n                    this.convert(N);\r\n                }\r\n            }\r\n            else {\r\n                if(this.group !== EX) {\r\n                    p1 = new Symbol(p1);\r\n                    this.convert(EX);\r\n                }\r\n                this.power = _.multiply(p1, p2);\r\n            }\r\n\r\n            return this;\r\n        },\r\n        setPower: function (p, retainSign) {\r\n            //leave out 1\r\n            if(this.group === N && this.multiplier.equals(1)) {\r\n                return this;\r\n            }\r\n            if(this.group === EX && !isSymbol(p)) {\r\n                this.group = this.previousGroup;\r\n                delete this.previousGroup;\r\n                if(this.group === N) {\r\n                    this.multiplier = new Frac(this.value);\r\n                    this.value = CONST_HASH;\r\n                }\r\n                else\r\n                    this.power = p;\r\n            }\r\n            else {\r\n                var isSymbolic = false;\r\n                if(isSymbol(p)) {\r\n                    if(p.group === N) {\r\n                        //p should be the multiplier instead\r\n                        p = p.multiplier;\r\n\r\n                    }\r\n                    else {\r\n                        isSymbolic = true;\r\n                    }\r\n                }\r\n                var group = isSymbolic ? EX : P;\r\n                this.power = p;\r\n                if(this.group === N && group)\r\n                    this.convert(group, retainSign);\r\n            }\r\n\r\n            return this;\r\n        },\r\n        /**\r\n         * Checks to see if symbol is located in the denominator\r\n         * @returns {boolean}\r\n         */\r\n        isInverse: function () {\r\n            if(this.group === EX)\r\n                return (this.power.multiplier.lessThan(0));\r\n            return this.power < 0;\r\n        },\r\n        /**\r\n         * Make a duplicate of a symbol by copying a predefined list of items.\r\n         * The name 'copy' would probably be a more appropriate name.\r\n         * to a new symbol\r\n         * @param {Symbol} c\r\n         * @returns {Symbol}\r\n         */\r\n        clone: function (c) {\r\n            var clone = c || new Symbol(0),\r\n                    //list of properties excluding power as this may be a symbol and would also need to be a clone.\r\n                    properties = [\r\n                        'value', 'group', 'length', 'previousGroup', 'imaginary', 'fname', 'args', 'isInfinity', 'scientific'],\r\n                    l = properties.length, i;\r\n            if(this.symbols) {\r\n                clone.symbols = {};\r\n                for(var x in this.symbols) {\r\n                    clone.symbols[x] = this.symbols[x].clone();\r\n                }\r\n            }\r\n\r\n            for(i = 0; i < l; i++) {\r\n                if(this[properties[i]] !== undefined) {\r\n                    clone[properties[i]] = this[properties[i]];\r\n                }\r\n            }\r\n\r\n            clone.power = this.power.clone();\r\n            clone.multiplier = this.multiplier.clone();\r\n            //add back the flag to track if this symbol is a conversion symbol\r\n            if(this.isConversion)\r\n                clone.isConversion = this.isConversion;\r\n\r\n            if(this.isUnit)\r\n                clone.isUnit = this.isUnit;\r\n\r\n            return clone;\r\n        },\r\n        /**\r\n         * Converts a symbol multiplier to one.\r\n         * @param {Boolean} keepSign Keep the multiplier as negative if the multiplier is negative and keepSign is true\r\n         * @returns {Symbol}\r\n         */\r\n        toUnitMultiplier: function (keepSign) {\r\n            this.multiplier.num = new bigInt(this.multiplier.num.isNegative() && keepSign ? -1 : 1);\r\n            this.multiplier.den = new bigInt(1);\r\n            return this;\r\n        },\r\n        /**\r\n         * Converts a Symbol's power to one.\r\n         * @returns {Symbol}\r\n         */\r\n        toLinear: function () {\r\n            // Do nothing if it's already linear\r\n            if(this.power.equals(1)) {\r\n                return this;\r\n            }\r\n            this.setPower(new Frac(1));\r\n            return this;\r\n        },\r\n        /**\r\n         * Iterates over all the sub-symbols. If no sub-symbols exist then it's called on itself\r\n         * @param {Function} fn\r\n         * @@param {Boolean} deep If true it will itterate over the sub-symbols their symbols as well\r\n         */\r\n        each: function (fn, deep) {\r\n            if(!this.symbols) {\r\n                fn.call(this, this, this.value);\r\n            }\r\n            else {\r\n                for(var x in this.symbols) {\r\n                    var sym = this.symbols[x];\r\n                    if(sym.group === PL && deep) {\r\n                        for(var y in sym.symbols) {\r\n                            fn.call(x, sym.symbols[y], y);\r\n                        }\r\n                    }\r\n                    else\r\n                        fn.call(this, sym, x);\r\n                }\r\n            }\r\n        },\r\n        /**\r\n         * A numeric value to be returned for Javascript. It will try to\r\n         * return a number as far a possible but in case of a pure symbolic\r\n         * symbol it will just return its text representation\r\n         * @returns {String|Number}\r\n         */\r\n        valueOf: function () {\r\n            if(this.group === N)\r\n                return this.multiplier.valueOf();\r\n            else if(this.power === 0) {\r\n                return 1;\r\n            }\r\n            else if(this.multiplier === 0) {\r\n                return 0;\r\n            }\r\n            else {\r\n                return text(this, 'decimals');\r\n            }\r\n        },\r\n        /**\r\n         * Checks to see if a symbols has a particular variable within it.\r\n         * Pass in true as second argument to include the power of exponentials\r\n         * which aren't check by default.\r\n         * @example var s = _.parse('x+y+z'); s.contains('y');\r\n         * //returns true\r\n         * @param {any} variable\r\n         * @param {boolean} all\r\n         * @returns {boolean}\r\n         */\r\n        contains: function (variable, all) {\r\n            //contains expects a string\r\n            variable = String(variable);\r\n            var g = this.group;\r\n            if(this.value === variable)\r\n                return true;\r\n            if(this.symbols) {\r\n                for(var x in this.symbols) {\r\n                    if(this.symbols[x].contains(variable, all))\r\n                        return true;\r\n                }\r\n            }\r\n            if(g === FN || this.previousGroup === FN) {\r\n                for(var i = 0; i < this.args.length; i++) {\r\n                    if(this.args[i].contains(variable, all))\r\n                        return true;\r\n                }\r\n            }\r\n\r\n            if(g === EX) {\r\n                //exit only if it does\r\n                if(all && this.power.contains(variable, all)) {\r\n                    return true;\r\n                }\r\n                if(this.value === variable)\r\n                    return true;\r\n\r\n            }\r\n\r\n            return this.value === variable;\r\n        },\r\n        /**\r\n         * Negates a symbols\r\n         * @returns {boolean}\r\n         */\r\n        negate: function () {\r\n            this.multiplier.negate();\r\n            if(this.group === CP || this.group === PL)\r\n                this.distributeMultiplier();\r\n            return this;\r\n        },\r\n        /**\r\n         * Inverts a symbol\r\n         * @param {boolean} power_only\r\n         * @param {boolean} all\r\n         * @returns {boolean}\r\n         */\r\n        invert: function (power_only, all) {\r\n            //invert the multiplier\r\n            if(!power_only)\r\n                this.multiplier = this.multiplier.invert();\r\n            //invert the rest\r\n            if(isSymbol(this.power)) {\r\n                this.power.negate();\r\n            }\r\n            else if(this.group === CB && all) {\r\n                this.each(function (x) {\r\n                    return x.invert();\r\n                });\r\n            }\r\n            else {\r\n                if(this.power && this.group !== N)\r\n                    this.power.negate();\r\n            }\r\n            return this;\r\n        },\r\n        /**\r\n         * Symbols of group CP or PL may have the multiplier being carried by\r\n         * the top level symbol at any given time e.g. 2*(x+y+z). This is\r\n         * convenient in many cases, however in some cases the multiplier needs\r\n         * to be carried individually e.g. 2*x+2*y+2*z.\r\n         * This method distributes the multiplier over the entire symbol\r\n         * @param {boolean} all\r\n         * @returns {Symbol}\r\n         */\r\n        distributeMultiplier: function (all) {\r\n            var is_one = all ? this.power.absEquals(1) : this.power.equals(1);\r\n            if(this.symbols && is_one && this.group !== CB && !this.multiplier.equals(1)) {\r\n                for(var x in this.symbols) {\r\n                    var s = this.symbols[x];\r\n                    s.multiplier = s.multiplier.multiply(this.multiplier);\r\n                    s.distributeMultiplier();\r\n                }\r\n                this.toUnitMultiplier();\r\n            }\r\n\r\n            return this;\r\n        },\r\n        /**\r\n         * This method expands the exponent over the entire symbol just like\r\n         * distributeMultiplier\r\n         * @returns {Symbol}\r\n         */\r\n        distributeExponent: function () {\r\n            if(!this.power.equals(1)) {\r\n                var p = this.power;\r\n                for(var x in this.symbols) {\r\n                    var s = this.symbols[x];\r\n                    if(s.group === EX) {\r\n                        s.power = _.multiply(s.power, new Symbol(p));\r\n                    }\r\n                    else {\r\n                        this.symbols[x].power = this.symbols[x].power.multiply(p);\r\n                    }\r\n                }\r\n                this.toLinear();\r\n            }\r\n            return this;\r\n        },\r\n        /**\r\n         * This method will attempt to up-convert or down-convert one symbol\r\n         * from one group to another. Not all symbols are convertible from one\r\n         * group to another however. In that case the symbol will remain\r\n         * unchanged.\r\n         * @param {int} group\r\n         * @param {string} imaginary\r\n         */\r\n        convert: function (group, imaginary) {\r\n            if(group > FN) {\r\n                //make a clone of this symbol;\r\n                var cp = this.clone();\r\n\r\n                //attach a symbols object and upgrade the group\r\n                this.symbols = {};\r\n\r\n                if(group === CB) {\r\n                    //symbol of group CB hold symbols bound together through multiplication\r\n                    //because of commutativity this multiplier can technically be anywhere within the group\r\n                    //to keep track of it however it's easier to always have the top level carry it\r\n                    cp.toUnitMultiplier();\r\n                }\r\n                else {\r\n                    //reset the symbol\r\n                    this.toUnitMultiplier();\r\n                }\r\n\r\n                if(this.group === FN) {\r\n                    cp.args = this.args;\r\n                    delete this.args;\r\n                    delete this.fname;\r\n                }\r\n\r\n                //the symbol may originate from the symbol i but this property no longer holds true\r\n                //after copying\r\n                if(this.isImgSymbol)\r\n                    delete this.isImgSymbol;\r\n\r\n                this.toLinear();\r\n                //attach a clone of this symbol to the symbols object using its proper key\r\n                this.symbols[cp.keyForGroup(group)] = cp;\r\n                this.group = group;\r\n                //objects by default don't have a length property. However, in order to keep track of the number\r\n                //of sub-symbols we have to impliment our own.\r\n                this.length = 1;\r\n            }\r\n            else if(group === EX) {\r\n                //1^x is just one so check and make sure\r\n                if(!(this.group === N && this.multiplier.equals(1))) {\r\n                    if(this.group !== EX)\r\n                        this.previousGroup = this.group;\r\n                    if(this.group === N) {\r\n                        this.value = this.multiplier.num.toString();\r\n                        this.toUnitMultiplier();\r\n                    }\r\n                    //update the hash to reflect the accurate hash\r\n                    else\r\n                        this.value = text(this, 'hash');\r\n\r\n                    this.group = EX;\r\n                }\r\n            }\r\n            else if(group === N) {\r\n                var m = this.multiplier.toDecimal();\r\n                if(this.symbols)\r\n                    this.symbols = undefined;\r\n                new Symbol(this.group === P ? m * Math.pow(this.value, this.power) : m).clone(this);\r\n            }\r\n            else if(group === P && this.group === N) {\r\n                this.value = imaginary ? this.multiplier.num.toString() : Math.abs(this.multiplier.num.toString());\r\n                this.toUnitMultiplier(!imaginary);\r\n                this.group = P;\r\n            }\r\n            return this;\r\n        },\r\n        /**\r\n         * This method is one of the principal methods to make it all possible.\r\n         * It performs cleanup and prep operations whenever a symbols is\r\n         * inserted. If the symbols results in a 1 in a CB (multiplication)\r\n         * group for instance it will remove the redundant symbol. Similarly\r\n         * in a symbol of group PL or CP (symbols glued by multiplication) it\r\n         * will remove any dangling zeroes from the symbol. It will also\r\n         * up-convert or down-convert a symbol if it detects that it's\r\n         * incorrectly grouped. It should be noted that this method is not\r\n         * called directly but rather by the 'attach' method for addition groups\r\n         * and the 'combine' method for multiplication groups.\r\n         * @param {Symbol} symbol\r\n         * @param {String} action\r\n         */\r\n        insert: function (symbol, action) {\r\n            //this check can be removed but saves a lot of aggravation when trying to hunt down\r\n            //a bug. If left, you will instantly know that the error can only be between 2 symbols.\r\n            if(!isSymbol(symbol))\r\n                err('Object ' + symbol + ' is not of type Symbol!');\r\n            if(this.symbols) {\r\n                var group = this.group;\r\n                if(group > FN) {\r\n                    var key = symbol.keyForGroup(group);\r\n                    var existing = key in this.symbols ? this.symbols[key] : false; //check if there's already a symbol there\r\n                    if(action === 'add') {\r\n                        var hash = key;\r\n                        if(existing) {\r\n                            //add them together using the parser\r\n                            this.symbols[hash] = _.add(existing, symbol);\r\n                            //if the addition resulted in a zero multiplier remove it\r\n                            if(this.symbols[hash].multiplier.equals(0)) {\r\n                                delete this.symbols[hash];\r\n                                this.length--;\r\n\r\n                                if(this.length === 0) {\r\n                                    this.convert(N);\r\n                                    this.multiplier = new Frac(0);\r\n                                }\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.symbols[key] = symbol;\r\n                            this.length++;\r\n                        }\r\n                    }\r\n                    else {\r\n                        //check if this is of group P and unwrap before inserting\r\n                        if(symbol.group === P && isInt(symbol.power)) {\r\n                            symbol.convert(N);\r\n                        }\r\n\r\n                        //transfer the multiplier to the upper symbol but only if the symbol numeric\r\n                        if(symbol.group !== EX) {\r\n                            this.multiplier = this.multiplier.multiply(symbol.multiplier);\r\n                            symbol.toUnitMultiplier();\r\n                        }\r\n                        else {\r\n                            symbol.parens = symbol.multiplier.lessThan(0);\r\n                            this.multiplier = this.multiplier.multiply(symbol.multiplier.clone().abs());\r\n                            symbol.toUnitMultiplier(true);\r\n                        }\r\n\r\n                        if(existing) {\r\n                            //remove because the symbol may have changed\r\n                            symbol = _.multiply(remove(this.symbols, key), symbol);\r\n                            if(symbol.isConstant()) {\r\n                                this.multiplier = this.multiplier.multiply(symbol.multiplier);\r\n                                symbol = new Symbol(1); //the dirty work gets done down the line when it detects 1\r\n                            }\r\n\r\n                            this.length--;\r\n                            //clean up\r\n                        }\r\n\r\n                        //don't insert the symbol if it's 1\r\n                        if(!symbol.isOne(true)) {\r\n                            this.symbols[key] = symbol;\r\n                            this.length++;\r\n                        }\r\n                        else if(symbol.multiplier.lessThan(0)) {\r\n                            this.negate(); //put back the sign\r\n                        }\r\n                    }\r\n\r\n                    //clean up\r\n                    if(this.length === 0)\r\n                        this.convert(N);\r\n                    //update the hash\r\n                    if(this.group === CP || this.group === CB) {\r\n                        this.updateHash();\r\n                    }\r\n                }\r\n            }\r\n\r\n            return this;\r\n        },\r\n        //the insert method for addition\r\n        attach: function (symbol) {\r\n            if(isArray(symbol)) {\r\n                for(var i = 0; i < symbol.length; i++)\r\n                    this.insert(symbol[i], 'add');\r\n                return this;\r\n            }\r\n            return this.insert(symbol, 'add');\r\n        },\r\n        //the insert method for multiplication\r\n        combine: function (symbol) {\r\n            if(isArray(symbol)) {\r\n                for(var i = 0; i < symbol.length; i++)\r\n                    this.insert(symbol[i], 'multiply');\r\n                return this;\r\n            }\r\n            return this.insert(symbol, 'multiply');\r\n        },\r\n        /**\r\n         * This method should be called after any major \"surgery\" on a symbol.\r\n         * It updates the hash of the symbol for example if the fname of a\r\n         * function has changed it will update the hash of the symbol.\r\n         */\r\n        updateHash: function () {\r\n            if(this.group === N)\r\n                return;\r\n\r\n            if(this.group === FN) {\r\n                var contents = '',\r\n                        args = this.args,\r\n                        is_parens = this.fname === PARENTHESIS;\r\n                for(var i = 0; i < args.length; i++)\r\n                    contents += (i === 0 ? '' : ',') + text(args[i]);\r\n                var fn_name = is_parens ? '' : this.fname;\r\n                this.value = fn_name + (is_parens ? contents : inBrackets(contents));\r\n            }\r\n            else if(!(this.group === S || this.group === PL)) {\r\n                this.value = text(this, 'hash');\r\n            }\r\n        },\r\n        /**\r\n         * this function defines how every group in stored within a group of\r\n         * higher order think of it as the switchboard for the library. It\r\n         * defines the hashes for symbols.\r\n         * @param {int} group\r\n         */\r\n        keyForGroup: function (group) {\r\n            var g = this.group;\r\n            var key;\r\n\r\n            if(g === N) {\r\n                key = this.value;\r\n            }\r\n            else if(g === S || g === P) {\r\n                if(group === PL)\r\n                    key = this.power.toDecimal();\r\n                else\r\n                    key = this.value;\r\n            }\r\n            else if(g === FN) {\r\n                if(group === PL)\r\n                    key = this.power.toDecimal();\r\n                else\r\n                    key = text(this, 'hash');\r\n            }\r\n            else if(g === PL) {\r\n                //if the order is reversed then we'll assume multiplication\r\n                //TODO: possible future dilemma\r\n                if(group === CB)\r\n                    key = text(this, 'hash');\r\n                else if(group === CP) {\r\n                    if(this.power.equals(1))\r\n                        key = this.value;\r\n                    else\r\n                        key = inBrackets(text(this, 'hash')) + Settings.POWER_OPERATOR + this.power.toDecimal();\r\n                }\r\n                else if(group === PL)\r\n                    key = this.power.toString();\r\n                else\r\n                    key = this.value;\r\n                return key;\r\n            }\r\n            else if(g === CP) {\r\n                if(group === CP) {\r\n                    key = text(this, 'hash');\r\n                }\r\n                if(group === PL)\r\n                    key = this.power.toDecimal();\r\n                else\r\n                    key = this.value;\r\n            }\r\n            else if(g === CB) {\r\n                if(group === PL)\r\n                    key = this.power.toDecimal();\r\n                else\r\n                    key = text(this, 'hash');\r\n            }\r\n            else if(g === EX) {\r\n                if(group === PL)\r\n                    key = text(this.power);\r\n                else\r\n                    key = text(this, 'hash');\r\n            }\r\n\r\n            return key;\r\n        },\r\n        /**\r\n         * Symbols are typically stored in an object which works fine for most\r\n         * cases but presents a problem when the order of the symbols makes\r\n         * a difference. This function simply collects all the symbols and\r\n         * returns them as an array. If a function is supplied then that\r\n         * function is called on every symbol contained within the object.\r\n         * @param {Function} fn\r\n         * @param {Object} opt\r\n         * @param {Function} sort_fn\r\n         * @@param {Boolean} expand_symbol\r\n         * @returns {Array}\r\n         */\r\n        collectSymbols: function (fn, opt, sort_fn, expand_symbol) {\r\n            var collected = [];\r\n            if(!this.symbols)\r\n                collected.push(this);\r\n            else {\r\n                for(var x in this.symbols) {\r\n                    var symbol = this.symbols[x];\r\n                    if(expand_symbol && (symbol.group === PL || symbol.group === CP)) {\r\n                        collected = collected.concat(symbol.collectSymbols());\r\n                    }\r\n                    else\r\n                        collected.push(fn ? fn(symbol, opt) : symbol);\r\n                }\r\n            }\r\n            if(sort_fn === null)\r\n                sort_fn = undefined; //WTF Firefox? Seriously?\r\n\r\n            return collected.sort(sort_fn);//sort hopefully gives us some sort of consistency\r\n        },\r\n        /**\r\n         * Returns the latex representation of the symbol\r\n         * @param {String} option\r\n         * @returns {String}\r\n         */\r\n        latex: function (option) {\r\n            return LaTeX.latex(this, option);\r\n        },\r\n        /**\r\n         * Returns the text representation of a symbol\r\n         * @param {String} option\r\n         * @returns {String}\r\n         */\r\n        text: function (option) {\r\n            return text(this, option);\r\n        },\r\n        /**\r\n         * Checks if the function evaluates to 1. e.g. x^0 or 1 :)\r\n         * @@param {bool} abs Compares the absolute value\r\n         */\r\n        isOne: function (abs) {\r\n            var f = abs ? 'absEquals' : 'equals';\r\n            if(this.group === N)\r\n                return this.multiplier[f](1);\r\n            else\r\n                return this.power.equals(0);\r\n        },\r\n        isComposite: function () {\r\n            var g = this.group,\r\n                    pg = this.previousGroup;\r\n            return g === CP || g === PL || pg === PL || pg === CP;\r\n        },\r\n        isCombination: function () {\r\n            var g = this.group,\r\n                    pg = this.previousGroup;\r\n            return g === CB || pg === CB;\r\n        },\r\n        lessThan: function (n) {\r\n            return this.multiplier.lessThan(n);\r\n        },\r\n        greaterThan: function (n) {\r\n            if(!isSymbol(n)) {\r\n                n = new Symbol(n);\r\n            }\r\n\r\n            // We can't tell for sure if a is greater than be if they're not both numbers\r\n            if(!this.isConstant(true) || !n.isConstant(true)) {\r\n                return false;\r\n            }\r\n\r\n            return this.multiplier.greaterThan(n.multiplier);\r\n        },\r\n        /**\r\n         * Get's the denominator of the symbol if the symbol is of class CB (multiplication)\r\n         * with other classes the symbol is either the denominator or not.\r\n         * Take x^-1+x^-2. If the symbol was to be mixed such as x+x^-2 then the symbol doesn't have have an exclusive\r\n         * denominator and has to be found by looking at the actual symbols themselves.\r\n         */\r\n        getDenom: function () {\r\n            var retval, symbol;\r\n            symbol = this.clone();\r\n            //e.g. 1/(x*(x+1))\r\n            if(this.group === CB && this.power.lessThan(0))\r\n                symbol = _.expand(symbol);\r\n\r\n            //if the symbol already is the denominator... DONE!!!\r\n            if(symbol.power.lessThan(0) || symbol.group === EX && symbol.power.multiplier.lessThan(0)) {\r\n                var d = _.parse(symbol.multiplier.den);\r\n                retval = symbol.toUnitMultiplier();\r\n                retval.power.negate();\r\n                retval = _.multiply(d, retval); //put back the coeff\r\n            }\r\n            else if(symbol.group === CB) {\r\n                retval = _.parse(symbol.multiplier.den);\r\n                for(var x in symbol.symbols) {\r\n                    var s = symbol.symbols[x];\r\n                    if(s.power < 0 || s.group === EX && s.power.multiplier.lessThan(0))\r\n                        retval = _.multiply(retval, symbol.symbols[x].clone().invert());\r\n                }\r\n            }\r\n            else {\r\n                retval = _.parse(symbol.multiplier.den);\r\n            }\r\n            return retval;\r\n        },\r\n        getNum: function () {\r\n            var retval, symbol;\r\n            symbol = this.clone();\r\n            //e.g. 1/(x*(x+1))\r\n            if(symbol.group === CB && symbol.power.lessThan(0))\r\n                symbol = _.expand(symbol);\r\n            //if the symbol already is the denominator... DONE!!!\r\n            if(symbol.power.greaterThan(0) && symbol.group !== CB || symbol.group === EX && symbol.power.multiplier.greaterThan(0)) {\r\n                retval = _.multiply(_.parse(symbol.multiplier.num), symbol.toUnitMultiplier());\r\n            }\r\n            else if(symbol.group === CB) {\r\n                retval = _.parse(symbol.multiplier.num);\r\n                symbol.each(function (x) {\r\n                    if(x.power > 0 || x.group === EX && x.power.multiplier > 0) {\r\n                        retval = _.multiply(retval, x.clone());\r\n                    }\r\n                });\r\n            }\r\n//            else if(symbol.group === EX && this.previousGroup === S) {\r\n//                retval = _.multiply(_.parse(symbol.multiplier.num), symbol.toUnitMultiplier());\r\n//            }\r\n            else {\r\n                retval = _.parse(symbol.multiplier.num);\r\n            }\r\n            return retval;\r\n        },\r\n        toString: function () {\r\n            return this.text();\r\n        }\r\n    };\r\n\r\n//Parser =======================================================================\r\n    //Uses modified Shunting-yard algorithm. http://en.wikipedia.org/wiki/Shunting-yard_algorithm\r\n    function Parser() {\r\n        //Point to the local parser instead of the global one\r\n        var _ = this;\r\n        var bin = {};\r\n        var preprocessors = {names: [], actions: []};\r\n\r\n//Parser.classes ===============================================================\r\n        function Slice(upper, lower) {\r\n            this.start = upper;\r\n            this.end = lower;\r\n        }\r\n        ;\r\n        Slice.prototype.isConstant = function () {\r\n            return this.start.isConstant() && this.end.isConstant();\r\n        };\r\n        Slice.prototype.text = function () {\r\n            return text(this.start) + ':' + text(this.end);\r\n        };\r\n\r\n        /**\r\n         * Class used to collect arguments for functions\r\n         * @returns {Parser.Collection}\r\n         */\r\n        function Collection() {\r\n            this.elements = [];\r\n        }\r\n        Collection.prototype.append = function (e) {\r\n            this.elements.push(e);\r\n        };\r\n        Collection.prototype.getItems = function () {\r\n            return this.elements;\r\n        };\r\n        Collection.prototype.toString = function () {\r\n            return _.pretty_print(this.elements);\r\n        };\r\n        Collection.create = function (e) {\r\n            var collection = new Collection();\r\n            if(e)\r\n                collection.append(e);\r\n            return collection;\r\n        };\r\n\r\n        function Token(node, node_type, column) {\r\n            this.type = node_type;\r\n            this.value = node;\r\n            if(column !== undefined)\r\n                this.column = column + 1;\r\n            if(node_type === Token.OPERATOR) {\r\n                //copy everything over from the operator\r\n                var operator = operators[node];\r\n                for(var x in operator)\r\n                    this[x] = operator[x];\r\n\r\n            }\r\n            else if(node_type === Token.FUNCTION) {\r\n                this.precedence = Token.MAX_PRECEDENCE; //leave enough roon\r\n                this.leftAssoc = false;\r\n            }\r\n        }\r\n        Token.prototype.toString = function () {\r\n            return this.value;\r\n        };\r\n        Token.prototype.toString = function () {\r\n            if(this.is_prefix)\r\n                return '`' + this.value;\r\n            return this.value;\r\n        };\r\n        //some constants\r\n        Token.OPERATOR = 'OPERATOR';\r\n        Token.VARIABLE_OR_LITERAL = 'VARIABLE_OR_LITERAL';\r\n        Token.FUNCTION = 'FUNCTION';\r\n        Token.UNIT = 'UNIT';\r\n        Token.KEYWORD = 'KEYWORD';\r\n        Token.MAX_PRECEDENCE = 999;\r\n        //create link to classes\r\n        this.classes = {\r\n            Collection: Collection,\r\n            Slice: Slice,\r\n            Token: Token\r\n        };\r\n//Parser.modules ===============================================================\r\n        //object for functions which handle complex number\r\n        var complex = {\r\n            prec: undefined,\r\n            cos: function (r, i) {\r\n                var re, im;\r\n                re = _.parse(Math.cos(r) * Math.cosh(i));\r\n                im = _.parse(Math.sin(r) * Math.sinh(i));\r\n                return _.subtract(re, _.multiply(im, Symbol.imaginary()));\r\n            },\r\n            sin: function (r, i) {\r\n                var re, im;\r\n                re = _.parse(Math.sin(r) * Math.cosh(i));\r\n                im = _.parse(Math.cos(r) * Math.sinh(i));\r\n                return _.subtract(re, _.multiply(im, Symbol.imaginary()));\r\n            },\r\n            tan: function (r, i) {\r\n                var re, im;\r\n                re = _.parse(Math.sin(2 * r) / (Math.cos(2 * r) + Math.cosh(2 * i)));\r\n                im = _.parse(Math.sinh(2 * i) / (Math.cos(2 * r) + Math.cosh(2 * i)));\r\n                return _.add(re, _.multiply(im, Symbol.imaginary()));\r\n            },\r\n            sec: function (r, i) {\r\n                var t = this.removeDen(this.cos(r, i));\r\n                return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));\r\n            },\r\n            csc: function (r, i) {\r\n                var t = this.removeDen(this.sin(r, i));\r\n                return _.add(t[0], _.multiply(t[1], Symbol.imaginary()));\r\n            },\r\n            cot: function (r, i) {\r\n                var t = this.removeDen(this.tan(r, i));\r\n                return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));\r\n            },\r\n            acos: function (r, i) {\r\n                var symbol, sq, a, b, c, squared;\r\n                symbol = this.fromArray([r, i]);\r\n                squared = _.pow(symbol.clone(), new Symbol(2));\r\n                sq = _.expand(squared); //z*z\r\n                a = _.multiply(sqrt(_.subtract(new Symbol(1), sq)), Symbol.imaginary());\r\n                b = _.expand(_.add(symbol.clone(), a));\r\n                c = log(b);\r\n                return _.expand(_.multiply(Symbol.imaginary().negate(), c));\r\n            },\r\n            asin: function (r, i) {\r\n                return _.subtract(_.parse('pi/2'), this.acos(r, i));\r\n            },\r\n            atan: function (r, i) {\r\n                // Handle i and -i\r\n                if(r.equals(0) && (i.equals(1) || i.equals(-1))) {\r\n                    // Just copy Wolfram Alpha for now. The parenthesis \r\n                    return _.parse(`${Symbol.infinity()}*${Settings.IMAGINARY}*${i}`);\r\n                }\r\n                var a, b, c, symbol;\r\n                symbol = complex.fromArray([r, i]);\r\n                a = _.expand(_.multiply(Symbol.imaginary(), symbol.clone()));\r\n                b = log(_.expand(_.subtract(new Symbol(1), a.clone())));\r\n                c = log(_.expand(_.add(new Symbol(1), a.clone())));\r\n                return _.expand(_.multiply(_.divide(Symbol.imaginary(), new Symbol(2)), _.subtract(b, c)));\r\n            },\r\n            asec: function (r, i) {\r\n                var d = this.removeDen([r, i]);\r\n                d[1].negate();\r\n                return this.acos.apply(this, d);\r\n            },\r\n            acsc: function (r, i) {\r\n                var d = this.removeDen([r, i]);\r\n                d[1].negate();\r\n                return this.asin.apply(this, d);\r\n            },\r\n            acot: function (r, i) {\r\n                var d = this.removeDen([r, i]);\r\n                d[1].negate();\r\n                return this.atan.apply(this, d);\r\n            },\r\n            //Hyperbolic trig\r\n            cosh: function (r, i) {\r\n                var re, im;\r\n                re = _.parse(Math.cosh(r) * Math.cos(i));\r\n                im = _.parse(Math.sinh(r) * Math.sin(i));\r\n                return _.add(re, _.multiply(im, Symbol.imaginary()));\r\n            },\r\n            sinh: function (r, i) {\r\n                var re, im;\r\n                re = _.parse(Math.sinh(r) * Math.cos(i));\r\n                im = _.parse(Math.cosh(r) * Math.sin(i));\r\n                return _.add(re, _.multiply(im, Symbol.imaginary()));\r\n            },\r\n            tanh: function (r, i) {\r\n                var re, im;\r\n                re = _.parse(Math.sinh(2 * r) / (Math.cos(2 * i) + Math.cosh(2 * r)));\r\n                im = _.parse(Math.sin(2 * i) / (Math.cos(2 * i) + Math.cosh(2 * r)));\r\n                return _.subtract(re, _.multiply(im, Symbol.imaginary()));\r\n            },\r\n            sech: function (r, i) {\r\n                var t = this.removeDen(this.cosh(r, i));\r\n                return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));\r\n            },\r\n            csch: function (r, i) {\r\n                var t = this.removeDen(this.sinh(r, i));\r\n                return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));\r\n            },\r\n            coth: function (r, i) {\r\n                var t = this.removeDen(this.tanh(r, i));\r\n                return _.add(t[0], _.multiply(t[1], Symbol.imaginary()));\r\n            },\r\n            acosh: function (r, i) {\r\n                var a, b, z;\r\n                z = this.fromArray([r, i]);\r\n                a = sqrt(_.add(z.clone(), new Symbol(1)));\r\n                b = sqrt(_.subtract(z.clone(), new Symbol(1)));\r\n                return _.expand(log(_.add(z, _.expand(_.multiply(a, b)))));\r\n            },\r\n            asinh: function (r, i) {\r\n                var a, z;\r\n                z = this.fromArray([r, i]);\r\n                a = sqrt(_.add(new Symbol(1), _.expand(_.pow(z.clone(), new Symbol(2)))));\r\n                return _.expand(log(_.add(z, a)));\r\n            },\r\n            atanh: function (r, i) {\r\n                var a, b, z;\r\n                z = this.fromArray([r, i]);\r\n                a = log(_.add(z.clone(), new Symbol(1)));\r\n                b = log(_.subtract(new Symbol(1), z));\r\n                return _.expand(_.divide(_.subtract(a, b), new Symbol(2)));\r\n            },\r\n            asech: function (r, i) {\r\n                var t = this.removeDen([r, i]);\r\n                t[1].negate();\r\n                return this.acosh.apply(this, t);\r\n            },\r\n            acsch: function (r, i) {\r\n                var t = this.removeDen([r, i]);\r\n                t[1].negate();\r\n                return this.asinh.apply(this, t);\r\n            },\r\n            acoth: function (r, i) {\r\n                var t = this.removeDen([r, i]);\r\n                t[1].negate();\r\n                return this.atanh.apply(this, t);\r\n            },\r\n            sqrt: function (symbol) {\r\n                var re, im, h, a, d;\r\n                re = symbol.realpart();\r\n                im = symbol.imagpart();\r\n                h = Symbol.hyp(re, im);\r\n                a = _.add(re.clone(), h);\r\n                d = sqrt(_.multiply(new Symbol(2), a.clone()));\r\n                return _.add(_.divide(a.clone(), d.clone()), _.multiply(_.divide(im, d), Symbol.imaginary()));\r\n            },\r\n            log: function (r, i) {\r\n                var re, im, phi;\r\n                re = log(Symbol.hyp(r, i));\r\n                phi = Settings.USE_BIG ? Symbol(bigDec.atan2(i.multiplier.toDecimal(), r.multiplier.toDecimal())) : Math.atan2(i, r);\r\n                im = _.parse(phi);\r\n                return _.add(re, _.multiply(Symbol.imaginary(), im));\r\n            },\r\n            erf(symbol, n) {\r\n                //Do nothing for now. Revisit this in the future.\r\n                return _.symfunction('erf', [symbol]);\r\n\r\n                n = n || 30;\r\n\r\n                var f = function (R, I) {\r\n                    return block('PARSE2NUMBER', function () {\r\n                        var retval = new Symbol(0);\r\n                        for(var i = 0; i < n; i++) {\r\n                            var a, b;\r\n                            a = _.parse(bigDec.exp(bigDec(i).toPower(2).neg().dividedBy(bigDec(n).pow(2).plus(bigDec(R).toPower(2).times(4)))));\r\n                            b = _.parse(format('2*({1})-e^(-(2*{0}*{1}*{2}))*(2*{1}*cosh({2}*{3})-{0}*{3}*sinh({3}*{2}))', Settings.IMAGINARY, R, I, i));\r\n                            retval = _.add(retval, _.multiply(a, b));\r\n                        }\r\n                        return _.multiply(retval, new Symbol(2));\r\n                    }, true);\r\n                };\r\n                var re, im, a, b, c, k;\r\n                re = symbol.realpart();\r\n                im = symbol.imagpart();\r\n\r\n                k = _.parse(format('(e^(-{0}^2))/pi', re));\r\n                a = _.parse(format('(1-e^(-(2*{0}*{1}*{2})))/(2*{1})', Settings.IMAGINARY, re, im));\r\n                b = f(re.toString(), im.toString());\r\n\r\n                return _.add(_.parse(Math2.erf(re.toString())), _.multiply(k, _.add(a, b)));\r\n            },\r\n            removeDen: function (symbol) {\r\n                var den, r, i, re, im;\r\n                if(isArray(symbol)) {\r\n                    r = symbol[0];\r\n                    i = symbol[1];\r\n                }\r\n                else {\r\n                    r = symbol.realpart();\r\n                    i = symbol.imagpart();\r\n                }\r\n\r\n                den = Math.pow(r, 2) + Math.pow(i, 2);\r\n                re = _.parse(r / den);\r\n                im = _.parse(i / den);\r\n                return [re, im];\r\n            },\r\n            fromArray: function (arr) {\r\n                return _.add(arr[0], _.multiply(Symbol.imaginary(), arr[1]));\r\n            },\r\n            evaluate: function (symbol, f) {\r\n                var re, im, sign;\r\n\r\n                sign = symbol.power.sign();\r\n                //remove it from under the denominator\r\n                symbol.power = symbol.power.abs();\r\n                //expand\r\n                if(symbol.power.greaterThan(1))\r\n                    symbol = _.expand(symbol);\r\n                //remove the denominator\r\n                if(sign < 0) {\r\n                    var d = this.removeDen(symbol);\r\n                    re = d[0];\r\n                    im = d[1];\r\n                }\r\n                else {\r\n                    re = symbol.realpart();\r\n                    im = symbol.imagpart();\r\n                }\r\n\r\n                if(re.isConstant('all') && im.isConstant('all'))\r\n                    return this[f].call(this, re, im);\r\n\r\n                return _.symfunction(f, [symbol]);\r\n            }\r\n        };\r\n        //object for functions which handle trig\r\n        var trig = this.trig = {\r\n            //container for trigonometric function\r\n            cos: function (symbol) {\r\n                if(symbol.equals('pi') && symbol.multiplier.den.equals(2))\r\n                    return new Symbol(0);\r\n\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.equals(new Symbol(Settings.PI / 2)))\r\n                        return new Symbol(0);\r\n                    if(symbol.isConstant()) {\r\n                        if(Settings.USE_BIG) {\r\n                            return new Symbol(bigDec.cos(symbol.multiplier.toDecimal()));\r\n                        }\r\n\r\n                        return new Symbol(Math.cos(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary()) {\r\n                        return complex.evaluate(symbol, 'cos');\r\n                    }\r\n                }\r\n                if(symbol.equals(0))\r\n                    return new Symbol(1);\r\n\r\n                var retval,\r\n                        c = false,\r\n                        q = getQuadrant(symbol.multiplier.toDecimal()),\r\n                        m = symbol.multiplier.abs();\r\n                symbol.multiplier = m;\r\n\r\n                if(symbol.isPi() && symbol.isLinear()) {\r\n                    //return for 1 or -1 for multiples of pi\r\n                    if(isInt(m)) {\r\n                        retval = new Symbol(even(m) ? 1 : -1);\r\n                    }\r\n                    else {\r\n                        var n = Number(m.num), d = Number(m.den);\r\n                        if(d === 2)\r\n                            retval = new Symbol(0);\r\n                        else if(d === 3) {\r\n                            retval = _.parse('1/2');\r\n                            c = true;\r\n                        }\r\n                        else if(d === 4) {\r\n                            retval = _.parse('1/sqrt(2)');\r\n                            c = true;\r\n                        }\r\n                        else if(d === 6) {\r\n                            retval = _.parse('sqrt(3)/2');\r\n                            c = true;\r\n                        }\r\n                        else\r\n                            retval = _.symfunction('cos', [symbol]);\r\n                    }\r\n                }\r\n\r\n                if(c && (q === 2 || q === 3))\r\n                    retval.negate();\r\n\r\n                if(!retval)\r\n                    retval = _.symfunction('cos', [symbol]);\r\n\r\n                return retval;\r\n            },\r\n            sin: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant()) {\r\n                        if(symbol % Math.PI === 0) {\r\n                            return new Symbol(0);\r\n                        }\r\n\r\n                        if(Settings.USE_BIG) {\r\n                            return new Symbol(bigDec.sin(symbol.multiplier.toDecimal()));\r\n                        }\r\n\r\n                        return new Symbol(Math.sin(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'sin');\r\n                }\r\n\r\n                if(symbol.equals(0))\r\n                    return new Symbol(0);\r\n\r\n                var retval,\r\n                        c = false,\r\n                        q = getQuadrant(symbol.multiplier.toDecimal()),\r\n                        sign = symbol.multiplier.sign(),\r\n                        m = symbol.multiplier.abs();\r\n                symbol.multiplier = m;\r\n                if(symbol.equals('pi'))\r\n                    retval = new Symbol(0);\r\n                else if(symbol.isPi() && symbol.isLinear()) {\r\n                    //return for 0 for multiples of pi\r\n                    if(isInt(m)) {\r\n                        retval = new Symbol(0);\r\n                    }\r\n                    else {\r\n                        var n = m.num, d = m.den;\r\n                        if(d == 2) {\r\n                            retval = new Symbol(1);\r\n                            c = true;\r\n                        }\r\n                        else if(d == 3) {\r\n                            retval = _.parse('sqrt(3)/2');\r\n                            c = true\r\n                        }\r\n                        else if(d == 4) {\r\n                            retval = _.parse('1/sqrt(2)');\r\n                            c = true;\r\n                        }\r\n                        else if(d == 6) {\r\n                            retval = _.parse('1/2');\r\n                            c = true;\r\n                        }\r\n                        else\r\n                            retval = _.multiply(new Symbol(sign), _.symfunction('sin', [symbol]));\r\n                    }\r\n                }\r\n\r\n                if(!retval)\r\n                    retval = _.multiply(new Symbol(sign), _.symfunction('sin', [symbol]));\r\n\r\n                if(c && (q === 3 || q === 4))\r\n                    retval.negate();\r\n\r\n                return retval;\r\n            },\r\n            tan: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol % Math.PI === 0 && symbol.isLinear()) {\r\n                        return new Symbol(0);\r\n                    }\r\n                    if(symbol.isConstant()) {\r\n                        if(Settings.USE_BIG) {\r\n                            return new Symbol(bigDec.tan(symbol.multiplier.toDecimal()));\r\n                        }\r\n\r\n                        return new Symbol(Math.tan(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'tan');\r\n                }\r\n                var retval,\r\n                        c = false,\r\n                        q = getQuadrant(symbol.multiplier.toDecimal()),\r\n                        m = symbol.multiplier;\r\n\r\n                symbol.multiplier = m;\r\n\r\n                if(symbol.isPi() && symbol.isLinear()) {\r\n                    //return 0 for all multiples of pi\r\n                    if(isInt(m)) {\r\n                        retval = new Symbol(0);\r\n                    }\r\n                    else {\r\n                        var n = m.num, d = m.den;\r\n                        if(d == 2)\r\n                            throw new UndefinedError('tan is undefined for ' + symbol.toString());\r\n                        else if(d == 3) {\r\n                            retval = _.parse('sqrt(3)');\r\n                            c = true;\r\n                        }\r\n                        else if(d == 4) {\r\n                            retval = new Symbol(1);\r\n                            c = true;\r\n                        }\r\n                        else if(d == 6) {\r\n                            retval = _.parse('1/sqrt(3)');\r\n                            c = true;\r\n                        }\r\n                        else\r\n                            retval = _.symfunction('tan', [symbol]);\r\n                    }\r\n                }\r\n\r\n                if(!retval)\r\n                    retval = _.symfunction('tan', [symbol]);\r\n\r\n                if(c && (q === 2 || q === 4))\r\n                    retval.negate();\r\n\r\n                return retval;\r\n            },\r\n            sec: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant()) {\r\n                        if(Settings.USE_BIG) {\r\n                            return new Symbol(new bigDec(1).dividedBy(bigDec.cos(symbol.multiplier.toDecimal())));\r\n                        }\r\n\r\n                        return new Symbol(Math2.sec(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'sec');\r\n                    return _.parse(format('1/cos({0})', symbol));\r\n                }\r\n\r\n                var retval,\r\n                        c = false,\r\n                        q = getQuadrant(symbol.multiplier.toDecimal()),\r\n                        m = symbol.multiplier.abs();\r\n                symbol.multiplier = m;\r\n\r\n                if(symbol.isPi() && symbol.isLinear()) {\r\n                    //return for 1 or -1 for multiples of pi\r\n                    if(isInt(m)) {\r\n                        retval = new Symbol(even(m) ? 1 : -1);\r\n                    }\r\n                    else {\r\n                        var n = m.num, d = m.den;\r\n                        if(d == 2)\r\n                            throw new UndefinedError('sec is undefined for ' + symbol.toString());\r\n                        else if(d == 3) {\r\n                            retval = new Symbol(2);\r\n                            c = true;\r\n                        }\r\n                        else if(d == 4) {\r\n                            retval = _.parse('sqrt(2)');\r\n                            c = true;\r\n                        }\r\n                        else if(d == 6) {\r\n                            retval = _.parse('2/sqrt(3)');\r\n                            c = true;\r\n                        }\r\n                        else\r\n                            retval = _.symfunction('sec', [symbol]);\r\n                    }\r\n                }\r\n\r\n                if(c && (q === 2 || q === 3))\r\n                    retval.negate();\r\n\r\n                if(!retval)\r\n                    retval = _.symfunction('sec', [symbol]);\r\n\r\n                return retval;\r\n            },\r\n            csc: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant()) {\r\n                        if(Settings.USE_BIG) {\r\n                            return new Symbol(new bigDec(1).dividedBy(bigDec.sin(symbol.multiplier.toDecimal())));\r\n                        }\r\n\r\n                        return new Symbol(Math2.csc(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'csc');\r\n                    return _.parse(format('1/sin({0})', symbol));\r\n                }\r\n\r\n                var retval,\r\n                        c = false,\r\n                        q = getQuadrant(symbol.multiplier.toDecimal()),\r\n                        sign = symbol.multiplier.sign(),\r\n                        m = symbol.multiplier.abs();\r\n\r\n                symbol.multiplier = m;\r\n\r\n                if(symbol.isPi() && symbol.isLinear()) {\r\n                    //return for 0 for multiples of pi\r\n                    if(isInt(m)) {\r\n                        throw new UndefinedError('csc is undefined for ' + symbol.toString());\r\n                    }\r\n                    else {\r\n                        var n = m.num, d = m.den;\r\n                        if(d == 2) {\r\n                            retval = new Symbol(1);\r\n                            c = true;\r\n                        }\r\n                        else if(d == 3) {\r\n                            retval = _.parse('2/sqrt(3)');\r\n                            c = true\r\n                        }\r\n                        else if(d == 4) {\r\n                            retval = _.parse('sqrt(2)');\r\n                            c = true;\r\n                        }\r\n                        else if(d == 6) {\r\n                            retval = new Symbol(2);\r\n                            c = true;\r\n                        }\r\n                        else\r\n                            retval = _.multiply(new Symbol(sign), _.symfunction('csc', [symbol]));\r\n                    }\r\n                }\r\n\r\n                if(!retval)\r\n                    retval = _.multiply(new Symbol(sign), _.symfunction('csc', [symbol]));\r\n\r\n                if(c && (q === 3 || q === 4))\r\n                    retval.negate();\r\n\r\n                return retval;\r\n            },\r\n            cot: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol % (Math.PI/2) === 0) {\r\n                        return new Symbol(0);\r\n                    }\r\n                    if(symbol.isConstant()) {\r\n                        if(Settings.USE_BIG) {\r\n                            return new Symbol(new bigDec(1).dividedBy(bigDec.tan(symbol.multiplier.toDecimal())));\r\n                        }\r\n\r\n                        return new Symbol(Math2.cot(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'cot');\r\n                    return _.parse(format('1/tan({0})', symbol));\r\n                }\r\n                var retval,\r\n                        c = false,\r\n                        q = getQuadrant(symbol.multiplier.toDecimal()),\r\n                        m = symbol.multiplier;\r\n\r\n                symbol.multiplier = m;\r\n\r\n                if(symbol.isPi() && symbol.isLinear()) {\r\n                    //return 0 for all multiples of pi\r\n                    if(isInt(m)) {\r\n                        throw new UndefinedError('cot is undefined for ' + symbol.toString());\r\n                    }\r\n                    else {\r\n                        var n = m.num, d = m.den;\r\n                        if(d == 2)\r\n                            retval = new Symbol(0);\r\n                        else if(d == 3) {\r\n                            retval = _.parse('1/sqrt(3)');\r\n                            c = true;\r\n                        }\r\n                        else if(d == 4) {\r\n                            retval = new Symbol(1);\r\n                            c = true;\r\n                        }\r\n                        else if(d == 6) {\r\n                            retval = _.parse('sqrt(3)');\r\n                            c = true;\r\n                        }\r\n                        else\r\n                            retval = _.symfunction('cot', [symbol]);\r\n                    }\r\n                }\r\n\r\n                if(!retval)\r\n                    retval = _.symfunction('cot', [symbol]);\r\n\r\n                if(c && (q === 2 || q === 4))\r\n                    retval.negate();\r\n\r\n                return retval;\r\n            },\r\n            acos: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant()) {\r\n                        // Handle values in the complex domain\r\n                        if(symbol.gt(1) || symbol.lt(-1)) {\r\n                            var x = symbol.toString();\r\n                            return expand(evaluate(`pi/2-asin(${x})`));\r\n                        }\r\n                        // Handle big numbers\r\n                        if(Settings.USE_BIG) {\r\n                            return new Symbol(bigDec.acos(symbol.multiplier.toDecimal()));\r\n                        }\r\n\r\n                        return new Symbol(Math.acos(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'acos');\r\n                }\r\n                return _.symfunction('acos', arguments);\r\n            },\r\n            asin: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant()) {\r\n                        // Handle values in the complex domain\r\n                        if(symbol.gt(1) || symbol.lt(-1)) {\r\n                            var i = Settings.IMAGINARY;\r\n                            var x = symbol.multiplier.toDecimal();\r\n                            return expand(evaluate(`${i}*log(sqrt(1-${x}^2)-${i}*${x})`));\r\n                        }\r\n                        // Handle big numbers\r\n                        if(Settings.USE_BIG) {\r\n                            return new Symbol(bigDec.asin(symbol.multiplier.toDecimal()));\r\n                        }\r\n\r\n                        return new Symbol(Math.asin(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'asin');\r\n                }\r\n                return _.symfunction('asin', arguments);\r\n            },\r\n            atan: function (symbol) {\r\n                var retval;\r\n                if(symbol.equals(0))\r\n                    retval = new Symbol(0);\r\n                else if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant()) {\r\n                        // Handle big numbers\r\n                        if(Settings.USE_BIG) {\r\n                            return new Symbol(bigDec.atan(symbol.multiplier.toDecimal()));\r\n                        }\r\n\r\n                        return new Symbol(Math.atan(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'atan');\r\n                    return _.symfunction('atan', arguments);\r\n                }\r\n                else if(symbol.equals(-1))\r\n                    retval = _.parse('-pi/4');\r\n                else\r\n                    retval = _.symfunction('atan', arguments);\r\n                return retval;\r\n            },\r\n            asec: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.equals(0)) {\r\n                        throw new OutOfFunctionDomainError('Input is out of the domain of sec!');\r\n                    }\r\n                    if(symbol.isConstant()) {\r\n                        return trig.acos(symbol.invert());\r\n                    }\r\n                    if(symbol.isImaginary()) {\r\n                        return complex.evaluate(symbol, 'asec');\r\n                    }\r\n                }\r\n                return _.symfunction('asec', arguments);\r\n            },\r\n            acsc: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant()) {\r\n                        return trig.asin(symbol.invert());\r\n                    }\r\n\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'acsc');\r\n                }\r\n                return _.symfunction('acsc', arguments);\r\n            },\r\n            acot: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant()) {\r\n                        return new _.add(_.parse('pi/2'), trig.atan(symbol).negate());\r\n                    }\r\n\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'acot');\r\n                }\r\n                return _.symfunction('acot', arguments);\r\n            },\r\n            atan2: function (a, b) {\r\n                if(a.equals(0) && b.equals(0))\r\n                    throw new UndefinedError('atan2 is undefined for 0, 0');\r\n\r\n                if(Settings.PARSE2NUMBER && a.isConstant() && b.isConstant()) {\r\n                    return new Symbol(Math.atan2(a, b));\r\n                }\r\n                return _.symfunction('atan2', arguments);\r\n            }\r\n        };\r\n        //object for functions which handle hyperbolic trig\r\n        var trigh = this.trigh = {\r\n            //container for hyperbolic trig function\r\n            cosh: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant())\r\n                        return new Symbol(Math.cosh(symbol.valueOf()));\r\n                    if(symbol.isImaginary()) {\r\n                        return complex.evaluate(symbol, 'cosh');\r\n                    }\r\n                }\r\n\r\n                return retval = _.symfunction('cosh', arguments);\r\n            },\r\n            sinh: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant())\r\n                        return new Symbol(Math.sinh(symbol.valueOf()));\r\n                    if(symbol.isImaginary()) {\r\n                        return complex.evaluate(symbol, 'sinh');\r\n                    }\r\n                }\r\n\r\n                return retval = _.symfunction('sinh', arguments);\r\n            },\r\n            tanh: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant())\r\n                        return new Symbol(Math.tanh(symbol.valueOf()));\r\n                    if(symbol.isImaginary()) {\r\n                        return complex.evaluate(symbol, 'tanh');\r\n                    }\r\n                }\r\n\r\n                return retval = _.symfunction('tanh', arguments);\r\n            },\r\n            sech: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant()) {\r\n                        return new Symbol(Math.sech(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary()) {\r\n                        return complex.evaluate(symbol, 'sech');\r\n                    }\r\n                    return _.parse(format('1/cosh({0})', symbol));\r\n                }\r\n\r\n                return retval = _.symfunction('sech', arguments);\r\n            },\r\n            csch: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant())\r\n                        return new Symbol(Math.csch(symbol.valueOf()));\r\n                    if(symbol.isImaginary()) {\r\n                        return complex.evaluate(symbol, 'csch');\r\n                    }\r\n                    return _.parse(format('1/sinh({0})', symbol));\r\n                }\r\n\r\n                return retval = _.symfunction('csch', arguments);\r\n            },\r\n            coth: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant())\r\n                        return new Symbol(Math.coth(symbol.valueOf()));\r\n                    if(symbol.isImaginary()) {\r\n                        return complex.evaluate(symbol, 'coth');\r\n                    }\r\n                    return _.parse(format('1/tanh({0})', symbol));\r\n                }\r\n\r\n                return retval = _.symfunction('coth', arguments);\r\n            },\r\n            acosh: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER && symbol.isImaginary())\r\n                    retval = complex.evaluate(symbol, 'acosh');\r\n                else if(Settings.PARSE2NUMBER)\r\n                    retval = evaluate(_.parse(format(Settings.LOG + '(({0})+sqrt(({0})^2-1))', symbol.toString())));\r\n                else\r\n                    retval = _.symfunction('acosh', arguments);\r\n                return retval;\r\n            },\r\n            asinh: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER && symbol.isImaginary())\r\n                    retval = complex.evaluate(symbol, 'asinh');\r\n                else if(Settings.PARSE2NUMBER)\r\n                    retval = evaluate(_.parse(format(Settings.LOG + '(({0})+sqrt(({0})^2+1))', symbol.toString())));\r\n                else\r\n                    retval = _.symfunction('asinh', arguments);\r\n                return retval;\r\n            },\r\n            atanh: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER && symbol.isImaginary())\r\n                    retval = complex.evaluate(symbol, 'atanh');\r\n                else if(Settings.PARSE2NUMBER) {\r\n                    retval = evaluate(_.parse(format('(1/2)*' + Settings.LOG + '((1+({0}))/(1-({0})))', symbol.toString())));\r\n                }\r\n                else\r\n                    retval = _.symfunction('atanh', arguments);\r\n                return retval;\r\n            },\r\n            asech: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER && symbol.isImaginary())\r\n                    retval = complex.evaluate(symbol, 'asech');\r\n                else if(Settings.PARSE2NUMBER)\r\n                    retval = evaluate(log(_.add(symbol.clone().invert(), sqrt(_.subtract(_.pow(symbol, new Symbol(-2)), new Symbol(1))))));\r\n                else\r\n                    retval = _.symfunction('asech', arguments);\r\n                return retval;\r\n            },\r\n            acsch: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER && symbol.isImaginary())\r\n                    retval = complex.evaluate(symbol, 'acsch');\r\n                else if(Settings.PARSE2NUMBER)\r\n                    retval = evaluate(_.parse(format(Settings.LOG + '((1+sqrt(1+({0})^2))/({0}))', symbol.toString())));\r\n                else\r\n                    retval = _.symfunction('acsch', arguments);\r\n                return retval;\r\n            },\r\n            acoth: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER && symbol.isImaginary())\r\n                    retval = complex.evaluate(symbol, 'acoth');\r\n                else if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.equals(1))\r\n                        retval = Symbol.infinity();\r\n                    else\r\n                        retval = evaluate(\r\n                                _.divide(\r\n                                        log(_.divide(_.add(symbol.clone(), new Symbol(1)), _.subtract(symbol.clone(), new Symbol(1)))),\r\n                                        new Symbol(2)));\r\n                }\r\n                else\r\n                    retval = _.symfunction('acoth', arguments);\r\n                return retval;\r\n            }\r\n        };\r\n        //list of supported units\r\n        this.units = {};\r\n        //list all the supported operators\r\n        var operators = {\r\n            '\\\\': {\r\n                precedence: 8,\r\n                operator: '\\\\',\r\n                action: 'slash',\r\n                prefix: true,\r\n                postfix: false,\r\n                leftAssoc: true,\r\n                operation: function (e) {\r\n                    return e; //bypass the slash\r\n                }\r\n            },\r\n            '!!': {\r\n                precedence: 7,\r\n                operator: '!!',\r\n                action: 'dfactorial',\r\n                prefix: false,\r\n                postfix: true,\r\n                leftAssoc: true,\r\n                operation: function (e) {\r\n                    return _.symfunction(Settings.DOUBLEFACTORIAL, [e]); //wrap it in a factorial function\r\n                }\r\n            },\r\n            '!': {\r\n                precedence: 7,\r\n                operator: '!',\r\n                action: 'factorial',\r\n                prefix: false,\r\n                postfix: true,\r\n                leftAssoc: true,\r\n                operation: function (e) {\r\n                    return factorial(e); //wrap it in a factorial function\r\n                }\r\n            },\r\n            '^': {\r\n                precedence: 6,\r\n                operator: '^',\r\n                action: 'pow',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: true\r\n            },\r\n            '**': {\r\n                precedence: 6,\r\n                operator: '**',\r\n                action: 'pow',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: true\r\n            },\r\n            '%': {\r\n                precedence: 4,\r\n                operator: '%',\r\n                action: 'percent',\r\n                prefix: false,\r\n                postfix: true,\r\n                leftAssoc: true,\r\n                overloaded: true,\r\n                overloadAction: 'mod',\r\n                overloadLeftAssoc: false,\r\n                operation: function (x) {\r\n                    return _.divide(x, new Symbol(100));\r\n                }\r\n            },\r\n            '*': {\r\n                precedence: 4,\r\n                operator: '*',\r\n                action: 'multiply',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false\r\n            },\r\n            '/': {\r\n                precedence: 4,\r\n                operator: '/',\r\n                action: 'divide',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false\r\n            },\r\n            '+': {\r\n                precedence: 3,\r\n                operator: '+',\r\n                action: 'add',\r\n                prefix: true,\r\n                postfix: false,\r\n                leftAssoc: false,\r\n                operation: function (x) {\r\n                    return x;\r\n                }\r\n            },\r\n            'plus': {\r\n                precedence: 3,\r\n                operator: 'plus',\r\n                action: 'add',\r\n                prefix: true,\r\n                postfix: false,\r\n                leftAssoc: false,\r\n                operation: function (x) {\r\n                    return x;\r\n                }\r\n            },\r\n            '-': {\r\n                precedence: 3,\r\n                operator: '-',\r\n                action: 'subtract',\r\n                prefix: true,\r\n                postfix: false,\r\n                leftAssoc: false,\r\n                operation: function (x) {\r\n                    return x.negate();\r\n                }\r\n            },\r\n            '=': {\r\n                precedence: 2,\r\n                operator: '=',\r\n                action: 'equals',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false\r\n            },\r\n            '==': {\r\n                precedence: 1,\r\n                operator: '==',\r\n                action: 'eq',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false\r\n            },\r\n            '<': {\r\n                precedence: 1,\r\n                operator: '<',\r\n                action: 'lt',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false\r\n            },\r\n            '<=': {\r\n                precedence: 1,\r\n                operator: '<=',\r\n                action: 'lte',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false\r\n            },\r\n            '>': {\r\n                precedence: 1,\r\n                operator: '>',\r\n                action: 'gt',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false\r\n            },\r\n            '=>': {\r\n                precedence: 1,\r\n                operator: '=>',\r\n                action: 'gte',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false\r\n            },\r\n            ',': {\r\n                precedence: 0,\r\n                operator: ',',\r\n                action: 'comma',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false\r\n            },\r\n            ':': {\r\n                precedence: 0,\r\n                operator: ',',\r\n                action: 'assign',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false,\r\n                vectorFn: 'slice'\r\n            },\r\n            ':=': {\r\n                precedence: 0,\r\n                operator: ',',\r\n                action: 'function_assign',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: true\r\n            }\r\n        };\r\n        //brackets\r\n        var brackets = {\r\n            '(': {\r\n                type: 'round',\r\n                id: 1,\r\n                is_open: true,\r\n                is_close: false\r\n            },\r\n            ')': {\r\n                type: 'round',\r\n                id: 2,\r\n                is_open: false,\r\n                is_close: true\r\n            },\r\n            '[': {\r\n                type: 'square',\r\n                id: 3,\r\n                is_open: true,\r\n                is_close: false,\r\n                maps_to: 'vector'\r\n            },\r\n            ']': {\r\n                type: 'square',\r\n                id: 4,\r\n                is_open: false,\r\n                is_close: true\r\n            },\r\n            '{': {\r\n                type: 'curly',\r\n                id: 5,\r\n                is_open: true,\r\n                is_close: false,\r\n                maps_to: 'Set'\r\n            },\r\n            '}': {\r\n                type: 'curly',\r\n                id: 6,\r\n                is_open: false,\r\n                is_close: true\r\n            }\r\n        };\r\n        // Supported functions.\r\n        // Format: function_name: [mapped_function, number_of_parameters]\r\n        var functions = this.functions = {\r\n            'cos': [trig.cos, 1],\r\n            'sin': [trig.sin, 1],\r\n            'tan': [trig.tan, 1],\r\n            'sec': [trig.sec, 1],\r\n            'csc': [trig.csc, 1],\r\n            'cot': [trig.cot, 1],\r\n            'acos': [trig.acos, 1],\r\n            'asin': [trig.asin, 1],\r\n            'atan': [trig.atan, 1],\r\n            'arccos': [trig.acos, 1],\r\n            'arcsin': [trig.asin, 1],\r\n            'arctan': [trig.atan, 1],\r\n            'asec': [trig.asec, 1],\r\n            'acsc': [trig.acsc, 1],\r\n            'acot': [trig.acot, 1],\r\n            'atan2': [trig.atan2, 2],\r\n            'acoth': [trigh.acoth, 1],\r\n            'asech': [trigh.asech, 1],\r\n            'acsch': [trigh.acsch, 1],\r\n            'sinh': [trigh.sinh, 1],\r\n            'cosh': [trigh.cosh, 1],\r\n            'tanh': [trigh.tanh, 1],\r\n            'asinh': [trigh.asinh, 1],\r\n            'sech': [trigh.sech, 1],\r\n            'csch': [trigh.csch, 1],\r\n            'coth': [trigh.coth, 1],\r\n            'acosh': [trigh.acosh, 1],\r\n            'atanh': [trigh.atanh, 1],\r\n            'log10': [, 1],\r\n            'exp': [exp, 1],\r\n            'radians': [radians, 1],\r\n            'degrees': [degrees, 1],\r\n            'min': [min, -1],\r\n            'max': [max, -1],\r\n            'erf': [, 1],\r\n            'floor': [, 1],\r\n            'ceil': [, 1],\r\n            'trunc': [, 1],\r\n            'Si': [, 1],\r\n            'step': [, 1],\r\n            'rect': [, 1],\r\n            'sinc': [sinc, 1],\r\n            'tri': [, 1],\r\n            'sign': [sign, 1],\r\n            'Ci': [, 1],\r\n            'Ei': [, 1],\r\n            'Shi': [, 1],\r\n            'Chi': [, 1],\r\n            'Li': [, 1],\r\n            'fib': [, 1],\r\n            'fact': [factorial, 1],\r\n            'factorial': [factorial, 1],\r\n            'continued_fraction': [continued_fraction, [1, 2]],\r\n            'dfactorial': [, 1],\r\n            'gamma_incomplete': [, [1, 2]],\r\n            'round': [round, [1, 2]],\r\n            'scientific': [scientific, [1, 2]],\r\n            'mod': [mod, 2],\r\n            'pfactor': [pfactor, 1],\r\n            'vector': [vector, -1],\r\n            'matrix': [matrix, -1],\r\n            'Set': [set, -1],\r\n            'imatrix': [imatrix, -1],\r\n            'parens': [parens, -1],\r\n            'sqrt': [sqrt, 1],\r\n            'cbrt': [cbrt, 1],\r\n            'nthroot': [nthroot, 2],\r\n            'log': [log, [1, 2]],\r\n            'expand': [expandall, 1],\r\n            'abs': [abs, 1],\r\n            'invert': [invert, 1],\r\n            'determinant': [determinant, 1],\r\n            'size': [size, 1],\r\n            'transpose': [transpose, 1],\r\n            'dot': [dot, 2],\r\n            'cross': [cross, 2],\r\n            'vecget': [vecget, 2],\r\n            'vecset': [vecset, 3],\r\n            'vectrim': [vectrim, [1, 2]],\r\n            'matget': [matget, 3],\r\n            'matset': [matset, 4],\r\n            'matgetrow': [matgetrow, 2],\r\n            'matsetrow': [matsetrow, 3],\r\n            'matgetcol': [matgetcol, 2],\r\n            'matsetcol': [matsetcol, 3],\r\n            'rationalize': [rationalize, 1],\r\n            'IF': [IF, 3],\r\n            'is_in': [is_in, 2],\r\n            //imaginary support\r\n            'realpart': [realpart, 1],\r\n            'imagpart': [imagpart, 1],\r\n            'conjugate': [conjugate, 1],\r\n            'arg': [arg, 1],\r\n            'polarform': [polarform, 1],\r\n            'rectform': [rectform, 1],\r\n            'sort': [sort, [1, 2]],\r\n            'integer_part': [, 1],\r\n            'union': [union, 2],\r\n            'contains': [contains, 2],\r\n            'intersection': [intersection, 2],\r\n            'difference': [difference, 2],\r\n            'intersects': [intersects, 2],\r\n            'is_subset': [is_subset, 2],\r\n            //system support\r\n            'print': [print, -1]\r\n        };\r\n\r\n        //error handler\r\n        this.error = err;\r\n        //this function is used to comb through the function modules and find a function given its name\r\n        var findFunction = function (fname) {\r\n            var fmodules = Settings.FUNCTION_MODULES,\r\n                    l = fmodules.length;\r\n            for(var i = 0; i < l; i++) {\r\n                var fmodule = fmodules[i];\r\n                if(fname in fmodule)\r\n                    return fmodule[fname];\r\n            }\r\n            err('The function ' + fname + ' is undefined!');\r\n        };\r\n\r\n        /**\r\n         * This method gives the ability to override operators with new methods.\r\n         * @param {String} which\r\n         * @param {Function} with_what\r\n         */\r\n        this.override = function (which, with_what) {\r\n            if(!bin[which])\r\n                bin[which] = [];\r\n            bin[which].push(this[which]);\r\n            this[which] = with_what;\r\n        };\r\n\r\n        /**\r\n         * Restores a previously overridden operator\r\n         * @param {String} what\r\n         */\r\n        this.restore = function (what) {\r\n            if(this[what])\r\n                this[what] = bin[what].pop();\r\n        };\r\n\r\n        /**\r\n         * This method is supposed to behave similarly to the override method but it does not override\r\n         * the existing function rather it only extends it\r\n         * @param {String} what\r\n         * @param {Function} with_what\r\n         * @param {boolean} force_call\r\n         */\r\n        this.extend = function (what, with_what, force_call) {\r\n            var _ = this,\r\n                    extended = this[what];\r\n            if(typeof extended === 'function' && typeof with_what === 'function') {\r\n                var f = this[what];\r\n                this[what] = function (a, b) {\r\n                    if(isSymbol(a) && isSymbol(b) && !force_call)\r\n                        return f.call(_, a, b);\r\n                    else\r\n                        return with_what.call(_, a, b, f);\r\n                };\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Generates library's representation of a function. It's a fancy way of saying a symbol with\r\n         * a few extras. The most important thing is that that it gives a fname and\r\n         * an args property to the symbols in addition to changing its group to FN\r\n         * @param {String} fn_name\r\n         * @param {Array} params\r\n         * @returns {Symbol}\r\n         */\r\n        this.symfunction = function (fn_name, params) {\r\n            //call the proper function and return the result;\r\n            var f = new Symbol(fn_name);\r\n            f.group = FN;\r\n            if(typeof params === 'object')\r\n                params = [].slice.call(params);//ensure an array\r\n            f.args = params;\r\n            f.fname = fn_name === PARENTHESIS ? '' : fn_name;\r\n            f.updateHash();\r\n            return f;\r\n        };\r\n\r\n        /**\r\n         * An internal function call for the Parser. This will either trigger a real\r\n         * function call if it can do so or just return a symbolic representation of the\r\n         * function using symfunction.\r\n         * @param {String} fn_name\r\n         * @param {Array} args\r\n         * @param {int} allowed_args\r\n         * @returns {Symbol}\r\n         */\r\n        this.callfunction = function (fn_name, args, allowed_args) {\r\n            var fn_settings = functions[fn_name];\r\n\r\n            if(!fn_settings)\r\n                err('Nerdamer currently does not support the function ' + fn_name);\r\n\r\n            var num_allowed_args = fn_settings[1] || allowed_args, //get the number of allowed arguments\r\n                    fn = fn_settings[0], //get the mapped function\r\n                    retval;\r\n            //We want to be able to call apply on the arguments or create a symfunction. Both require\r\n            //an array so make sure to wrap the argument in an array.\r\n            if(!(args instanceof Array))\r\n                args = args !== undefined ? [args] : [];\r\n\r\n            if(num_allowed_args !== -1) {\r\n                var is_array = isArray(num_allowed_args),\r\n                        min_args = is_array ? num_allowed_args[0] : num_allowed_args,\r\n                        max_args = is_array ? num_allowed_args[1] : num_allowed_args,\r\n                        num_args = args.length;\r\n\r\n                var error_msg = fn_name + ' requires a {0} of {1} arguments. {2} provided!';\r\n\r\n                if(num_args < min_args)\r\n                    err(format(error_msg, 'minimum', min_args, num_args));\r\n                if(num_args > max_args)\r\n                    err(format(error_msg, 'maximum', max_args, num_args));\r\n            }\r\n\r\n            /*\r\n             * The following are very important to the how nerdamer constructs functions!\r\n             * Assumption 1 - if fn is undefined then handling of the function is purely numeric. This\r\n             *     enables us to reuse Math, Math2, ..., any function from Settings.FUNCTIONS_MODULES entry\r\n             * Assumption 2 - if fn is defined then that function takes care of EVERYTHING including symbolics\r\n             * Assumption 3 - if the user calls symbolics on a function that returns a numeric value then\r\n             *     they are expecting a symbolic output.\r\n             */\r\n            //check if arguments are all numers\r\n            var numericArgs = allNumbers(args);\r\n            //Big number support. Check if Big number is requested and the arguments are all numeric and, not imaginary\r\n//            if (Settings.USE_BIG && numericArgs) {\r\n//                retval = Big[fn_name].apply(undefined, args);\r\n//            }\r\n//            else {\r\n            if(!fn) {\r\n                //Remember assumption 1. No function defined so it MUST be numeric in nature\r\n                fn = findFunction(fn_name);\r\n                if(Settings.PARSE2NUMBER && numericArgs)\r\n                    retval = bigConvert(fn.apply(fn, args));\r\n                else\r\n                    retval = _.symfunction(fn_name, args);\r\n            }\r\n            else {\r\n                //Remember assumption 2. The function is defined so it MUST handle all aspects including numeric values\r\n                retval = fn.apply(fn_settings[2], args);\r\n            }\r\n//            }\r\n\r\n            return retval;\r\n        };\r\n        /**\r\n         * Build a regex based on the operators currently loaded. These operators are to be ignored when\r\n         * substituting spaces for multiplication\r\n         */\r\n        this.operator_filter_regex = (function () {\r\n            //we only want the operators which are singular since those are the ones\r\n            //that nerdamer uses anyway\r\n            var ostr = '^\\\\' + Object.keys(operators).filter(function (x) {\r\n                if(x.length === 1)\r\n                    return x;\r\n            }).join('\\\\');\r\n            //create a regex which captures all spaces between characters except those\r\n            //have an operator on one end\r\n            return new RegExp('([' + ostr + '])\\\\s+([' + ostr + '])');\r\n        })();\r\n\r\n        /**\r\n         * Replaces nerdamer.setOperator\r\n         * @param {object} operator\r\n         * @param {boolean} shift\r\n         */\r\n        this.setOperator = function (operator, action, shift) {\r\n            var name = operator.operator; //take the name to be the symbol\r\n            operators[name] = operator;\r\n            if(action)\r\n                this[operator.action] = action;\r\n            //make the parser aware of the operator\r\n            _[name] = operator.operation;\r\n            //make the action available to the parser if infix\r\n            if(!operator.action && !(operator.prefix || operator.postif)) {\r\n                operator.action = name;\r\n            }\r\n            //if this operator is exclusive then all successive operators should be shifted\r\n            if(shift === 'over' || shift === 'under') {\r\n                var precedence = operator.precedence;\r\n\r\n                for(var x in operators) {\r\n                    var o = operators[x];\r\n                    var condition = shift === 'over' ? o.precedence >= precedence : o.precedence > precedence;\r\n                    if(condition)\r\n                        o.precedence++;\r\n                }\r\n                ;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Gets an opererator by its symbol\r\n         * @param {String} operator\r\n         * @returns {Object}\r\n         */\r\n        this.getOperator = function (operator) {\r\n            return operators[operator];\r\n        };\r\n\r\n        this.aliasOperator = function (o, n) {\r\n            var t = {};\r\n            var operator = operators[o];\r\n            //copy everything over to the new operator\r\n            for(var x in operator) {\r\n                t[x] = operator[x];\r\n            }\r\n            //update the symbol\r\n            t.operator = n;\r\n\r\n            this.setOperator(t);\r\n        };\r\n\r\n        /**\r\n         * Returns the list of operators. Caution! Can break parser!\r\n         * @returns {object}\r\n         */\r\n        this.getOperators = function () {\r\n            //will replace this with some cloning action in the future\r\n            return operators;\r\n        };\r\n\r\n        this.getBrackets = function () {\r\n            return brackets;\r\n        };\r\n        /*\r\n         * Preforms preprocessing on the string. Useful for making early modification before\r\n         * sending to the parser\r\n         * @param {String} e\r\n         */\r\n        var prepare_expression = function (e) {\r\n            /*\r\n             * Since variables cannot start with a number, the assumption is made that when this occurs the\r\n             * user intents for this to be a coefficient. The multiplication symbol in then added. The same goes for\r\n             * a side-by-side close and open parenthesis\r\n             */\r\n            e = String(e);\r\n            //apply preprocessors\r\n            for(var i = 0; i < preprocessors.actions.length; i++)\r\n                e = preprocessors.actions[i].call(this, e);\r\n\r\n            //e = e.split(' ').join('');//strip empty spaces\r\n            //replace multiple spaces with one space\r\n            e = e.replace(/\\s+/g, ' ');\r\n\r\n            //only even bother to check if the string contains e. This regex is painfully slow and might need a better solution. e.g. hangs on (0.06/3650))^(365)\r\n            if(/e/gi.test(e)) {\r\n                e = e.replace(/\\-*\\d+\\.*\\d*e\\+?\\-?\\d+/gi, function (x) {\r\n                    return scientificToDecimal(x);\r\n                });\r\n            }\r\n            //replace scientific numbers\r\n\r\n            //allow omission of multiplication after coefficients\r\n            e = e.replace(Settings.IMPLIED_MULTIPLICATION_REGEX, function () {\r\n                var str = arguments[4],\r\n                        group1 = arguments[1],\r\n                        group2 = arguments[2],\r\n                        start = arguments[3],\r\n                        first = str.charAt(start),\r\n                        before = '',\r\n                        d = '*';\r\n                if(!first.match(/[\\+\\-\\/\\*]/))\r\n                    before = str.charAt(start - 1);\r\n                if(before.match(/[a-z]/i))\r\n                    d = '';\r\n                return group1 + d + group2;\r\n            })\r\n                    .replace(/([a-z0-9_]+)/gi, function (match, a) {\r\n                        if(Settings.USE_MULTICHARACTER_VARS === false && !(a in functions)) {\r\n                            if(!isNaN(a))\r\n                                return a;\r\n                            return a.split('').join('*');\r\n                        }\r\n                        return a;\r\n                    })\r\n                    //allow omission of multiplication sign between brackets\r\n                    .replace(/\\)\\(/g, ')*(') || '0';\r\n            //replace x(x+a) with x*(x+a)\r\n            while(true) {\r\n                var e_org = e; //store the original\r\n                e = e.replace(/([a-z0-9_]+)(\\()|(\\))([a-z0-9]+)/gi, function (match, a, b, c, d) {\r\n                    var g1 = a || c,\r\n                            g2 = b || d;\r\n                    if(g1 in functions) //create a passthrough for functions\r\n                        return g1 + g2;\r\n                    return g1 + '*' + g2;\r\n                });\r\n                //if the original equals the replace we're done\r\n                if(e_org === e)\r\n                    break;\r\n            }\r\n            return e;\r\n        };\r\n        //delay setting of constants until Settings is ready\r\n        this.initConstants = function () {\r\n            this.CONSTANTS = {\r\n                E: new Symbol(Settings.E),\r\n                PI: new Symbol(Settings.PI)\r\n            };\r\n        };\r\n        /*\r\n         * Debugging method used to better visualize vector and arrays\r\n         * @param {object} o\r\n         * @returns {String}\r\n         */\r\n        this.pretty_print = function (o) {\r\n            if(Array.isArray(o)) {\r\n                var s = o.map(x => _.pretty_print(x)).join(', ');\r\n                if(o.type === 'vector')\r\n                    return 'vector<' + s + '>';\r\n                return '(' + s + ')';\r\n            }\r\n            return o.toString();\r\n        };\r\n        this.peekers = {\r\n            pre_operator: [],\r\n            post_operator: [],\r\n            pre_function: [],\r\n            post_function: []\r\n        };\r\n\r\n        this.callPeekers = function (name) {\r\n            if(Settings.callPeekers) {\r\n                var peekers = this.peekers[name];\r\n                //remove the first items and stringify\r\n                var args = arguments2Array(arguments).slice(1).map(stringify);\r\n                //call each one of the peekers\r\n                for(var i = 0; i < peekers.length; i++) {\r\n                    peekers[i].apply(null, args);\r\n                }\r\n            }\r\n        };\r\n        /*\r\n         * Tokenizes the string\r\n         * @param {String} e\r\n         * @returns {Token[]}\r\n         */\r\n        this.tokenize = function (e) {\r\n            //cast to String\r\n            e = String(e);\r\n            //remove multiple white spaces and spaces at beginning and end of string\r\n            e = e.trim().replace(/\\s+/g, ' ');\r\n            //remove spaces before and after brackets\r\n            for(var x in brackets) {\r\n                var regex = new RegExp(brackets[x].is_close ? '\\\\s+\\\\' + x : '\\\\' + x + '\\\\s+', 'g');\r\n                e = e.replace(regex, x);\r\n            }\r\n\r\n            var col = 0; //the column position\r\n            var L = e.length; //expression length\r\n            var lpos = 0; //marks beginning of next token\r\n            var tokens = []; //the tokens container\r\n            var scopes = [tokens]; //initiate with the tokens as the highest scope\r\n            var target = scopes[0]; //the target to which the tokens are added. This can swing up or down\r\n            var depth = 0;\r\n            var open_brackets = [];\r\n            var has_space = false; //marks if an open space character was found\r\n            var SPACE = ' ';\r\n            var EMPTY_STRING = '';\r\n            var COMMA = ',';\r\n            var MINUS = '-';\r\n            var MULT = '*';\r\n            //Possible source of bug. Review\r\n            /*\r\n             //gets the next space\r\n             var next_space = function(from) {\r\n             for(var i=from; i<L; i++) {\r\n             if(e.charAt(i) === ' ')\r\n             return i;\r\n             }\r\n             \r\n             return L; //assume the end of the string instead\r\n             };\r\n             */\r\n            /**\r\n             * Adds a scope to tokens\r\n             * @param {String} scope_type\r\n             * @param {int} column\r\n             * @returns {undefined}\r\n             */\r\n            var addScope = function (scope_type, column) {\r\n                var new_scope = []; //create a new scope\r\n                if(scope_type !== undefined) {\r\n                    new_scope.type = scope_type;\r\n                }\r\n                new_scope.column = column; //mark the column of the scope\r\n                scopes.push(new_scope); //add it to the list of scopes\r\n                target.push(new_scope); //add it to the tokens list since now it's a scope\r\n                target = new_scope; //point to it\r\n                depth++; //go down one in scope\r\n            };\r\n            /**\r\n             * Goes up in scope by one\r\n             * @returns {undefined}\r\n             */\r\n            var goUp = function () {\r\n                scopes.pop(); //remove the scope from the scopes stack\r\n                target = scopes[--depth]; //point the above scope\r\n            };\r\n            /**\r\n             * Extracts all the operators from the expression string starting at postion start_at\r\n             * @param {int} start_at\r\n             * @returns {String}\r\n             */\r\n            var get_operator_str = function (start_at) {\r\n                start_at = start_at !== undefined ? start_at : col;\r\n                //mark the end of the operator as the start since we're just going\r\n                //to be walking along the string\r\n                var end = start_at + 1;\r\n                //just keep moving along\r\n                while(e.charAt(end++) in operators) {\r\n                }\r\n                //remember that we started at one position ahead. The beginning operator is what triggered\r\n                //this function to be called in the first place. String.CharAt is zero based so we now\r\n                //have to correct two places. The initial increment + the extra++ at the end of end during\r\n                //the last iteration.\r\n                return e.substring(start_at, end - 1);\r\n            };\r\n            /**\r\n             * Breaks operator up in to several different operators as defined in operators\r\n             * @param {String} operator_str\r\n             * @returns {String[]}\r\n             */\r\n            var chunkify = function (operator_str) {\r\n                var start = col - operator_str.length; //start of operator\r\n                var _operators = [];\r\n                var operator = operator_str.charAt(0);\r\n                //grab the largest possible chunks but start at 2 since we already know\r\n                //that the first character is an operator\r\n\r\n                for(var i = 1, L = operator_str.length; i < L; i++) {\r\n                    var ch = operator_str.charAt(i);\r\n                    var o = operator + ch;\r\n                    //since the operator now is undefined then the last operator\r\n                    //was the largest possible combination.\r\n                    if(!(o in operators)) {\r\n                        _operators.push(new Token(operator, Token.OPERATOR, start + i));\r\n                        operator = ch;\r\n                    }\r\n                    else\r\n                        operator = o;//now the operator is the larger chunk\r\n                }\r\n                //add the last operator\r\n                _operators.push(new Token(operator, Token.OPERATOR, start + i));\r\n                return _operators;\r\n            };\r\n\r\n            /**\r\n             * Is used to add a token to the tokens array. Makes sure that no empty token is added\r\n             * @param {int} at\r\n             * @param {String} token\r\n             * @returns {undefined}\r\n             */\r\n            var add_token = function (at, token) {\r\n                //grab the token if we're not supplied one\r\n                if(token === undefined)\r\n                    token = e.substring(lpos, at);\r\n                //only add it if it's not an empty string\r\n                if(token in _.units)\r\n                    target.push(new Token(token, Token.UNIT, lpos));\r\n                else if(token !== '')\r\n                    target.push(new Token(token, Token.VARIABLE_OR_LITERAL, lpos));\r\n            };\r\n            /**\r\n             * Adds a function to the output\r\n             * @param {String} f\r\n             * @returns {undefined}\r\n             */\r\n            var add_function = function (f) {\r\n                target.push(new Token(f, Token.FUNCTION, lpos));\r\n            };\r\n            /**\r\n             * Tokens are found between operators so this marks the location of where the last token was found\r\n             * @param {int} position\r\n             * @returns {undefined}\r\n             */\r\n            var set_last_position = function (position) {\r\n                lpos = position + 1;\r\n            };\r\n            /**\r\n             * When a operator is found and added, especially a combo operator, then the column location\r\n             * has to be adjusted to the end of the operator\r\n             * @returns {undefined}\r\n             */\r\n            var adjust_column_position = function () {\r\n                lpos = lpos + operator_str.length - 2;\r\n                col = lpos - 1;\r\n            };\r\n            for(; col < L; col++) {\r\n                var ch = e.charAt(col);\r\n                if(ch in operators) {\r\n                    add_token(col);\r\n                    //is the last token numeric?\r\n                    var last_token_is_numeric = target[0] && isNumber(target[0]);\r\n                    //is this character multiplication?\r\n                    var is_multiplication = last_token_is_numeric && ch === MULT;\r\n                    //if we're in a new scope then go up by one but if the space\r\n                    //is right befor an operator then it makes no sense to go up in scope\r\n                    //consider sin -x. The last position = current position at the minus sign\r\n                    //this means that we're going for sin(x) -x which is wrong\r\n                    //Ignore comma since comma is still part of the existing scope.\r\n                    if(has_space && lpos < col && !(ch === COMMA || is_multiplication)) {\r\n                        has_space = false;\r\n                        goUp();\r\n                    }\r\n                    //mark the last position that a\r\n                    set_last_position(col + 1);\r\n                    var operator_str = get_operator_str(col);\r\n\r\n                    adjust_column_position();\r\n                    target.push.apply(target, chunkify(operator_str));\r\n                }\r\n                else if(ch in brackets) {\r\n                    var bracket = brackets[ch];\r\n\r\n                    if(bracket.is_open) {\r\n                        //mark the bracket\r\n                        open_brackets.push([bracket, lpos]);\r\n                        var f = e.substring(lpos, col);\r\n                        if(f in functions) {\r\n                            add_function(f);\r\n                        }\r\n                        else if(f !== '') {\r\n                            //assume multiplication\r\n                            //TODO: Add the multiplication to stack\r\n                            target.push(new Token(f, Token.VARIABLE_OR_LITERAL, lpos));\r\n                        }\r\n                        //go down one in scope\r\n                        addScope(bracket.maps_to, col);\r\n                    }\r\n                    else if(bracket.is_close) {\r\n                        //get the matching bracket\r\n                        var pair = open_brackets.pop();\r\n                        //throw errors accordingly\r\n                        //missing open bracket\r\n                        if(!pair)\r\n                            throw new ParityError('Missing open bracket for bracket at: ' + (col + 1));\r\n                        //incorrect pair\r\n                        else if(pair[0].id !== bracket.id - 1)\r\n                            throw new ParityError('Parity error');\r\n\r\n                        add_token(col);\r\n                        goUp();\r\n                    }\r\n                    set_last_position(col);\r\n                }\r\n                else if(ch === SPACE) {\r\n                    var prev = e.substring(lpos, col); //look back\r\n                    var nxt = e.charAt(col + 1); //look forward\r\n                    if(has_space) {\r\n\r\n                        if(prev in operators) {\r\n                            target.push(new Token(prev, Token.OPERATOR, col));\r\n                        }\r\n                        else {\r\n                            add_token(undefined, prev);\r\n                            //we're at the closing space\r\n                            goUp(); //go up in scope if we're at a space\r\n\r\n                            //assume multiplication if it's not an operator except for minus\r\n                            var is_operator = nxt in operators;\r\n\r\n                            if((is_operator && operators[nxt].value === MINUS) || !is_operator) {\r\n                                target.push(new Token(MULT, Token.OPERATOR, col));\r\n                            }\r\n                        }\r\n                        has_space = false; //remove the space\r\n                    }\r\n                    else {\r\n                        //we're at the closing space\r\n                        //check if it's a function\r\n                        var f = e.substring(lpos, col);\r\n\r\n                        if(f in functions) {\r\n                            //there's no need to go up in scope if the next character is an operator\r\n                            has_space = true; //mark that a space was found\r\n                            add_function(f);\r\n                            addScope();\r\n                        }\r\n                        else if(f in operators) {\r\n                            target.push(new Token(f, Token.OPERATOR, col));\r\n                        }\r\n                        else {\r\n                            add_token(undefined, f);\r\n                            //peek ahead to the next character\r\n                            var nxt = e.charAt(col + 1);\r\n\r\n                            //If it's a number then add the multiplication operator to the stack but make sure that the next character\r\n                            //is not an operator\r\n\r\n                            if(prev !== EMPTY_STRING && nxt !== EMPTY_STRING && !(prev in operators) && !(nxt in operators))\r\n                                target.push(new Token(MULT, Token.OPERATOR, col));\r\n                        }\r\n                        //Possible source of bug. Review\r\n                        /*\r\n                         //space can mean multiplication so add the symbol if the is encountered\r\n                         if(/\\d+|\\d+\\.?\\d*e[\\+\\-]*\\d+/i.test(f)) {\r\n                         var next = e.charAt(col+1);\r\n                         var next_is_operator = next in operators;\r\n                         var ns = next_space(col+1);\r\n                         var next_word = e.substring(col+1, ns);\r\n                         //the next can either be a prefix operator or no operator\r\n                         if((next_is_operator && operators[next].prefix) || !(next_is_operator || next_word in operators))\r\n                         target.push(new Token('*', Token.OPERATOR, col));\r\n                         }\r\n                         */\r\n                    }\r\n                    set_last_position(col); //mark this location\r\n                }\r\n            }\r\n            //check that all brackets were closed\r\n            if(open_brackets.length) {\r\n                var b = open_brackets.pop();\r\n                throw new ParityError('Missing closed bracket for bracket at ' + (b[1] + 1));\r\n            }\r\n            //add the last token\r\n            add_token(col);\r\n\r\n            return tokens;\r\n        };\r\n        /*\r\n         * Puts token array in Reverse Polish Notation\r\n         * @param {Token[]} tokens\r\n         * @returns {Token[]}\r\n         */\r\n        this.toRPN = function (tokens) {\r\n            var fn = tokens.type;\r\n            var l = tokens.length, i;\r\n            var output = [];\r\n            var stack = [];\r\n            var prefixes = [];\r\n            var collapse = function (target, destination) {\r\n                while(target.length)\r\n                    destination.push(target.pop());\r\n            };\r\n            //mark all the prefixes and add them to the stack\r\n            for(i = 0; i < l; i++) {\r\n                var token = tokens[i];\r\n                if(token.type !== Token.OPERATOR)\r\n                    break;\r\n                if(!token.prefix)\r\n                    throw new OperatorError('Not a prefix operator');\r\n                token.is_prefix = true;\r\n                stack.push(token);\r\n            }\r\n            //begin with remaining tokens\r\n            for(; i < l; i++) {\r\n                var e = tokens[i];\r\n                if(e.type === Token.OPERATOR) {\r\n                    var operator = e;\r\n\r\n                    //create the option for the operator being overloaded\r\n                    if(operator.overloaded) {\r\n                        var next = tokens[i + 1];\r\n                        //if it's followed by a number or variable then we assume it's not a postfix operator\r\n                        if(next && next.type === Token.VARIABLE_OR_LITERAL) {\r\n                            operator.postfix = false;\r\n                            //override the original function with the overload function\r\n                            operator.action = operator.overloadAction;\r\n                            operator.leftAssoc = operator.overloadLeftAssoc;\r\n                        }\r\n                    }\r\n\r\n                    //if the stack is not empty\r\n                    while(stack.length) {\r\n                        var last = stack[stack.length - 1];\r\n                        //if (there is an operator at the top of the operator stack with greater precedence)\r\n                        //or (the operator at the top of the operator stack has equal precedence and is left associative)) ~ wikipedia\r\n                        //the !prefixes.length makes sure that the operator on stack isn't prematurely taken fromt he stack.\r\n                        if(!(last.precedence > operator.precedence || !operator.leftAssoc && last.precedence === operator.precedence))\r\n                            break;\r\n                        output.push(stack.pop());\r\n                    }\r\n\r\n                    //change the behavior of the operator if it's a vector and we've been asked to do so\r\n                    if((fn === 'vector' || fn === 'set') && 'vectorFn' in operator)\r\n                        operator.action = operator.vectorFn;\r\n\r\n\r\n                    //if the operator is a postfix operator then we're ready to go since it belongs\r\n                    //to the preceding token. However the output cannot be empty. It must have either\r\n                    //an operator or a variable/literal\r\n                    if(operator.postfix) {\r\n                        var previous = tokens[i - 1];\r\n                        if(!previous)\r\n                            throw new OperatorError(\"Unexpected prefix operator '\" + e.value + \"'! at \" + e.column);\r\n                        else if(previous.type === Token.OPERATOR) {\r\n                            //a postfix can only be followed by a postfix\r\n                            if(!previous.postfix)\r\n                                throw new OperatorError(\"Unexpected prefix operator '\" + previous.value + \"'! at \" + previous.column);\r\n                        }\r\n                    }\r\n                    else {\r\n                        //we must be at an infix so point the operator this\r\n                        do {\r\n                            //the first one is an infix operator all others have to be prefix operators so jump to the end\r\n                            var next = tokens[i + 1]; //take a look ahead\r\n                            var next_is_operator = next ? next.type === Token.OPERATOR : false; //check if it's an operator\r\n                            if(next_is_operator) {\r\n                                //if it's not a prefix operator then it not in the right place\r\n                                if(!next.prefix) {\r\n                                    throw new OperatorError('A prefix operator was expected at ' + next.column);\r\n                                }\r\n                                //mark it as a confirmed prefix\r\n                                next.is_prefix = true;\r\n                                //add it to the prefixes\r\n                                prefixes.push(next);\r\n                                i++;\r\n                            }\r\n                        }\r\n                        while(next_is_operator)\r\n                    }\r\n\r\n                    //if it's a prefix it should be on a special stack called prefixes\r\n                    //we do this to hold on to prefixes because of left associative operators.\r\n                    //they belong to the variable/literal but if placed on either the stack\r\n                    //or output there's no way of knowing this. I might be wrong so I welcome\r\n                    //any discussion about this.\r\n\r\n                    if(operator.is_prefix) //ADD ALL EXCEPTIONS FOR ADDING TO PREFIX STACK HERE. !!!\r\n                        prefixes.push(operator);\r\n                    else\r\n                        stack.push(operator);\r\n                    //move the prefixes to the stack\r\n                    while(prefixes.length) {\r\n                        if(operator.leftAssoc || !operator.leftAssoc && prefixes[prefixes.length - 1].precedence >= operator.precedence) //revisit for commas\r\n                            stack.push(prefixes.pop());\r\n                        else\r\n                            break;\r\n                    }\r\n                }\r\n                else if(e.type === Token.VARIABLE_OR_LITERAL) {\r\n                    //move prefixes to stack at beginning of scope\r\n                    if(output.length === 0)\r\n                        collapse(prefixes, stack);\r\n                    //done with token\r\n                    output.push(e);\r\n                    var last_on_stack = stack[stack.length - 1];\r\n                    //then move all the prefixes to the output\r\n                    if(!last_on_stack || !last_on_stack.leftAssoc)\r\n                        collapse(prefixes, output);\r\n                }\r\n                else if(e.type === Token.FUNCTION) {\r\n                    stack.push(e);\r\n                }\r\n                else if(e.type === Token.UNIT) {\r\n                    //if it's a unit it belongs on the stack since it's tied to the previous token\r\n                    output.push(e);\r\n                }\r\n                //if it's an additonal scope then put that into RPN form\r\n                if(Array.isArray(e)) {\r\n                    output.push(this.toRPN(e));\r\n                    if(e.type)\r\n                        output.push(new Token(e.type, Token.FUNCTION, e.column)); //since it's hidden it needs no column\r\n\r\n                }\r\n            }\r\n            //collapse the remainder of the stack and prefixes to output\r\n            collapse(stack, output);\r\n            collapse(prefixes, output);\r\n\r\n            return output;\r\n        };\r\n        /*\r\n         * Parses the tokens\r\n         * @param {Tokens[]} rpn\r\n         * @param {object} substitutions\r\n         * @returns {Symbol}\r\n         */\r\n        this.parseRPN = function (rpn, substitutions) {\r\n            try {\r\n                //default substitutions\r\n                substitutions = substitutions || {};\r\n                //prepare the substitutions.\r\n                //we first parse them out as-is\r\n                for(var x in substitutions)\r\n                    substitutions[x] = _.parse(substitutions[x], {});\r\n\r\n                //Although technically constants,\r\n                //pi and e are only available when evaluating the expression so add to the subs.\r\n                //Doing this avoids rounding errors\r\n                //link e and pi\r\n                if(Settings.PARSE2NUMBER) {\r\n                    //use the value provided if the individual for some strange reason prefers this.\r\n                    //one reason could be to sub e but not pi or vice versa\r\n                    if(!('e' in substitutions))\r\n                        substitutions.e = new Symbol(Settings.E);\r\n                    if((!('pi' in substitutions)))\r\n                        substitutions.pi = new Symbol(Settings.PI);\r\n                }\r\n\r\n                var Q = [];\r\n                for(var i = 0, l = rpn.length; i < l; i++) {\r\n                    var e = rpn[i];\r\n\r\n                    //Arrays indicate a new scope so parse that out\r\n                    if(Array.isArray(e)) {\r\n                        e = this.parseRPN(e, substitutions);\r\n                    }\r\n\r\n                    if(e) {\r\n                        if(e.type === Token.OPERATOR) {\r\n                            if(e.is_prefix || e.postfix)\r\n                                //resolve the operation assocated with the prefix\r\n                                Q.push(e.operation(Q.pop()));\r\n                            else {\r\n                                var b = Q.pop();\r\n                                var a = Q.pop();\r\n                                //Throw an error if the RH value is empty. This cannot be a postfix since we already checked\r\n                                if(typeof a === 'undefined')\r\n                                    throw new OperatorError(e + ' is not a valid postfix operator at ' + e.column);\r\n\r\n                                var is_comma = e.action === 'comma';\r\n                                //convert Sets to Vectors on all operations at this point. Sets are only recognized functions or individually\r\n                                if(a instanceof Set && !is_comma)\r\n                                    a = Vector.fromSet(a);\r\n\r\n                                if(b instanceof Set && !is_comma)\r\n                                    b = Vector.fromSet(b);\r\n\r\n                                //call all the pre-operators\r\n                                this.callPeekers('pre_operator', a, b, e);\r\n\r\n                                var ans = _[e.action](a, b);\r\n\r\n                                //call all the pre-operators\r\n                                this.callPeekers('post_operator', ans, a, b, e);\r\n\r\n                                Q.push(ans);\r\n                            }\r\n                        }\r\n                        else if(e.type === Token.FUNCTION) {\r\n                            var args = Q.pop();\r\n                            var parent = args.parent; //make a note of the parent\r\n                            if(!(args instanceof Collection))\r\n                                args = Collection.create(args);\r\n                            //the return value may be a vector. If it is then we check\r\n                            //Q to see if there's another vector on the stack. If it is then\r\n                            //we check if has elements. If it does then we know that we're dealing\r\n                            //with an \"getter\" object and return the requested values\r\n\r\n                            //call the function. This is the _.callfunction method in nerdamer\r\n                            //call the function. This is the _.callfunction method in nerdamer\r\n                            var fn_name = e.value;\r\n                            var fn_args = args.getItems();\r\n\r\n                            //call the pre-function peekers\r\n                            this.callPeekers('pre_function', fn_name, fn_args);\r\n\r\n                            var ret = _.callfunction(fn_name, fn_args);\r\n\r\n                            //call the post-function peekers\r\n                            this.callPeekers('post_function', ret, fn_name, fn_args);\r\n\r\n                            var last = Q[Q.length - 1];\r\n                            var next = rpn[i + 1];\r\n                            var next_is_comma = next && next.type === Token.OPERATOR && next.value === ',';\r\n\r\n                            if(!next_is_comma && ret instanceof Vector && last && last.elements && !(last instanceof Collection)) {\r\n                                //remove the item from the queue\r\n                                var item = Q.pop();\r\n\r\n                                var getter = ret.elements[0];\r\n                                //check if it's symbolic. If so put it back and add the item to the stack\r\n                                if(!getter.isConstant()) {\r\n                                    item.getter = getter;\r\n                                    Q.push(item);\r\n                                    Q.push(ret);\r\n                                }\r\n                                else if(getter instanceof Slice) {\r\n                                    //if it's a Slice return the slice\r\n                                    Q.push(Vector.fromArray(item.elements.slice(getter.start, getter.end)));\r\n                                }\r\n                                else {\r\n                                    var index = Number(getter);\r\n                                    var il = item.elements.length;\r\n                                    //support for negative indices\r\n                                    if(index < 0)\r\n                                        index = il + index;\r\n                                    //it it's still out of bounds\r\n                                    if(index < 0 || index >= il) //index should no longer be negative since it's been reset above\r\n                                        //range error\r\n                                        throw new OutOfRangeError('Index out of range ' + (e.column + 1));\r\n\r\n                                    var element = item.elements[index];\r\n                                    //cyclic but we need to mark this for future reference\r\n                                    item.getter = index;\r\n                                    element.parent = item;\r\n\r\n                                    Q.push(element);\r\n                                }\r\n                            }\r\n                            else {\r\n                                //extend the parent reference\r\n                                if(parent)\r\n                                    ret.parent = parent;\r\n                                Q.push(ret);\r\n                            }\r\n\r\n                        }\r\n                        else {\r\n                            var subbed;\r\n                            var v = e.value;\r\n\r\n                            if(v in Settings.ALIASES)\r\n                                e = _.parse(Settings.ALIASES[e]);\r\n                            //wrap it in a symbol if need be\r\n                            else if(e.type === Token.VARIABLE_OR_LITERAL)\r\n                                e = new Symbol(v);\r\n                            else if(e.type === Token.UNIT) {\r\n                                e = new Symbol(v);\r\n                                e.isUnit = true;\r\n                            }\r\n\r\n                            //make substitutions\r\n                            //Always constants first. This avoids the being overridden\r\n                            if(v in _.CONSTANTS) {\r\n                                subbed = e;\r\n                                e = new Symbol(_.CONSTANTS[v]);\r\n                            }\r\n                            //next substitutions. This allows declared variable to be overridden\r\n                            //check if the values match to avoid erasing the multiplier.\r\n                            //Example:/e = 3*a. substutiting a for a will wipe out the multiplier.\r\n                            else if(v in substitutions && v !== substitutions[v].toString()) {\r\n                                subbed = e;\r\n                                e = substitutions[v].clone();\r\n                            }\r\n                            //next declare variables\r\n                            else if(v in VARS) {\r\n                                subbed = e;\r\n                                e = VARS[v].clone();\r\n                            }\r\n                            //make notation of what it was before\r\n                            if(subbed)\r\n                                e.subbed = subbed;\r\n\r\n                            Q.push(e);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                var retval = Q[0];\r\n\r\n                if(['undefined', 'string', 'number'].indexOf(typeof retval) !== -1) {\r\n                    throw new UnexpectedTokenError('Unexpected token!');\r\n                }\r\n\r\n                return retval;\r\n            }\r\n            catch(error) {\r\n                var rethrowErrors = [OutOfFunctionDomainError];\r\n                // Rethrow certain errors in the same class to preserve them\r\n                rethrowErrors.forEach(function (E) {\r\n                    if(error instanceof E) {\r\n                        throw new E(error.message + ': ' + e.column);\r\n                    }\r\n                });\r\n\r\n                throw new ParseError(error.message + ': ' + e.column);\r\n            }\r\n        };\r\n        /**\r\n         * This is the method that triggers the parsing of the string. It generates a parse tree but processes\r\n         * it right away. The operator functions are called when their respective operators are reached. For instance\r\n         * + with cause this.add to be called with the left and right hand values. It works by walking along each\r\n         * character of the string and placing the operators on the stack and values on the output. When an operator\r\n         * having a lower order than the last is reached then the stack is processed from the last operator on the\r\n         * stack.\r\n         * @param {String} token\r\n         */\r\n\r\n        function Node(token) {\r\n            this.type = token.type;\r\n            this.value = token.value;\r\n            //the incoming token may already be a Node type\r\n            this.left = token.left;\r\n            this.right = token.right;\r\n        }\r\n\r\n        Node.prototype.toString = function () {\r\n            var left = this.left ? this.left.toString() + '---' : '';\r\n            var right = this.right ? '---' + this.right.toString() : '';\r\n            return left + '(' + this.value + ')' + right;\r\n        };\r\n\r\n        Node.prototype.toHTML = function (depth, indent) {\r\n            depth = depth || 0;\r\n            indent = typeof indent === 'undefined' ? 4 : indent;\r\n            var tab = function (n) {\r\n                return ' '.repeat(indent * n);\r\n            };\r\n            var html = '';\r\n            var left = this.left ? tab(depth + 1) + '<li>\\n' + this.left.toHTML(depth + 2, indent) + tab(depth + 1) + '</li> \\n' : '';\r\n            var right = this.right ? tab(depth + 1) + '<li>\\n' + this.right.toHTML(depth + 2, indent) + tab(depth + 1) + '</li>\\n' : '';\r\n            var html = tab(depth) + '<div class=\"' + this.type.toLowerCase() + '\"><span>' + this.value + '</span></div>' + tab(depth) + '\\n';\r\n            if(left || right) {\r\n                html += tab(depth) + '<ul>\\n' + left + right + tab(depth) + '</ul>\\n';\r\n            }\r\n            html += '';\r\n            return html;\r\n        };\r\n\r\n        this.tree = function (tokens) {\r\n            var Q = [];\r\n            for(var i = 0; i < tokens.length; i++) {\r\n                var e = tokens[i];\r\n                //Arrays indicate a new scope so parse that out\r\n                if(Array.isArray(e)) {\r\n                    e = this.tree(e);\r\n                    //if it's a comma then it's just arguments\r\n                    Q.push(e);\r\n                    continue;\r\n                }\r\n                if(e.type === Token.OPERATOR) {\r\n                    if(e.is_prefix || e.postfix) {\r\n                        //prefixes go to the left, postfix to the right\r\n                        var location = e.is_prefix ? 'left' : 'right';\r\n                        var last = Q.pop();\r\n                        e = new Node(e);\r\n                        e[location] = last;\r\n                        Q.push(e);\r\n                    }\r\n                    else {\r\n                        e = new Node(e);\r\n                        e.right = Q.pop();\r\n                        e.left = Q.pop();\r\n                        Q.push(e);\r\n                    }\r\n                }\r\n                else if(e.type === Token.FUNCTION) {\r\n                    e = new Node(e);\r\n                    var args = Q.pop();\r\n                    e.right = args;\r\n                    if(e.value === 'object') {\r\n                        //check if Q has a value\r\n                        var last = Q[Q.length - 1];\r\n                        if(last) {\r\n                            while(last.right) {\r\n                                last = last.right;\r\n                            }\r\n                            last.right = e;\r\n                            continue;\r\n                        }\r\n                    }\r\n\r\n                    Q.push(e);\r\n                }\r\n                else {\r\n                    Q.push(new Node(e));\r\n                }\r\n            }\r\n\r\n            return Q[0];\r\n        };\r\n        this.parse = function (e, substitutions) {\r\n            e = prepare_expression(e);\r\n            substitutions = substitutions || {};\r\n            //three passes but easier to debug\r\n            var tokens = this.tokenize(e);\r\n            var rpn = this.toRPN(tokens);\r\n            return this.parseRPN(rpn, substitutions);\r\n        };\r\n        /**\r\n         * TODO: Switch to Parser.tokenize for this method\r\n         * Reads a string into an array of Symbols and operators\r\n         * @param {String} expression_string\r\n         * @returns {Array}\r\n         */\r\n        this.toObject = function (expression_string) {\r\n            var objectify = function (tokens) {\r\n                var output = [];\r\n                for(var i = 0, l = tokens.length; i < l; i++) {\r\n                    var token = tokens[i];\r\n                    var v = token.value;\r\n                    if(token.type === Token.VARIABLE_OR_LITERAL) {\r\n                        output.push(new Symbol(v));\r\n                    }\r\n                    else if(token.type === Token.FUNCTION) {\r\n                        //jump ahead since the next object are the arguments\r\n                        i++;\r\n                        //create a symbolic function and stick it on output\r\n                        var f = _.symfunction(v, objectify(tokens[i]));\r\n                        f.isConversion = true;\r\n                        output.push(f);\r\n                    }\r\n                    else if(token.type === Token.OPERATOR) {\r\n                        output.push(v);\r\n                    }\r\n                    else {\r\n                        output.push(objectify(token));\r\n                    }\r\n                }\r\n\r\n                return output;\r\n            };\r\n            return objectify(_.tokenize(expression_string));\r\n        };\r\n\r\n        // A helper method for toTeX\r\n        var chunkAtCommas = function (arr) {\r\n            var j, k = 0, chunks = [[]];\r\n            for(var j = 0, l = arr.length; j < l; j++) {\r\n                if(arr[j] === ',') {\r\n                    k++;\r\n                    chunks[k] = [];\r\n                }\r\n                else {\r\n                    chunks[k].push(arr[j]);\r\n                }\r\n            }\r\n            return chunks;\r\n        };\r\n\r\n        // Helper method for toTeX\r\n        var rem_brackets = function (str) {\r\n            return str.replace(/^\\\\left\\((.+)\\\\right\\)$/g, function (str, a) {\r\n                if(a)\r\n                    return a;\r\n                return str;\r\n            });\r\n        };\r\n\r\n        var remove_redundant_powers = function (arr) {\r\n            // The filtered array\r\n            var narr = [];\r\n\r\n            while(arr.length) {\r\n                // Remove the element from the front\r\n                var e = arr.shift();\r\n                var next = arr[0];\r\n                var next_is_array = isArray(next);\r\n                var next_is_minus = next === '-';\r\n\r\n                // Remove redundant plusses \r\n                if(e === '^') {\r\n                    if(next === '+') {\r\n                        arr.shift();\r\n                    }\r\n                    else if(next_is_array && next[0] === '+') {\r\n                        next.shift();\r\n                    }\r\n\r\n                    // Remove redundant parentheses\r\n                    if(next_is_array && next.length === 1) {\r\n                        arr.unshift(arr.shift()[0]);\r\n                    }\r\n                }\r\n\r\n                // Check if it's a negative power\r\n                if(e === '^' && (next_is_array && next[0] === '-' || next_is_minus)) {\r\n                    // If so:\r\n                    // - Remove it from the new array, place a one and a division sign in that array and put it back\r\n                    var last = narr.pop();\r\n                    // Check if it's something multiplied by\r\n                    var before = narr[narr.length - 1];\r\n                    var before_last = '1';\r\n\r\n                    if(before === '*') {\r\n                        narr.pop();\r\n                        // For simplicity we just pop it. \r\n                        before_last = narr.pop();\r\n                    }\r\n                    // Implied multiplication\r\n                    else if(isArray(before)) {\r\n                        before_last = narr.pop();\r\n                    }\r\n\r\n                    narr.push(before_last, '/', last, e);\r\n\r\n                    // Remove the negative sign from the power \r\n                    if(next_is_array) {\r\n                        next.shift();\r\n                    }\r\n                    else {\r\n                        arr.shift();\r\n                    }\r\n\r\n                    // Remove it from the array so we don't end up with redundant parentheses if we can\r\n                    if(next_is_array && next.length === 1) {\r\n                        narr.push(arr.shift()[0]);\r\n                    }\r\n                }\r\n                else {\r\n                    narr.push(e);\r\n                }\r\n            }\r\n\r\n            return narr;\r\n        };\r\n        /*\r\n         * Convert expression or object to LaTeX\r\n         * @param {String} expression_or_obj\r\n         * @param {object} opt\r\n         * @returns {String}\r\n         */\r\n        this.toTeX = function (expression_or_obj, opt) {\r\n            opt = opt || {};\r\n            // Add decimal option as per issue #579. Consider passing an object to Latex.latex as option instead of string\r\n            var decimals = opt.decimals === true ? 'decimals' : undefined;\r\n\r\n            var obj = typeof expression_or_obj === 'string' ? this.toObject(expression_or_obj) : expression_or_obj,\r\n                    TeX = [],\r\n                    cdot = typeof opt.cdot === 'undefined' ? '\\\\cdot' : opt.cdot; //set omit cdot to true by default\r\n\r\n            // Remove negative powers as per issue #570\r\n            obj = remove_redundant_powers(obj);\r\n\r\n            if(isArray(obj)) {\r\n                var nobj = [], a, b;\r\n                //first handle ^\r\n                for(var i = 0; i < obj.length; i++) {\r\n                    a = obj[i];\r\n\r\n                    if(obj[i + 1] === '^') {\r\n                        b = obj[i + 2];\r\n                        nobj.push(LaTeX.braces(this.toTeX([a])) + '^' + LaTeX.braces(this.toTeX([b])));\r\n                        i += 2;\r\n                    }\r\n                    else {\r\n                        nobj.push(a);\r\n                    }\r\n                }\r\n                obj = nobj;\r\n            }\r\n\r\n            for(var i = 0, l = obj.length; i < l; i++) {\r\n                var e = obj[i];\r\n\r\n                // Convert * to cdot\r\n                if(e === '*') {\r\n                    e = cdot;\r\n                }\r\n\r\n                if(isSymbol(e)) {\r\n                    if(e.group === FN) {\r\n                        var fname = e.fname, f;\r\n\r\n                        if(fname === SQRT) {\r\n                            f = '\\\\sqrt' + LaTeX.braces(this.toTeX(e.args));\r\n                        }\r\n                        else if(fname === ABS) {\r\n                            f = LaTeX.brackets(this.toTeX(e.args), 'abs');\r\n                        }\r\n                        else if(fname === PARENTHESIS) {\r\n                            f = LaTeX.brackets(this.toTeX(e.args), 'parens');\r\n                        }\r\n                        else if(fname === Settings.LOG10) {\r\n                            f = '\\\\' + Settings.LOG10_LATEX + '\\\\left( ' + this.toTeX(e.args) + '\\\\right)';\r\n                        }\r\n                        else if(fname === 'integrate') {\r\n                            /* Retrive [Expression, x] */\r\n                            var chunks = chunkAtCommas(e.args);\r\n                            /* Build TeX */\r\n                            var expr = LaTeX.braces(this.toTeX(chunks[0])),\r\n                                    dx = this.toTeX(chunks[1]);\r\n                            f = '\\\\int ' + expr + '\\\\, d' + dx;\r\n                        }\r\n                        else if(fname === 'defint') {\r\n                            var chunks = chunkAtCommas(e.args),\r\n                                    expr = LaTeX.braces(this.toTeX(chunks[0])),\r\n                                    dx = this.toTeX(chunks[3]),\r\n                                    lb = this.toTeX(chunks[1]),\r\n                                    ub = this.toTeX(chunks[2]);\r\n                            f = '\\\\int\\\\limits_{' + lb + '}^{' + ub + '} ' + expr + '\\\\, d' + dx;\r\n\r\n                        }\r\n                        else if(fname === 'diff') {\r\n                            var chunks = chunkAtCommas(e.args);\r\n                            var dx = '', expr = LaTeX.braces(this.toTeX(chunks[0]));\r\n                            /* Handle cases: one argument provided, we need to guess the variable, and assume n = 1 */\r\n                            if(chunks.length === 1) {\r\n                                var vars = [];\r\n                                for(j = 0; j < chunks[0].length; j++) {\r\n                                    if(chunks[0][j].group === 3) {\r\n                                        vars.push(chunks[0][j].value);\r\n                                    }\r\n                                }\r\n                                vars.sort();\r\n                                dx = vars.length > 0 ? ('\\\\frac{d}{d ' + vars[0] + '}') : '\\\\frac{d}{d x}';\r\n                            }\r\n                            /* If two arguments, we have expression and variable, we assume n = 1 */\r\n                            else if(chunks.length === 2) {\r\n                                dx = '\\\\frac{d}{d ' + chunks[1] + '}';\r\n                            }\r\n                            /* If we have more than 2 arguments, we assume we've got everything */\r\n                            else {\r\n                                dx = '\\\\frac{d^{' + chunks[2] + '}}{d ' + this.toTeX(chunks[1]) + '^{' + chunks[2] + '}}';\r\n                            }\r\n\r\n                            f = dx + '\\\\left(' + expr + '\\\\right)';\r\n\r\n                        }\r\n                        else if(fname === 'sum' || fname === 'product') {\r\n                            // Split e.args into 4 parts based on locations of , symbols.\r\n                            var argSplit = [[], [], [], []], j = 0, i;\r\n                            for(i = 0; i < e.args.length; i++) {\r\n                                if(e.args[i] === ',') {\r\n                                    j++;\r\n                                    continue;\r\n                                }\r\n                                argSplit[j].push(e.args[i]);\r\n                            }\r\n                            // Then build TeX string.\r\n                            f = (fname === 'sum' ? '\\\\sum_' : '\\\\prod_') + LaTeX.braces(this.toTeX(argSplit[1]) + ' = ' + this.toTeX(argSplit[2]));\r\n                            f += '^' + LaTeX.braces(this.toTeX(argSplit[3])) + LaTeX.braces(this.toTeX(argSplit[0]));\r\n                        }\r\n                        else if(fname === 'limit') {\r\n                            var args = chunkAtCommas(e.args).map(function (x) {\r\n                                if(Array.isArray(x))\r\n                                    return _.toTeX(x.join(''));\r\n                                return _.toTeX(String(x));\r\n                            });\r\n                            f = '\\\\lim_' + LaTeX.braces(args[1] + '\\\\to ' + args[2]) + ' ' + LaTeX.braces(args[0]);\r\n                        }\r\n                        else if(fname === FACTORIAL || fname === DOUBLEFACTORIAL) {\r\n                            f = this.toTeX(e.args) + (fname === FACTORIAL ? '!' : '!!');\r\n                        }\r\n                        else {\r\n                            f = LaTeX.latex(e, decimals);\r\n                            //f = '\\\\mathrm'+LaTeX.braces(fname.replace(/_/g, '\\\\_')) + LaTeX.brackets(this.toTeX(e.args), 'parens');\r\n                        }\r\n\r\n                        TeX.push(f);\r\n                    }\r\n                    else {\r\n                        TeX.push(LaTeX.latex(e, decimals));\r\n                    }\r\n                }\r\n                else if(isArray(e)) {\r\n                    TeX.push(LaTeX.brackets(this.toTeX(e)));\r\n                }\r\n                else {\r\n                    if(e === '/')\r\n                        TeX.push(LaTeX.frac(rem_brackets(TeX.pop()), rem_brackets(this.toTeX([obj[++i]]))));\r\n                    else\r\n                        TeX.push(e);\r\n                }\r\n            }\r\n\r\n            return TeX.join(' ');\r\n        };\r\n\r\n//Parser.functions ==============================================================\r\n        /* Although parens is not a \"real\" function it is important in some cases when the\r\n         * symbol must carry parenthesis. Once set you don't have to worry about it anymore\r\n         * as the parser will get rid of it at the first opportunity\r\n         */\r\n        function parens(symbol) {\r\n            if(Settings.PARSE2NUMBER) {\r\n                return symbol;\r\n            }\r\n            return _.symfunction('parens', [symbol]);\r\n        }\r\n\r\n        function abs(symbol) {\r\n\r\n            //|-∞| = ∞\r\n            if(symbol.isInfinity) {\r\n                return Symbol.infinity();\r\n            }\r\n            if(symbol.multiplier.lessThan(0))\r\n                symbol.multiplier.negate();\r\n\r\n            if(symbol.isImaginary()) {\r\n                var re = symbol.realpart();\r\n                var im = symbol.imagpart();\r\n                if(re.isConstant() && im.isConstant())\r\n                    return sqrt(_.add(_.pow(re, new Symbol(2)), _.pow(im, new Symbol(2))));\r\n            }\r\n            else if(isNumericSymbol(symbol) || even(symbol.power)) {\r\n                return symbol;\r\n            }\r\n\r\n            if(symbol.isComposite()) {\r\n                var ms = [];\r\n                symbol.each(function (x) {\r\n                    ms.push(x.multiplier);\r\n                });\r\n                var gcd = Math2.QGCD.apply(null, ms);\r\n                if(gcd.lessThan(0)) {\r\n                    symbol.multiplier = symbol.multiplier.multiply(new Frac(-1));\r\n                    symbol.distributeMultiplier();\r\n                }\r\n            }\r\n\r\n            //convert |n*x| to n*|x|\r\n            var m = _.parse(symbol.multiplier);\r\n            symbol.toUnitMultiplier();\r\n\r\n            return _.multiply(m, _.symfunction(ABS, [symbol]));\r\n        }\r\n        /**\r\n         * The factorial function\r\n         * @param {Symbol} symbol\r\n         * @return {Symbol}\r\n         */\r\n        function factorial(symbol) {\r\n            var retval;\r\n            if(isVector(symbol)) {\r\n                var V = new Vector();\r\n                symbol.each(function (x, i) {\r\n                    //i start at one.\r\n                    V.set(i - 1, factorial(x));\r\n                });\r\n                return V;\r\n            }\r\n            if(isMatrix(symbol)) {\r\n                var M = new Matrix();\r\n                symbol.each(function (x, i, j) {\r\n                    //i start at one.\r\n                    M.set(i, j, factorial(x));\r\n                });\r\n                return M;\r\n            }\r\n            if(Settings.PARSE2NUMBER && symbol.isConstant()) {\r\n                if(isInt(symbol)) {\r\n                    retval = Math2.bigfactorial(symbol);\r\n                }\r\n                else {\r\n                    retval = Math2.gamma(symbol.multiplier.add(new Frac(1)).toDecimal());\r\n                }\r\n\r\n                retval = bigConvert(retval);\r\n                return retval;\r\n            }\r\n            else if(symbol.isConstant()) {\r\n                var den = symbol.getDenom();\r\n                if(den.equals(2)) {\r\n                    var num = symbol.getNum();\r\n                    var a, b, c, n;\r\n\r\n                    if(!symbol.multiplier.isNegative()) {\r\n                        n = _.add(num, new Symbol(1)).multiplier.divide(new Frac(2));\r\n                        a = Math2.bigfactorial(new Frac(2).multiply(n));\r\n                        b = _.pow(new Symbol(4), new Symbol(n)).multiplier.multiply(Math2.bigfactorial(n));\r\n                    }\r\n                    else {\r\n                        n = _.subtract(num.negate(), new Symbol(1)).multiplier.divide(new Frac(2));\r\n                        a = _.pow(new Symbol(-4), new Symbol(n)).multiplier.multiply(Math2.bigfactorial(n));\r\n                        b = Math2.bigfactorial(new Frac(2).multiply(n));\r\n                    }\r\n                    c = a.divide(b);\r\n                    return _.multiply(_.parse('sqrt(pi)'), new Symbol(c));\r\n                }\r\n            }\r\n            return _.symfunction(FACTORIAL, [symbol]);\r\n        }\r\n        ;\r\n        /**\r\n         * Returns the continued fraction of a number\r\n         * @param {Symbol} symbol\r\n         * @param {Symbol} n\r\n         * @returns {Symbol}\r\n         */\r\n        function continued_fraction(symbol, n) {\r\n            var _symbol = evaluate(symbol);\r\n            if(_symbol.isConstant()) {\r\n                var cf = Math2.continuedFraction(_symbol, n);\r\n                //convert the fractions array to a new Vector\r\n                var fractions = Vector.fromArray(cf.fractions.map(function (x) {\r\n                    return new Symbol(x);\r\n                }));\r\n                return Vector.fromArray([new Symbol(cf.sign), new Symbol(cf.whole), fractions]);\r\n            }\r\n            return _.symfunction('continued_fraction', arguments);\r\n        }\r\n        /**\r\n         * Returns the error function\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function erf(symbol) {\r\n            var _symbol = evaluate(symbol);\r\n\r\n            if(_symbol.isConstant()) {\r\n                return Math2.erf(_symbol);\r\n            }\r\n            else if(_symbol.isImaginary()) {\r\n                return complex.erf(symbol);\r\n            }\r\n            return _.symfunction('erf', arguments);\r\n        }\r\n        ;\r\n        /**\r\n         * The mod function\r\n         * @param {Symbol} symbol1\r\n         * @param {Symbol} symbol2\r\n         * @returns {Symbol}\r\n         */\r\n        function mod(symbol1, symbol2) {\r\n            if(symbol1.isConstant() && symbol2.isConstant()) {\r\n                var retval = new Symbol(1);\r\n                retval.multiplier = retval.multiplier.multiply(symbol1.multiplier.mod(symbol2.multiplier));\r\n                return retval;\r\n            }\r\n            //try to see if division has remainder of zero\r\n            var r = _.divide(symbol1.clone(), symbol2.clone());\r\n            if(isInt(r))\r\n                return new Symbol(0);\r\n            return _.symfunction('mod', [symbol1, symbol2]);\r\n        }\r\n        /**\r\n         * A branghing function\r\n         * @param {Boolean} condition\r\n         * @param {Symbol} a\r\n         * @param {Symbol} b\r\n         * @returns {Symbol}\r\n         */\r\n        function IF(condition, a, b) {\r\n            if(typeof condition !== 'boolean')\r\n                if(isNumericSymbol(condition))\r\n                    condition = !!Number(condition);\r\n            if(condition)\r\n                return a;\r\n            return b;\r\n        }\r\n        /**\r\n         *\r\n         * @param {Matrix|Vector|Set|Collection} obj\r\n         * @param {Symbol} item\r\n         * @returns {Boolean}\r\n         */\r\n        function is_in(obj, item) {\r\n            if(isMatrix(obj)) {\r\n                for(var i = 0, l = obj.rows(); i < l; i++) {\r\n                    for(var j = 0, l2 = obj.cols(); j < l2; j++) {\r\n                        var element = obj.elements[i][j];\r\n                        if(element.equals(item))\r\n                            return new Symbol(1);\r\n                    }\r\n                }\r\n            }\r\n            else if(obj.elements) {\r\n                for(var i = 0, l = obj.elements.length; i < l; i++) {\r\n                    if(obj.elements[i].equals(item))\r\n                        return new Symbol(1);\r\n                }\r\n            }\r\n\r\n            return new Symbol(0);\r\n        }\r\n\r\n        /**\r\n         * A symbolic extension for sinc\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function sinc(symbol) {\r\n            if(Settings.PARSE2NUMBER) {\r\n                if(symbol.isConstant()) {\r\n                    return new Symbol(Math2.sinc(symbol));\r\n                }\r\n                return _.parse(format('sin({0})/({0})', symbol));\r\n            }\r\n            return _.symfunction('sinc', [symbol]);\r\n        }\r\n\r\n        /**\r\n         * A symbolic extension for exp. This will auto-convert all instances of exp(x) to e^x.\r\n         * Thanks @ Happypig375\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function exp(symbol) {\r\n            if(symbol.fname === Settings.LOG && symbol.isLinear()) {\r\n                return _.pow(symbol.args[0], Symbol.create(symbol.multiplier));\r\n            }\r\n            return _.parse(format('e^({0})', symbol));\r\n        }\r\n\r\n        /**\r\n         * Converts value degrees to radians\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function radians(symbol) {\r\n            return _.parse(format('({0})*pi/180', symbol));\r\n        }\r\n\r\n        /**\r\n         * Converts value from radians to degrees\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function degrees(symbol) {\r\n            return _.parse(format('({0})*180/pi', symbol));\r\n        }\r\n\r\n        function nroots(symbol) {\r\n            var a, b;\r\n            if(symbol.group === FN && symbol.fname === '') {\r\n                a = Symbol.unwrapPARENS(_.parse(symbol).toLinear());\r\n                b = _.parse(symbol.power);\r\n            }\r\n            else if(symbol.group === P) {\r\n                a = _.parse(symbol.value);\r\n                b = _.parse(symbol.power);\r\n            }\r\n\r\n            if(a && b && a.group === N && b.group === N) {\r\n                var _roots = [];\r\n                var parts = Symbol.toPolarFormArray(symbol);\r\n                var r = _.parse(a).abs().toString();\r\n                //https://en.wikipedia.org/wiki/De_Moivre%27s_formula\r\n                var x = arg(a).toString();\r\n                var n = b.multiplier.den.toString();\r\n                var p = b.multiplier.num.toString();\r\n\r\n                var formula = \"(({0})^({1})*(cos({3})+({2})*sin({3})))^({4})\";\r\n                for(var i = 0; i < n; i++) {\r\n                    var t = evaluate(_.parse(format(\"(({0})+2*pi*({1}))/({2})\", x, i, n))).multiplier.toDecimal();\r\n                    _roots.push(evaluate(_.parse(format(formula, r, n, Settings.IMAGINARY, t, p))));\r\n                }\r\n                return Vector.fromArray(_roots);\r\n            }\r\n            else if(symbol.isConstant(true)) {\r\n                var sign = symbol.sign();\r\n                var x = evaluate(symbol.abs());\r\n                var root = _.sqrt(x);\r\n\r\n                var _roots = [root.clone(), root.negate()];\r\n\r\n                if(sign < 0)\r\n                    _roots = _roots.map(function (x) {\r\n                        return _.multiply(x, Symbol.imaginary());\r\n                    });\r\n            }\r\n            else {\r\n                _roots = [_.parse(symbol)];\r\n            }\r\n\r\n            return Vector.fromArray(_roots);\r\n        }\r\n\r\n        /**\r\n         * Rationalizes a symbol\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function rationalize(symbol) {\r\n            if(symbol.isComposite()) {\r\n                var retval = new Symbol(0);\r\n                var num, den, retnum, retden, a, b, n, d;\r\n                symbol.each(function (x) {\r\n                    num = x.getNum();\r\n                    den = x.getDenom();\r\n                    retnum = retval.getNum();\r\n                    retden = retval.getDenom();\r\n                    a = _.multiply(den, retnum);\r\n                    b = _.multiply(num, retden);\r\n                    n = _.expand(_.add(a, b));\r\n                    d = _.multiply(retden, den);\r\n                    retval = _.divide(n, d);\r\n                }, true);\r\n\r\n                return retval;\r\n            }\r\n            return symbol;\r\n        }\r\n\r\n        /**\r\n         * The square root function\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function sqrt(symbol) {\r\n            if(!isSymbol(symbol)) {\r\n                symbol = _.parse(symbol);\r\n            }\r\n            \r\n            // Exit early for EX\r\n            if(symbol.group === EX) {\r\n                return _.symfunction(SQRT, [symbol]);\r\n            }\r\n\r\n            if(symbol.fname === '' && symbol.power.equals(1))\r\n                symbol = symbol.args[0];\r\n\r\n            var is_negative = symbol.multiplier.sign() < 0;\r\n\r\n            if(Settings.PARSE2NUMBER) {\r\n                if(symbol.isConstant() && !is_negative) {\r\n                    return new Symbol(bigDec.sqrt(symbol.multiplier.toDecimal()));\r\n                }\r\n                else if(symbol.isImaginary()) {\r\n                    return complex.sqrt(symbol);\r\n                }\r\n                else if(symbol.group === S) {\r\n                    return _.symfunction('sqrt', [symbol]);\r\n                }\r\n            }\r\n\r\n            var img, retval,\r\n                    isConstant = symbol.isConstant();\r\n\r\n            if(symbol.group === CB && symbol.isLinear()) {\r\n                var m = sqrt(Symbol(symbol.multiplier));\r\n                for(var s in symbol.symbols) {\r\n                    var x = symbol.symbols[s];\r\n                    m = _.multiply(m, sqrt(x));\r\n                }\r\n\r\n                retval = m;\r\n            }\r\n            //if the symbol is already sqrt then it's that symbol^(1/4) and we can unwrap it\r\n            else if(symbol.fname === SQRT) {\r\n                var s = symbol.args[0];\r\n                var ms = symbol.multiplier;\r\n                s.setPower(symbol.power.multiply(new Frac(0.25)));\r\n                retval = s;\r\n                //grab the multiplier\r\n                if(!ms.equals(1))\r\n                    retval = _.multiply(sqrt(_.parse(ms)), retval);\r\n            }\r\n            //if the symbol is a fraction then we don't keep can unwrap it. For instance\r\n            //no need to keep sqrt(x^(1/3))\r\n            else if(!symbol.power.isInteger()) {\r\n                symbol.setPower(symbol.power.multiply(new Frac(0.5)));\r\n                retval = symbol;\r\n            }\r\n            else if(symbol.multiplier < 0 && symbol.group === S) {\r\n                var a = _.parse(symbol.multiplier).negate();\r\n                var b = _.parse(symbol).toUnitMultiplier().negate();\r\n                retval = _.multiply(_.symfunction(Settings.SQRT, [b]), sqrt(a));\r\n            }\r\n            else {\r\n\r\n                //Related to issue #401. Since sqrt(a)*sqrt(b^-1) relates in issues, we'll change the form\r\n                //to sqrt(a)*sqrt(b)^1 for better simplification\r\n                //the sign of the power\r\n                var sign = symbol.power.sign();\r\n                //remove the sign\r\n                symbol.power = symbol.power.abs();\r\n\r\n                //if the symbols is imagary then we place in the imaginary part. We'll return it\r\n                //as a product\r\n                if(isConstant && symbol.multiplier.lessThan(0)) {\r\n                    img = Symbol.imaginary();\r\n                    symbol.multiplier = symbol.multiplier.abs();\r\n                }\r\n\r\n                var q = symbol.multiplier.toDecimal(),\r\n                        qa = Math.abs(q),\r\n                        t = Math.sqrt(qa);\r\n\r\n                var m;\r\n                //it's a perfect square so take the square\r\n                if(isInt(t)) {\r\n                    m = new Symbol(t);\r\n                }\r\n                else if(isInt(q)) {\r\n                    var factors = Math2.ifactor(q);\r\n                    var tw = 1;\r\n                    for(var x in factors) {\r\n                        var n = factors[x],\r\n                                nn = (n - (n % 2)); //get out the whole numbers\r\n                        if(nn) { //if there is a whole number ...\r\n                            var w = Math.pow(x, nn);\r\n                            tw *= Math.pow(x, nn / 2); //add to total wholes\r\n                            q /= w; //reduce the number by the wholes\r\n                        }\r\n                    }\r\n                    m = _.multiply(_.symfunction(SQRT, [new Symbol(q)]), new Symbol(tw));\r\n                }\r\n                else {\r\n                    //reduce the numerator and denominator using prime factorization\r\n                    var c = [new Symbol(symbol.multiplier.num), new Symbol(symbol.multiplier.den)];\r\n                    var r = [new Symbol(1), new Symbol(1)];\r\n                    var sq = [new Symbol(1), new Symbol(1)];\r\n                    for(var i = 0; i < 2; i++) {\r\n                        var n = c[i];\r\n                        //get the prime factors and loop through each.\r\n                        pfactor(n).each(function (x) {\r\n                            x = Symbol.unwrapPARENS(x);\r\n                            var b = x.clone().toLinear();\r\n                            var p = Number(x.power);\r\n                            //We'll consider it safe to use the native Number since 2^1000 is already a pretty huge number\r\n                            var rem = p % 2; //get the remainder. This will be 1 if 3 since sqrt(n^2) = n where n is positive\r\n                            var w = (p - rem) / 2; //get the whole numbers of n/2\r\n                            r[i] = _.multiply(r[i], _.pow(b, new Symbol(w)));\r\n                            sq[i] = _.multiply(sq[i], sqrt(_.pow(b, new Symbol(rem))));\r\n                        });\r\n                    }\r\n                    m = _.divide(_.multiply(r[0], sq[0]), _.multiply(r[1], sq[1]));\r\n                }\r\n\r\n\r\n                //strip the multiplier since we already took the sqrt\r\n                symbol = symbol.toUnitMultiplier(true);\r\n                //if the symbol is one just return one and not the sqrt function\r\n                if(symbol.isOne()) {\r\n                    retval = symbol;\r\n                }\r\n                else if(even(symbol.power.toString())) {\r\n                    //just raise it to the 1/2\r\n                    retval = _.pow(symbol.clone(), new Symbol(0.5));\r\n                }\r\n                else {\r\n                    retval = _.symfunction(SQRT, [symbol]);\r\n                }\r\n\r\n                //put back the sign that was removed earlier\r\n                if(sign < 0)\r\n                    retval.power.negate();\r\n\r\n                if(m)\r\n                    retval = _.multiply(m, retval);\r\n\r\n                if(img)\r\n                    retval = _.multiply(img, retval);\r\n            }\r\n\r\n            if(is_negative && Settings.PARSE2NUMBER)\r\n                return _.parse(retval);\r\n\r\n            return retval;\r\n        }\r\n\r\n        /**\r\n         * The cube root function\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function cbrt(symbol) {\r\n            if(!symbol.isConstant(true)) {\r\n                var retval;\r\n\r\n                var n = symbol.power / 3;\r\n                //take the cube root of the multplier\r\n                var m = _.pow(_.parse(symbol.multiplier), new Symbol(1 / 3));\r\n                //strip the multiplier\r\n                var sym = symbol.toUnitMultiplier();\r\n\r\n                //simplify the power\r\n                if(isInt(n)) {\r\n                    retval = _.pow(sym.toLinear(), _.parse(n));\r\n                }\r\n                else {\r\n                    if(sym.group === CB) {\r\n                        retval = new Symbol(1);\r\n                        sym.each(function (x) {\r\n                            retval = _.multiply(retval, cbrt(x));\r\n                        });\r\n                    }\r\n                    else {\r\n                        retval = _.symfunction('cbrt', [sym]);\r\n                    }\r\n                }\r\n\r\n                return _.multiply(m, retval);\r\n            }\r\n            return nthroot(symbol, new Symbol(3));\r\n        }\r\n\r\n        function scientific(symbol, sigfigs) {\r\n            //Just set the flag and keep it moving. Symbol.toString will deal with how to\r\n            //display this\r\n            symbol.scientific = sigfigs || 10;\r\n            return symbol;\r\n        }\r\n\r\n        /**\r\n         *\r\n         * @param {Symbol} num - the number being raised\r\n         * @param {Symbol} p - the exponent\r\n         * @param {type} prec - the precision wanted\r\n         * @param {bool} asbig - true if a bigDecimal is wanted\r\n         * @returns {Symbol}\r\n         */\r\n        function nthroot(num, p, prec, asbig) {\r\n            //clone p and convert to a number if possible\r\n            p = evaluate(_.parse(p));\r\n\r\n            //cannot calculate if p = 0. nthroot(0, 0) => 0^(1/0) => undefined\r\n            if(p.equals(0)) {\r\n                throw new UndefinedError('Unable to calculate nthroots of zero');\r\n            }\r\n\r\n            //Stop computation if it negative and even since we have an imaginary result\r\n            if(num < 0 && even(p))\r\n                throw new Error('Cannot calculate nthroot of negative number for even powers');\r\n\r\n            //return non numeric values unevaluated\r\n            if(!num.isConstant(true)) {\r\n                return _.symfunction('nthroot', arguments);\r\n            }\r\n\r\n            //evaluate numeric values\r\n            if(num.group !== N) {\r\n                num = evaluate(num);\r\n            }\r\n\r\n            //default is to return a big value\r\n            if(typeof asbig === 'undefined')\r\n                asbig = true;\r\n\r\n            prec = prec || 25;\r\n\r\n            var sign = num.sign();\r\n            var retval;\r\n            var ans;\r\n\r\n            if(sign < 0) {\r\n                num = abs(num); //remove the sign\r\n            }\r\n\r\n            if(isInt(num) && p.isConstant()) {\r\n\r\n                if(num < 18446744073709551616) {\r\n                    //2^64\r\n                    ans = Frac.create(Math.pow(num, 1 / p));\r\n                }\r\n                else {\r\n                    ans = Math2.nthroot(num, p);\r\n                }\r\n\r\n                var retval;\r\n                if(asbig) {\r\n                    retval = new Symbol(ans);\r\n                }\r\n                retval = new Symbol(ans.toDecimal(prec));\r\n\r\n                return _.multiply(new Symbol(sign), retval);\r\n            }\r\n        }\r\n\r\n        function pfactor(symbol) {\r\n            //Fix issue #458 | nerdamer(\"sqrt(1-(3.3333333550520926e-7)^2)\").evaluate().text()\r\n            //More Big Number issues >:(\r\n            if(symbol.greaterThan(9.999999999998891e+41) || symbol.equals(-1))\r\n                return symbol;\r\n            //Fix issue #298\r\n            if(symbol.equals(Math.PI))\r\n                return new Symbol(Math.PI);\r\n            //evaluate the symbol to merge constants\r\n            symbol = evaluate(symbol.clone());\r\n\r\n            if(symbol.isConstant()) {\r\n                var retval = new Symbol(1);\r\n                var m = symbol.toString();\r\n                if(isInt(m)) {\r\n                    var factors = Math2.ifactor(m);\r\n                    for(var factor in factors) {\r\n                        var p = factors[factor];\r\n                        retval = _.multiply(retval, _.symfunction('parens', [new Symbol(factor).setPower(new Frac(p))]));\r\n                    }\r\n                }\r\n                else {\r\n                    var n = pfactor(new Symbol(symbol.multiplier.num));\r\n                    var d = pfactor(new Symbol(symbol.multiplier.den));\r\n                    retval = _.multiply(_.symfunction('parens', [n]), _.symfunction('parens', [d]).invert());\r\n                }\r\n            }\r\n            else\r\n                retval = _.symfunction('pfactor', arguments);\r\n            return retval;\r\n        }\r\n\r\n        /**\r\n         * Get's the real part of a complex number. Return number if real\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function realpart(symbol) {\r\n            return symbol.realpart();\r\n        }\r\n\r\n        /**\r\n         * Get's the imaginary part of a complex number\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function imagpart(symbol) {\r\n            return symbol.imagpart();\r\n        }\r\n\r\n        /**\r\n         * Computes the conjugate of a complex number\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function conjugate(symbol) {\r\n            var re = symbol.realpart();\r\n            var im = symbol.imagpart();\r\n            return _.add(re, _.multiply(im.negate(), Symbol.imaginary()));\r\n        }\r\n\r\n        /**\r\n         * Returns the arugment of a complex number\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function arg(symbol) {\r\n            var re = symbol.realpart();\r\n            var im = symbol.imagpart();\r\n            if(re.isConstant() && im.isConstant())\r\n                return new Symbol(Math.atan2(im, re));\r\n            return _.symfunction('atan2', [im, re]);\r\n        }\r\n\r\n        /**\r\n         * Returns the arugment of a complex number\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function arg(symbol) {\r\n            var re = symbol.realpart();\r\n            var im = symbol.imagpart();\r\n            if(re.isConstant() && im.isConstant()) {\r\n                if(im.equals(0) && re.equals(-1)) {\r\n                    return _.parse('pi');\r\n                }\r\n                else if(im.equals(1) && re.equals(0)) {\r\n                    return _.parse('pi/2');\r\n                }\r\n                else if(im.equals(1) && re.equals(1)) {\r\n                    return _.parse('pi/4');\r\n                }\r\n                return new Symbol(Math.atan2(im, re));\r\n            }\r\n            return _.symfunction('atan2', [im, re]);\r\n        }\r\n\r\n        /**\r\n         * Returns the polarform of a complex number\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function polarform(symbol) {\r\n            var p, r, e, theta;\r\n            p = Symbol.toPolarFormArray(symbol);\r\n            theta = p[1];\r\n            r = p[0];\r\n            e = _.parse(format('e^({0}*({1}))', Settings.IMAGINARY, theta));\r\n            return _.multiply(r, e);\r\n        }\r\n\r\n        /**\r\n         * Returns the rectangular form of a complex number. Does not work for symbolic coefficients\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function rectform(symbol) {\r\n            //TODO: e^((i*pi)/4)\r\n            var original = symbol.clone();\r\n            try {\r\n                var f, p, q, s, h, d, n;\r\n                f = decompose_fn(symbol, 'e', true);\r\n                p = _.divide(f.x.power, Symbol.imaginary());\r\n                q = evaluate(trig.tan(p));\r\n                s = _.pow(f.a, new Symbol(2));\r\n                d = q.getDenom(true);\r\n                n = q.getNum();\r\n                h = Symbol.hyp(n, d);\r\n                //check\r\n                if(h.equals(f.a)) {\r\n                    return _.add(d, _.multiply(Symbol.imaginary(), n));\r\n                }\r\n                else {\r\n                    return original;\r\n                }\r\n            }\r\n            catch(e) {\r\n                return original;\r\n            }\r\n        }\r\n\r\n        function symMinMax(f, args) {\r\n            args.map(function (x) {\r\n                x.numVal = evaluate(x).multiplier;\r\n            });\r\n            var l, a, b, a_val, b_val;\r\n            while(true) {\r\n                l = args.length;\r\n                if(l < 2)\r\n                    return args[0];\r\n                a = args.pop();\r\n                b = args[l - 2];\r\n                if(f === 'min' ? a.numVal < b.numVal : a.numVal > b.numVal) {\r\n                    args.pop();\r\n                    args.push(a);\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Returns maximum of a set of numbers\r\n         * @returns {Symbol}\r\n         */\r\n        function max() {\r\n            var args = [].slice.call(arguments);\r\n            if(allSame(args))\r\n                return args[0];\r\n            if(allNumbers(args))\r\n                return new Symbol(Math.max.apply(null, args));\r\n            if(Settings.SYMBOLIC_MIN_MAX && allConstants(args))\r\n                return symMinMax('max', args);\r\n            return _.symfunction('max', args);\r\n        }\r\n\r\n        /**\r\n         * Returns minimum of a set of numbers\r\n         * @returns {Symbol}\r\n         */\r\n        function min() {\r\n            var args = [].slice.call(arguments);\r\n            if(allSame(args))\r\n                return args[0];\r\n            if(allNumbers(args))\r\n                return new Symbol(Math.min.apply(null, args));\r\n            if(Settings.SYMBOLIC_MIN_MAX && allConstants(args))\r\n                return symMinMax('min', args);\r\n            return _.symfunction('min', args);\r\n        }\r\n\r\n        /**\r\n         * Returns the sign of a number\r\n         * @param {Symbol} x\r\n         * @returns {Symbol}\r\n         */\r\n        function sign(x) {\r\n            if(x.isConstant(true))\r\n                return new Symbol(Math.sign(evaluate(x)));\r\n            return _.symfunction('sign', arguments);\r\n        }\r\n\r\n        function sort(symbol, opt) {\r\n            opt = opt ? opt.toString() : 'asc';\r\n            var getval = function (e) {\r\n                if(e.group === N)\r\n                    return e.multiplier;\r\n                if(e.group === FN) {\r\n                    if(e.fname === '')\r\n                        return getval(e.args[0]);\r\n                    return e.fname;\r\n                }\r\n                if(e.group === S)\r\n                    return e.power;\r\n\r\n                return e.value;\r\n            };\r\n            var symbols = isVector(symbol) ? symbol.elements : symbol.collectSymbols();\r\n            return new Vector(symbols.sort(function (a, b) {\r\n                var aval = getval(a),\r\n                        bval = getval(b);\r\n                if(opt === 'desc')\r\n                    return bval - aval;\r\n                return aval - bval;\r\n            }));\r\n        }\r\n\r\n        /**\r\n         * The log function\r\n         * @param {Symbol} symbol\r\n         * @param {Symbol} base\r\n         * @returns {Symbol}\r\n         */\r\n        function log(symbol, base) {\r\n\r\n            if(symbol.equals(1)) {\r\n                return new Symbol(0);\r\n            }\r\n\r\n            var retval;\r\n\r\n            if(symbol.fname === SQRT && symbol.multiplier.equals(1)) {\r\n                retval = _.divide(log(symbol.args[0]), new Symbol(2));\r\n\r\n                if(symbol.power.sign() < 0) {\r\n                    retval.negate();\r\n                }\r\n\r\n                // Exit early\r\n                return retval;\r\n            }\r\n\r\n            //log(0) is undefined so complain\r\n            if(symbol.equals(0)) {\r\n                throw new UndefinedError(Settings.LOG + '(0) is undefined!');\r\n            }\r\n\r\n            //deal with imaginary values\r\n            if(symbol.isImaginary()) {\r\n                return complex.evaluate(symbol, Settings.LOG);\r\n            }\r\n\r\n            if(symbol.isConstant() && typeof base !== 'undefined' && base.isConstant()) {\r\n                var log_sym = Math.log(symbol);\r\n                var log_base = Math.log(base);\r\n                retval = new Symbol(log_sym / log_base);\r\n            }\r\n            else if(symbol.group === EX && symbol.power.multiplier.lessThan(0) || symbol.power.toString() === '-1') {\r\n                symbol.power.negate();\r\n                //move the negative outside but keep the positive inside :)\r\n                retval = log(symbol).negate();\r\n            }\r\n            else if(symbol.value === 'e' && symbol.multiplier.equals(1)) {\r\n                var p = symbol.power;\r\n                retval = isSymbol(p) ? p : new Symbol(p);\r\n            }\r\n            else if(symbol.group === FN && symbol.fname === 'exp') {\r\n                var s = symbol.args[0];\r\n                if(symbol.multiplier.equals(1))\r\n                    retval = _.multiply(s, new Symbol(symbol.power));\r\n                else\r\n                    retval = _.symfunction(Settings.LOG, [symbol]);\r\n            }\r\n            else if(Settings.PARSE2NUMBER && isNumericSymbol(symbol)) {\r\n                // Parse for safety.\r\n                symbol = _.parse(symbol);\r\n\r\n                var img_part;\r\n                if(symbol.multiplier.lessThan(0)) {\r\n                    symbol.negate();\r\n                    img_part = _.multiply(new Symbol(Math.PI), new Symbol('i'));\r\n                }\r\n\r\n                retval = new Symbol(Math.log(symbol.multiplier.toDecimal()));\r\n\r\n                if(img_part) {\r\n                    retval = _.add(retval, img_part);\r\n                }\r\n\r\n            }\r\n            else {\r\n                var s;\r\n                if(!symbol.power.equals(1) && !symbol.contains('e')) {\r\n                    s = symbol.group === EX ? symbol.power : new Symbol(symbol.power);\r\n                    symbol.toLinear();\r\n                }\r\n                //log(a,a) = 1 since the base is allowed to be changed.\r\n                //This was pointed out by Happypig375 in issue #280\r\n                if(arguments.length > 1 && allSame(arguments)) {\r\n                    retval = new Symbol(1);\r\n                }\r\n                else {\r\n                    retval = _.symfunction(Settings.LOG, arguments);\r\n                }\r\n\r\n                if(s)\r\n                    retval = _.multiply(s, retval);\r\n            }\r\n\r\n            return retval;\r\n        }\r\n\r\n        /**\r\n         * Round a number up to s decimal places\r\n         * @param {Number} x\r\n         * @param {int} s - the number of decimal places\r\n         * @returns {undefined}\r\n         */\r\n        function round(x, s) {\r\n            var sIsConstant = s && s.isConstant() || typeof s === 'undefined';\r\n            if(x.isConstant() && sIsConstant) {\r\n                var v, e, exp, retval;\r\n                v = x;\r\n                //round the coefficient of then number but not the actual decimal value\r\n                //we know this because a negative number was passed\r\n                if(s && s.lessThan(0)) {\r\n                    s = abs(s);\r\n                    //convert the number to exponential form\r\n                    e = Number(x).toExponential().toString().split('e');\r\n                    //point v to the coefficient of then number\r\n                    v = e[0];\r\n                    //set the expontent\r\n                    exp = e[1];\r\n                }\r\n                //round the number to the requested precision\r\n                retval = new Symbol(nround(v, Number(s || 0)));\r\n                //if there's a exponent then put it back\r\n                return _.multiply(retval, _.pow(new Symbol(10), new Symbol(exp || 0)))\r\n            }\r\n\r\n\r\n            return _.symfunction('round', arguments);\r\n        }\r\n\r\n        /**\r\n         * Gets the quadrant of the trig function\r\n         * @param {Frac} m\r\n         * @returns {Int}\r\n         */\r\n        function getQuadrant(m) {\r\n            var v = m % 2, quadrant;\r\n\r\n            if(v < 0)\r\n                v = 2 + v; //put it in terms of pi\r\n\r\n            if(v >= 0 && v <= 0.5)\r\n                quadrant = 1;\r\n            else if(v > 0.5 && v <= 1)\r\n                quadrant = 2;\r\n            else if(v > 1 && v <= 1.5)\r\n                quadrant = 3;\r\n            else\r\n                quadrant = 4;\r\n            return quadrant;\r\n        }\r\n\r\n        /*\r\n         * Serves as a bridge between numbers and bigNumbers\r\n         * @param {Frac|Number} n\r\n         * @returns {Symbol}\r\n         */\r\n        function bigConvert(n) {\r\n            if(!isFinite(n)) {\r\n                var sign = Math.sign(n);\r\n                var r = new Symbol(String(Math.abs(n)));\r\n                r.multiplier = r.multiplier.multiply(new Frac(sign));\r\n                return r;\r\n            }\r\n            if(isSymbol(n))\r\n                return n;\r\n            if(typeof n === 'number') {\r\n                try {\r\n                    n = Frac.simple(n);\r\n                }\r\n                catch(e) {\r\n                    n = new Frac(n);\r\n                }\r\n            }\r\n\r\n            var symbol = new Symbol(0);\r\n            symbol.multiplier = n;\r\n            return symbol;\r\n        }\r\n        ;\r\n\r\n        function clean(symbol) {\r\n            // handle functions with numeric values\r\n            // handle denominator within denominator\r\n            // handle trig simplifications\r\n            var g = symbol.group, retval;\r\n            //Now let's get to work\r\n            if(g === CP) {\r\n                var num = symbol.getNum(),\r\n                        den = symbol.getDenom() || new Symbol(1),\r\n                        p = Number(symbol.power),\r\n                        factor = new Symbol(1);\r\n                if(Math.abs(p) === 1) {\r\n                    den.each(function (x) {\r\n                        if(x.group === CB) {\r\n                            factor = _.multiply(factor, clean(x.getDenom()));\r\n                        }\r\n                        else if(x.power.lessThan(0)) {\r\n                            factor = _.multiply(factor, clean(x.clone().toUnitMultiplier()));\r\n                        }\r\n                    });\r\n\r\n                    var new_den = new Symbol(0);\r\n                    //now divide out the factor and add to new den\r\n                    den.each(function (x) {\r\n                        new_den = _.add(_.divide(x, factor.clone()), new_den);\r\n                    });\r\n\r\n                    factor.invert(); //invert so it can be added to the top\r\n                    var new_num;\r\n                    if(num.isComposite()) {\r\n                        new_num = new Symbol(0);\r\n                        num.each(function (x) {\r\n                            new_num = _.add(_.multiply(clean(x), factor.clone()), new_num);\r\n                        });\r\n                    }\r\n                    else\r\n                        new_num = _.multiply(factor, num);\r\n\r\n                    retval = _.divide(new_num, new_den);\r\n                }\r\n            }\r\n            else if(g === CB) {\r\n                retval = new Symbol(1);\r\n                symbol.each(function (x) {\r\n                    retval = _.multiply(retval, _.clean(x));\r\n                });\r\n            }\r\n            else if(g === FN) {\r\n                if(symbol.args.length === 1 && symbol.args[0].isConstant())\r\n                    retval = block('PARSE2NUMBER', function () {\r\n                        return _.parse(symbol);\r\n                    }, true);\r\n            }\r\n\r\n            if(!retval)\r\n                retval = symbol;\r\n\r\n            return retval;\r\n        }\r\n\r\n        /**\r\n         * A wrapper for the expand function\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function expandall(symbol, opt) {\r\n            opt = opt || {\r\n                expand_denominator: true,\r\n                expand_functions: true\r\n            };\r\n            return expand(symbol, opt);\r\n        }\r\n        /**\r\n         * Expands a symbol\r\n         * @param symbol\r\n         */\r\n        // Old expand\r\n        function expand(symbol, opt) {\r\n            if(Array.isArray(symbol)) {\r\n                return symbol.map(function (x) {\r\n                    return expand(x, opt);\r\n                });\r\n            }\r\n            opt = opt || {};\r\n            //deal with parenthesis\r\n            if(symbol.group === FN && symbol.fname === '') {\r\n                var f = expand(symbol.args[0], opt);\r\n                var x = expand(_.pow(f, _.parse(symbol.power)), opt);\r\n                return _.multiply(_.parse(symbol.multiplier), x).distributeMultiplier();\r\n            }\r\n            // We can expand these groups so no need to waste time. Just return and be done.\r\n            if([N, P, S].indexOf(symbol.group) !== -1) {\r\n                return symbol; //nothing to do\r\n            }\r\n\r\n            var original = symbol.clone();\r\n\r\n            // Set up a try-catch block. If anything goes wrong then we simply return the original symbol\r\n            try {\r\n                // Store the power and multiplier\r\n                var m = symbol.multiplier.toString();\r\n                var p = Number(symbol.power);\r\n                var retval = symbol;\r\n\r\n                // Handle (a+b)^2 | (x+x^2)^2\r\n                if(symbol.isComposite() && isInt(symbol.power) && symbol.power > 0) {\r\n                    var n = p - 1;\r\n                    // Strip the expression of it's multiplier and power. We'll call it f. The power will be p and the multiplier m.\r\n                    var f = new Symbol(0);\r\n\r\n                    symbol.each(function (x) {\r\n                        f = _.add(f, expand(_.parse(x), opt));\r\n                    });\r\n\r\n                    var expanded = _.parse(f);\r\n\r\n                    for(var i = 0; i < n; i++) {\r\n                        expanded = mix(expanded, f, opt);\r\n                    }\r\n\r\n                    retval = _.multiply(_.parse(m), expanded).distributeMultiplier();\r\n                }\r\n                else if(symbol.group === FN && opt.expand_functions === true) {\r\n                    var args = [];\r\n                    // Expand function the arguments\r\n                    symbol.args.forEach(function (x) {\r\n                        args.push(expand(x, opt));\r\n                    });\r\n                    // Put back the power and multiplier\r\n                    retval = _.pow(_.symfunction(symbol.fname, args), _.parse(symbol.power));\r\n                    retval = _.multiply(retval, _.parse(symbol.multiplier));\r\n                }\r\n                else if(symbol.isComposite() && isInt(symbol.power) && symbol.power < 0 && opt.expand_denominator === true) {\r\n                    // Invert it. Expand it and then re-invert it.\r\n                    symbol = symbol.invert();\r\n                    retval = expand(symbol, opt);\r\n                    retval.invert();\r\n                }\r\n                else if(symbol.group === CB) {\r\n                    var rank = function (s) {\r\n                        switch(s.group) {\r\n                            case CP:\r\n                                return 0;\r\n                            case PL:\r\n                                return 1;\r\n                            case CB:\r\n                                return 2;\r\n                            case FN:\r\n                                return 3;\r\n                            default:\r\n                                return 4;\r\n                        }\r\n                    };\r\n                    // Consider (a+b)(c+d). The result will be (a*c+a*d)+(b*c+b*d).\r\n                    // We start by moving collecting the symbols. We want others>FN>CB>PL>CP\r\n                    var symbols = symbol.collectSymbols().sort(function (a, b) {\r\n                        return rank(b) - rank(a);\r\n                    })\r\n                            // Distribute the power to each symbol and expand\r\n                            .map(function (s) {\r\n                                var x = _.pow(s, _.parse(p));\r\n                                var e = expand(x, opt);\r\n                                return e;\r\n                            });\r\n\r\n                    var f = symbols.pop();\r\n\r\n                    // If the first symbols isn't a composite then we're done\r\n                    if(f.isComposite() && f.isLinear()) {\r\n                        symbols.forEach(function (s) {\r\n                            f = mix(f, s, opt);\r\n                        });\r\n\r\n                        // If f is of group PL or CP then we can expand some more\r\n                        if(f.isComposite()) {\r\n                            if(f.power > 1) {\r\n                                f = expand(_.pow(f, _.parse(f.power)), opt);\r\n                            }\r\n                            // Put back the multiplier\r\n                            retval = _.multiply(_.parse(m), f).distributeMultiplier();\r\n                            ;\r\n                        }\r\n                        else {\r\n                            // Everything is expanded at this point so if it's still a CB\r\n                            // then just return the symbol\r\n                            retval = f;\r\n                        }\r\n                    }\r\n                    else {\r\n                        // Just multiply back in the expanded form of each\r\n                        retval = f;\r\n                        symbols.forEach(function (s) {\r\n                            retval = _.multiply(retval, s);\r\n                        });\r\n                        // Put back the multiplier\r\n                        retval = _.multiply(retval, _.parse(m)).distributeMultiplier();\r\n                    }\r\n\r\n                    // TODO: This exists solely as a quick fix for sqrt(11)*sqrt(33) not simplifying.\r\n                    if(retval.group === CB) {\r\n                        retval = _.parse(retval);\r\n                    }\r\n                }\r\n                else {\r\n                    // Otherwise just return the expression\r\n                    retval = symbol;\r\n                }\r\n                // Final cleanup and return\r\n                return retval;\r\n            }\r\n            catch(e) {\r\n                return original;\r\n            }\r\n\r\n            return original;\r\n        }\r\n\r\n        /**\r\n         * Returns an identity matrix of nxn\r\n         * @param {Number} n\r\n         * @returns {Matrix}\r\n         */\r\n        function imatrix(n) {\r\n            return Matrix.identity(n);\r\n        }\r\n\r\n        /**\r\n         * Retrieves and item from a vector\r\n         * @param {Vector} vector\r\n         * @param {Number} index\r\n         * @returns {Vector|Symbol}\r\n         */\r\n        function vecget(vector, index) {\r\n            if(index.isConstant() && isInt(index))\r\n                return vector.elements[index];\r\n            return _.symfunction('vecget', arguments);\r\n        }\r\n\r\n        /**\r\n         * Removes duplicates from a vector\r\n         * @param {Vector} vector\r\n         * @param {Number} tolerance\r\n         * @returns {Vector}\r\n         */\r\n        function vectrim(vector, tolerance) {\r\n            tolerance = typeof tolerance === 'undefined' ? 1e-14 : tolerance;\r\n\r\n            vector = vector.clone();\r\n\r\n            tolerance = Number(tolerance);\r\n            //place algebraic solutions first\r\n            vector.elements.sort(function (a, b) {\r\n                return b.group - a.group;\r\n            });\r\n            //depending on the start point we may have duplicates so we need to clean those up a bit.\r\n            //start by creating an object with the solution and the numeric value. This way we don't destroy algebraic values\r\n            vector.elements = removeDuplicates(vector.elements, function (a, b) {\r\n                var diff = Number(_.subtract(evaluate(a), evaluate(b)).abs());\r\n                return diff <= tolerance;\r\n            });\r\n\r\n            return vector;\r\n        }\r\n\r\n        /**\r\n         * Set a value for a vector at a given index\r\n         * @param {Vector} vector\r\n         * @param {Number} index\r\n         * @param {Symbol} value\r\n         * @returns {Vector}\r\n         */\r\n        function vecset(vector, index, value) {\r\n            if(!index.isConstant)\r\n                return _.symfunction('vecset', arguments);\r\n            vector.elements[index] = value;\r\n            return vector;\r\n        }\r\n\r\n        function matget(matrix, i, j) {\r\n            if(i.isConstant() && j.isConstant())\r\n                return matrix.elements[i][j];\r\n            return _.symfunction('matget', arguments);\r\n        }\r\n\r\n        function matgetrow(matrix, i) {\r\n            if(i.isConstant())\r\n                return new Matrix(matrix.elements[i]);\r\n            return _.symfunction('matgetrow', arguments);\r\n        }\r\n\r\n        function matsetrow(matrix, i, x) {\r\n            //handle symbolics\r\n            if(!i.isConstant())\r\n                return _.symfunction('matsetrow', arguments);\r\n            if(matrix.elements[i].length !== x.elements.length)\r\n                throw new DimensionError('Matrix row must match row dimensions!');\r\n            var M = matrix.clone();\r\n            M.elements[i] = x.clone().elements;\r\n            return M;\r\n        }\r\n\r\n        function matgetcol(matrix, col_index) {\r\n            //handle symbolics\r\n            if(!col_index.isConstant())\r\n                return _.symfunction('matgetcol', arguments);\r\n            col_index = Number(col_index);\r\n            var M = Matrix.fromArray([]);\r\n            matrix.each(function (x, i, j) {\r\n                if(j === col_index) {\r\n                    M.elements.push([x.clone()]);\r\n                }\r\n            });\r\n            return M;\r\n        }\r\n\r\n        function matsetcol(matrix, j, col) {\r\n            //handle symbolics\r\n            if(!j.isConstant())\r\n                return _.symfunction('matsetcol', arguments);\r\n            j = Number(j);\r\n            if(matrix.rows() !== col.elements.length)\r\n                throw new DimensionError('Matrix columns must match number of columns!');\r\n            col.each(function (x, i) {\r\n                matrix.set(i - 1, j, x.elements[0].clone());\r\n            });\r\n            return matrix;\r\n        }\r\n\r\n\r\n        function matset(matrix, i, j, value) {\r\n            matrix.elements[i][j] = value;\r\n            return matrix;\r\n        }\r\n\r\n        //the constructor for vectors\r\n        function vector() {\r\n            return new Vector([].slice.call(arguments));\r\n        }\r\n\r\n        //the constructor for matrices\r\n        function matrix() {\r\n            return Matrix.fromArray(arguments);\r\n        }\r\n\r\n        //the constructor for sets\r\n        function set() {\r\n            return Set.fromArray(arguments);\r\n        }\r\n\r\n        function determinant(symbol) {\r\n            if(isMatrix(symbol)) {\r\n                return symbol.determinant();\r\n            }\r\n            return symbol;\r\n        }\r\n\r\n        function size(symbol) {\r\n            var retval;\r\n            if(isMatrix(symbol))\r\n                retval = [new Symbol(symbol.cols()), new Symbol(symbol.rows())];\r\n            else if(isVector(symbol) || isSet(symbol))\r\n                retval = new Symbol(symbol.elements.length);\r\n            else\r\n                err('size expects a matrix or a vector');\r\n            return retval;\r\n        }\r\n\r\n        function dot(vec1, vec2) {\r\n            if(isVector(vec1) && isVector(vec2))\r\n                return vec1.dot(vec2);\r\n            err('function dot expects 2 vectors');\r\n        }\r\n\r\n        function cross(vec1, vec2) {\r\n            if(isVector(vec1) && isVector(vec2))\r\n                return vec1.cross(vec2);\r\n            err('function cross expects 2 vectors');\r\n        }\r\n\r\n        function transpose(mat) {\r\n            if(isMatrix(mat))\r\n                return mat.transpose();\r\n            err('function transpose expects a matrix');\r\n        }\r\n\r\n        function invert(mat) {\r\n            if(isMatrix(mat))\r\n                return mat.invert();\r\n            err('invert expects a matrix');\r\n        }\r\n\r\n        //basic set functions\r\n        function union(set1, set2) {\r\n            return set1.union(set2);\r\n        }\r\n\r\n        function intersection(set1, set2) {\r\n            return set1.intersection(set2);\r\n        }\r\n\r\n        function contains(set1, e) {\r\n            return set1.contains(e);\r\n        }\r\n\r\n        function difference(set1, set2) {\r\n            return set1.difference(set2);\r\n        }\r\n\r\n        function intersects(set1, set2) {\r\n            return new Symbol(Number(set1.intersects(set2)));\r\n        }\r\n\r\n        function is_subset(set1, set2) {\r\n            return new Symbol(Number(set1.is_subset(set2)));\r\n        }\r\n\r\n        function print() {\r\n            arguments2Array(arguments).map(function (x) {\r\n                console.log(x.toString());\r\n            });\r\n        }\r\n\r\n        function testSQRT(symbol) {\r\n            //wrap the symbol in sqrt. This eliminates one more check down the line.\r\n            if(!isSymbol(symbol.power) && symbol.power.absEquals(0.5)) {\r\n                var sign = symbol.power.sign();\r\n                //don't devide the power directly. Notice the use of toString. This makes it possible\r\n                //to use a bigNumber library in the future\r\n                var retval = sqrt(symbol.group === P ? new Symbol(symbol.value) : symbol.toLinear());\r\n                //place back the sign of the power\r\n                if(sign < 0)\r\n                    retval.invert();\r\n                return retval;\r\n            }\r\n            return symbol;\r\n        }\r\n\r\n        //try to reduce a symbol by pulling its power\r\n        function testPow(symbol) {\r\n            if(symbol.group === P) {\r\n                var v = symbol.value;\r\n\r\n                var fct = primeFactors(v)[0];\r\n\r\n                //safety\r\n                if(!fct) {\r\n                    warn('Unable to compute prime factors. This should not happen. Please review and report.');\r\n                    return symbol;\r\n                }\r\n\r\n                var n = new Frac(Math.log(v) / Math.log(fct)),\r\n                        p = n.multiply(symbol.power);\r\n\r\n                //we don't want a more complex number than before\r\n                if(p.den > symbol.power.den)\r\n                    return symbol;\r\n\r\n                if(isInt(p))\r\n                    symbol = Symbol(Math.pow(fct, p));\r\n                else\r\n                    symbol = new Symbol(fct).setPower(p);\r\n            }\r\n\r\n            return symbol;\r\n        }\r\n\r\n        //Link the functions to the parse so they're available outside of the library.\r\n        //This is strictly for convenience and may be deprecated.\r\n        this.expand = expand;\r\n        this.round = round;\r\n        this.clean = clean;\r\n        this.sqrt = sqrt;\r\n        this.cbrt = cbrt;\r\n        this.abs = abs;\r\n        this.log = log;\r\n        this.rationalize = rationalize;\r\n        this.nthroot = nthroot;\r\n        this.arg = arg;\r\n        this.conjugate = conjugate;\r\n        this.imagpart = imagpart;\r\n        this.realpart = realpart;\r\n\r\n        //TODO:\r\n        //Utilize the function below instead of the linked function\r\n        this.getFunction = function (name) {\r\n            return functions[name][0];\r\n        };\r\n\r\n//Parser.methods ===============================================================\r\n        this.addPreprocessor = function (name, action, order, shift_cells) {\r\n            var names = preprocessors.names;\r\n            var actions = preprocessors.actions;\r\n            if((typeof action !== 'function')) //the person probably forgot to specify a name\r\n                throw new PreprocessorError('Incorrect parameters. Function expected!');\r\n            if(!order) {\r\n                names.push(name);\r\n                actions.push(action);\r\n            }\r\n            else {\r\n                if(shift_cells) {\r\n                    names.splice(order, 0, name);\r\n                    actions.splice(order, 0, action);\r\n                }\r\n                else {\r\n                    names[order] = name;\r\n                    actions[order] = action;\r\n                }\r\n            }\r\n        };\r\n\r\n        this.getPreprocessors = function () {\r\n            var preprocessors = {};\r\n            for(var i = 0, l = preprocessors.names.length; i < l; i++) {\r\n                var name = preprocessors.names[i];\r\n                preprocessors[name] = {\r\n                    order: i,\r\n                    action: preprocessors.actions[i]\r\n                };\r\n            }\r\n            return preprocessors;\r\n        };\r\n\r\n        this.removePreprocessor = function (name, shift_cells) {\r\n            var i = preprocessors.names.indexOf(name);\r\n            if(shift_cells) {\r\n                remove(preprocessors.names, i);\r\n                remove(preprocessors.actions, i);\r\n            }\r\n            else {\r\n                preprocessors.names[i] = undefined;\r\n                preprocessors.actions[i] = undefined;\r\n            }\r\n        };\r\n\r\n        //The loader for functions which are not part of Math2\r\n        this.mapped_function = function () {\r\n            var subs = {},\r\n                    params = this.params;\r\n\r\n            for(var i = 0; i < params.length; i++) {\r\n                subs[params[i]] = String(arguments[i]);\r\n            }\r\n\r\n            return _.parse(this.body, subs);\r\n        };\r\n        /**\r\n         * Adds two symbols\r\n         * @param {Symbol} a\r\n         * @param {Symbol} b\r\n         * @returns {Symbol}\r\n         */\r\n        this.add = function (a, b) {\r\n            var aIsSymbol = isSymbol(a),\r\n                    bIsSymbol = isSymbol(b);\r\n            //we're dealing with two symbols\r\n            if(aIsSymbol && bIsSymbol) {\r\n                //forward the adding of symbols with units to the Unit module\r\n                if(a.unit || b.unit) {\r\n                    return _.Unit.add(a, b);\r\n                }\r\n                //handle Infinity\r\n                //https://www.encyclopediaofmath.org/index.php/Infinity\r\n                if(a.isInfinity || b.isInfinity) {\r\n                    var aneg = a.multiplier.lessThan(0),\r\n                            bneg = b.multiplier.lessThan(0);\r\n\r\n                    if(a.isInfinity && b.isInfinity && aneg !== bneg) {\r\n                        throw new UndefinedError('(' + a + ')+(' + b + ') is not defined!');\r\n                    }\r\n\r\n                    var inf = Symbol.infinity();\r\n                    if(bneg)\r\n                        inf.negate();\r\n                    return inf;\r\n                }\r\n\r\n                if(a.isComposite() && a.isLinear() && b.isComposite() && b.isLinear()) {\r\n                    a.distributeMultiplier();\r\n                    b.distributeMultiplier();\r\n                    // Fix for issue #606\r\n                    if(b.length > a.length && a.group === b.group) {\r\n                        [a, b] = [b, a];\r\n                    }\r\n                }\r\n                \r\n                //no need to waste time on zeroes\r\n                if(a.multiplier.equals(0))\r\n                    return b;\r\n                if(b.multiplier.equals(0))\r\n                    return a;\r\n\r\n                if(a.isConstant() && b.isConstant() && Settings.PARSE2NUMBER) {\r\n                    var result = new Symbol(a.multiplier.add(b.multiplier).toDecimal(Settings.PRECISION));\r\n                    return result;\r\n                }\r\n\r\n                var g1 = a.group,\r\n                        g2 = b.group,\r\n                        ap = a.power.toString(),\r\n                        bp = b.power.toString();\r\n\r\n                //always keep the greater group on the left.\r\n                if(g1 < g2 || (g1 === g2 && ap > bp && bp > 0)) {\r\n                    return this.add(b, a);\r\n                }\r\n\r\n                /*note to self: Please don't forget about this dilemma ever again. In this model PL and CB goes crazy\r\n                 * because it doesn't know which one to prioritize. */\r\n                //correction to PL dilemma\r\n                if(g1 === CB && g2 === PL && a.value === b.value) {\r\n                    //swap\r\n                    var t = a;\r\n                    a = b;\r\n                    b = t;\r\n                    g1 = a.group;\r\n                    g2 = b.group;\r\n                    ap = a.power.toString();\r\n                    bp = b.power.toString();\r\n                }\r\n\r\n                var powEQ = ap === bp,\r\n                        v1 = a.value,\r\n                        v2 = b.value,\r\n                        aIsComposite = a.isComposite(),\r\n                        bIsComposite = b.isComposite(),\r\n                        h1, h2, result;\r\n\r\n                if(aIsComposite)\r\n                    h1 = text(a, 'hash');\r\n                if(bIsComposite)\r\n                    h2 = text(b, 'hash');\r\n\r\n                if(g1 === CP && g2 === CP && b.isLinear() && !a.isLinear() && h1 !== h2) {\r\n                    return this.add(b, a);\r\n                }\r\n\r\n                //PL & PL should compare hashes and not values e.g. compare x+x^2 with x+x^3 and not x with x\r\n                if(g1 === PL && g2 === PL) {\r\n                    v1 = h1;\r\n                    v2 = h2;\r\n                }\r\n\r\n                var PN = g1 === P && g2 === N,\r\n                        PNEQ = a.value === b.multiplier.toString(),\r\n                        valEQ = (v1 === v2 || h1 === h2 && h1 !== undefined || (PN && PNEQ));\r\n\r\n                //equal values, equal powers\r\n                if(valEQ && powEQ && g1 === g2) {\r\n                    //make sure to convert N to something P can work with\r\n                    if(PN)\r\n                        b = b.convert(P);//CL\r\n\r\n                    //handle PL\r\n                    if(g1 === PL && (g2 === S || g2 === P)) {\r\n                        a.distributeMultiplier();\r\n                        result = a.attach(b);\r\n                    }\r\n                    else {\r\n                        result = a;//CL\r\n                        if(a.multiplier.isOne() && b.multiplier.isOne() && g1 === CP && a.isLinear() && b.isLinear()) {\r\n                            for(var s in b.symbols) {\r\n                                var x = b.symbols[s];\r\n                                result.attach(x);\r\n                            }\r\n                        }\r\n                        else\r\n                            result.multiplier = result.multiplier.add(b.multiplier);\r\n                    }\r\n                }\r\n                //equal values uneven powers\r\n                else if(valEQ && g1 !== PL) {\r\n                    //break the tie for e.g. (x+1)+((x+1)^2+(x+1)^3)\r\n                    if(g1 === CP && g2 === PL) {\r\n                        b.insert(a, 'add');\r\n                        result = b;\r\n                    }\r\n                    else {\r\n                        result = Symbol.shell(PL).attach([a, b]);\r\n                        //update the hash\r\n                        result.value = g1 === PL ? h1 : v1;\r\n                    }\r\n                }\r\n                else if(aIsComposite && a.isLinear()) {\r\n                    var canIterate = g1 === g2,\r\n                            bothPL = g1 === PL && g2 === PL;\r\n\r\n                    //we can only iterate group PL if they values match\r\n                    if(bothPL)\r\n                        canIterate = a.value === b.value;\r\n                    //distribute the multiplier over the entire symbol\r\n                    a.distributeMultiplier();\r\n\r\n                    if(b.isComposite() && b.isLinear() && canIterate) {\r\n                        b.distributeMultiplier();\r\n                        //CL\r\n                        for(var s in b.symbols) {\r\n                            var x = b.symbols[s];\r\n                            a.attach(x);\r\n                        }\r\n                        result = a;\r\n                    }\r\n                    //handle cases like 2*(x+x^2)^2+2*(x+x^2)^3+4*(x+x^2)^2\r\n                    else if(bothPL && a.value !== h2 || g1 === PL && !valEQ) {\r\n                        result = Symbol.shell(CP).attach([a, b]);\r\n                        result.updateHash();\r\n\r\n                    }\r\n                    else {\r\n                        result = a.attach(b);\r\n                    }\r\n                }\r\n                else {\r\n                    if(g1 === FN && a.fname === SQRT && g2 !== EX && b.power.equals(0.5)) {\r\n                        var m = b.multiplier.clone();\r\n                        b = sqrt(b.toUnitMultiplier().toLinear());\r\n                        b.multiplier = m;\r\n                    }\r\n                    //fix for issue #3 and #159\r\n                    if(a.length === 2 && b.length === 2 && even(a.power) && even(b.power)) {\r\n                        result = _.add(expand(a), expand(b));\r\n                    }\r\n                    else {\r\n                        result = Symbol.shell(CP).attach([a, b]);\r\n                        result.updateHash();\r\n                    }\r\n                }\r\n\r\n                if(result.multiplier.equals(0))\r\n                    result = new Symbol(0);\r\n\r\n                //make sure to remove unnecessary wraps\r\n                if(result.length === 1) {\r\n                    var m = result.multiplier;\r\n                    result = firstObject(result.symbols);\r\n                    result.multiplier = result.multiplier.multiply(m);\r\n                }\r\n\r\n                return result;\r\n            }\r\n            else {\r\n                //keep symbols to the right\r\n                if(bIsSymbol && !aIsSymbol) {\r\n                    var t = a;\r\n                    a = b;\r\n                    b = t; //swap\r\n                    t = bIsSymbol;\r\n                    bIsSymbol = aIsSymbol;\r\n                    aIsSymbol = t;\r\n                }\r\n\r\n                var bIsMatrix = isMatrix(b);\r\n\r\n                if(aIsSymbol && bIsMatrix) {\r\n                    var M = new Matrix();\r\n                    b.eachElement(function (e, i, j) {\r\n                        M.set(i, j, _.add(a.clone(), e));\r\n                    });\r\n\r\n                    b = M\r\n                }\r\n                else {\r\n                    if(isMatrix(a) && bIsMatrix) {\r\n                        b = a.add(b);\r\n                    }\r\n                    else if(aIsSymbol && isVector(b)) {\r\n                        b.each(function (x, i) {\r\n                            i--;\r\n                            b.elements[i] = _.add(a.clone(), b.elements[i]);\r\n                        });\r\n                    }\r\n                    else {\r\n                        if(isVector(a) && isVector(b)) {\r\n                            b.each(function (x, i) {\r\n                                i--;\r\n                                b.elements[i] = _.add(a.elements[i], b.elements[i]);\r\n                            });\r\n                        }\r\n                        else if(isVector(a) && isMatrix(b)) {\r\n                            //try to convert a to a matrix\r\n                            return _.add(b, a);\r\n                        }\r\n                        else if(isMatrix(a) && isVector(b)) {\r\n                            if(b.elements.length === a.rows()) {\r\n                                var M = new Matrix(), l = a.cols();\r\n                                b.each(function (e, i) {\r\n                                    var row = [];\r\n                                    for(var j = 0; j < l; j++) {\r\n                                        row.push(_.add(a.elements[i - 1][j].clone(), e.clone()));\r\n                                    }\r\n                                    M.elements.push(row);\r\n                                });\r\n                                return M;\r\n                            }\r\n                            else\r\n                                err('Dimensions must match!');\r\n                        }\r\n                    }\r\n                }\r\n                return b;\r\n            }\r\n\r\n        };\r\n        /**\r\n         * Gets called when the parser finds the - operator. Not the prefix operator. See this.add\r\n         * @param {Symbol} a\r\n         * @param {Symbol} b\r\n         * @returns {Symbol}\r\n         */\r\n        this.subtract = function (a, b) {\r\n            var aIsSymbol = aIsSymbol = isSymbol(a),\r\n                    bIsSymbol = isSymbol(b), t;\r\n\r\n            if(aIsSymbol && bIsSymbol) {\r\n                if(a.unit || b.unit) {\r\n                    return _.Unit.subtract(a, b);\r\n                }\r\n                return this.add(a, b.negate());\r\n            }\r\n            else {\r\n                if(bIsSymbol && isVector(a)) {\r\n                    b = a.map(function (x) {\r\n                        return _.subtract(x, b.clone());\r\n                    });\r\n                }\r\n                else if(aIsSymbol && isVector(b)) {\r\n                    b = b.map(function (x) {\r\n                        return _.subtract(a.clone(), x);\r\n                    });\r\n                }\r\n                else if(isVector(a) && isVector(b)) {\r\n                    if(a.dimensions() === b.dimensions())\r\n                        b = a.subtract(b);\r\n                    else\r\n                        _.error('Unable to subtract vectors. Dimensions do not match.');\r\n                }\r\n                else if(isMatrix(a) && isVector(b)) {\r\n                    if(b.elements.length === a.rows()) {\r\n                        var M = new Matrix(), l = a.cols();\r\n                        b.each(function (e, i) {\r\n                            var row = [];\r\n                            for(var j = 0; j < l; j++) {\r\n                                row.push(_.subtract(a.elements[i - 1][j].clone(), e.clone()));\r\n                            }\r\n                            M.elements.push(row);\r\n                        });\r\n                        return M;\r\n                    }\r\n                    else\r\n                        err('Dimensions must match!');\r\n                }\r\n                else if(isVector(a) && isMatrix(b)) {\r\n                    var M = b.clone().negate();\r\n                    return _.add(M, a);\r\n                }\r\n                else if(isMatrix(a) && isMatrix(b)) {\r\n                    b = a.subtract(b);\r\n                }\r\n                else if(isMatrix(a) && bIsSymbol) {\r\n                    var M = new Matrix();\r\n                    a.each(function (x, i, j) {\r\n                        M.set(i, j, _.subtract(x, b.clone()));\r\n                    });\r\n                    b = M;\r\n                }\r\n                else if(aIsSymbol && isMatrix(b)) {\r\n                    var M = new Matrix();\r\n                    b.each(function (x, i, j) {\r\n                        M.set(i, j, _.subtract(a.clone(), x));\r\n                    });\r\n                    b = M;\r\n                }\r\n                return b;\r\n            }\r\n        };\r\n        /**\r\n         * Gets called when the parser finds the * operator. See this.add\r\n         * @param {Symbol} a\r\n         * @param {Symbol} b\r\n         * @returns {Symbol}\r\n         */\r\n        this.multiply = function (a, b) {\r\n            var aIsSymbol = isSymbol(a),\r\n                    bIsSymbol = isSymbol(b);\r\n            //we're dealing with function assignment here\r\n            if(aIsSymbol && b instanceof Collection) {\r\n                b.elements.push(a);\r\n                return b;\r\n            }\r\n            if(aIsSymbol && bIsSymbol) {\r\n                //if it has a unit then add it and return it right away.\r\n                if(b.isUnit) {\r\n                    var result = a.clone();\r\n                    a.unit = b;\r\n                    return result;\r\n                }\r\n                \r\n                //if it has units then just forward that problem to the unit module\r\n                if(a.unit || b.unit) {\r\n                    return _.Unit.multiply(a, b);\r\n                }\r\n\r\n                //handle Infinty\r\n                if(a.isInfinity || b.isInfinity) {\r\n                    if(a.equals(0) || b.equals(0))\r\n                        throw new UndefinedError(a + '*' + b + ' is undefined!');\r\n                    //x/infinity\r\n                    if(b.power.lessThan(0)) {\r\n                        if(!a.isInfinity) {\r\n                            return new Symbol(0);\r\n                        }\r\n                        else {\r\n                            throw new UndefinedError('Infinity/Infinity is not defined!');\r\n                        }\r\n                    }\r\n\r\n                    var sign = a.multiplier.multiply(b.multiplier).sign(),\r\n                            inf = Symbol.infinity();\r\n                    if(a.isConstant() || b.isConstant() || (a.isInfinity && b.isInfinity)) {\r\n                        if(sign < 0)\r\n                            inf.negate();\r\n\r\n                        return inf;\r\n                    }\r\n                }\r\n                //the quickies\r\n                if(a.isConstant() && b.isConstant() && Settings.PARSE2NUMBER) {\r\n                    var t = new bigDec(a.multiplier.toDecimal()).times(new bigDec(b.multiplier.toDecimal())).toFixed();\r\n                    var retval = new Symbol(t);\r\n                    return retval;\r\n                }\r\n\r\n                //don't waste time\r\n                if(a.isOne()) {\r\n                    return b.clone();\r\n                }\r\n                if(b.isOne()) {\r\n                    return a.clone();\r\n                }\r\n\r\n                if(a.multiplier.equals(0) || b.multiplier.equals(0))\r\n                    return new Symbol(0);\r\n\r\n                if(b.group > a.group && !(b.group === CP))\r\n                    return this.multiply(b, a);\r\n                //correction for PL/CB dilemma\r\n                if(a.group === CB && b.group === PL && a.value === b.value) {\r\n                    var t = a;\r\n                    a = b;\r\n                    b = t;//swap\r\n                }\r\n\r\n                var g1 = a.group,\r\n                        g2 = b.group,\r\n                        bnum = b.multiplier.num,\r\n                        bden = b.multiplier.den;\r\n\r\n                if(g1 === FN && a.fname === SQRT && !b.isConstant() && a.args[0].value === b.value && !a.args[0].multiplier.lessThan(0)) {\r\n                    //unwrap sqrt\r\n                    var a_pow = a.power;\r\n                    var a_multiplier = _.parse(a.multiplier);\r\n                    a = _.multiply(a_multiplier, a.args[0].clone());\r\n                    a.setPower(new Frac(0.5).multiply(a_pow));\r\n                    g1 = a.group;\r\n                }\r\n                //simplify n/sqrt(n). Being very specific\r\n                else if(g1 === FN && a.fname === SQRT && a.multiplier.equals(1) && a.power.equals(-1) && b.isConstant() && a.args[0].equals(b)) {\r\n                    a = _.symfunction(SQRT, [b.clone()]);\r\n                    b = new Symbol(1);\r\n                }\r\n                ;\r\n\r\n                var v1 = a.value,\r\n                        v2 = b.value,\r\n                        sign = new Frac(a.sign()),\r\n                        //since P is just a morphed version of N we need to see if they relate\r\n                        ONN = (g1 === P && g2 === N && b.multiplier.equals(a.value)),\r\n                        //don't multiply the multiplier of b since that's equal to the value of a\r\n                        m = ONN ? new Frac(1).multiply(a.multiplier).abs() : a.multiplier.multiply(b.multiplier).abs(),\r\n                        result = a.clone().toUnitMultiplier();\r\n                b = b.clone().toUnitMultiplier(true);\r\n\r\n                //further simplification of sqrt\r\n                if(g1 === FN && g2 === FN) {\r\n                    var u = a.args[0].clone();\r\n                    var v = b.args[0].clone();\r\n                    if(a.fname === SQRT && b.fname === SQRT && a.isLinear() && b.isLinear()) {\r\n\r\n                        var q = _.divide(u, v).invert();\r\n                        if(q.gt(1) && isInt(q)) {\r\n                            //b contains a factor a which can be moved to a\r\n                            result = _.multiply(a.args[0].clone(), sqrt(q.clone()));\r\n                            b = new Symbol(1);\r\n                        }\r\n                    }\r\n                    //simplify factorial but only if\r\n                    //1 - It's division so b will have a negative power\r\n                    //2 - We're not dealing with factorials of numbers\r\n                    else if(a.fname === FACTORIAL && b.fname === FACTORIAL && !u.isConstant() && !v.isConstant() && b.power < 0) {\r\n                        //assume that n = positive\r\n                        var d = _.subtract(u.clone(), v.clone());\r\n\r\n                        //if it's not numeric then we don't know if we can simplify so just return\r\n                        if(d.isConstant()) {\r\n\r\n                            //there will never be a case where d == 0 since this will already have\r\n                            //been handled at the beginning of this function\r\n                            t = new Symbol(1);\r\n                            if(d < 0) {\r\n                                //If d is negative then the numerator is larger so expand that\r\n                                for(var i = 0, n = Math.abs(d); i <= n; i++) {\r\n                                    var s = _.add(u.clone(), new Symbol(i));\r\n                                    t = _.multiply(t, s);\r\n                                }\r\n\r\n                                result = _.multiply(_.pow(u, new Symbol(a.power)), _.pow(t, new Symbol(b.power)));\r\n\r\n                                b = new Symbol(1);\r\n                            }\r\n                            else {\r\n                                //Otherwise the denominator is larger so expand that\r\n                                for(var i = 0, n = Math.abs(d); i <= n; i++) {\r\n                                    var s = _.add(v.clone(), new Symbol(i));\r\n                                    t = _.multiply(t, s);\r\n                                }\r\n\r\n                                result = _.multiply(_.pow(t, new Symbol(a.power)), _.pow(v, new Symbol(b.power)));\r\n\r\n                                b = new Symbol(1);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n\r\n                //if both are PL then their hashes have to match\r\n                if(v1 === v2 && g1 === PL && g1 === g2) {\r\n                    v1 = a.text('hash');\r\n                    v2 = b.text('hash');\r\n                }\r\n\r\n                //same issue with (x^2+1)^x*(x^2+1)\r\n                //EX needs an exception when multiplying because it needs to recognize\r\n                //that (x+x^2)^x has the same hash as (x+x^2). The latter is kept as x\r\n                if(g2 === EX && b.previousGroup === PL && g1 === PL) {\r\n                    v1 = text(a, 'hash', EX);\r\n                }\r\n\r\n                if((v1 === v2 || ONN) && !(g1 === PL && (g2 === S || g2 === P || g2 === FN)) && !(g1 === PL && g2 === CB)) {\r\n                    var p1 = a.power,\r\n                            p2 = b.power,\r\n                            isSymbolP1 = isSymbol(p1),\r\n                            isSymbolP2 = isSymbol(p2),\r\n                            toEX = (isSymbolP1 || isSymbolP2);\r\n                    //TODO: this needs cleaning up\r\n                    if(g1 === PL && g2 !== PL && b.previousGroup !== PL && p1.equals(1)) {\r\n                        result = new Symbol(0);\r\n                        a.each(function (x) {\r\n                            result = _.add(result, _.multiply(x, b.clone()));\r\n                        }, true);\r\n                    }\r\n                    else {\r\n                        //add the powers\r\n                        result.power = toEX ? _.add(\r\n                                !(isSymbol(p1)) ? new Symbol(p1) : p1,\r\n                                !(isSymbol(p2)) ? new Symbol(p2) : p2\r\n                                ) : (g1 === N /*don't add powers for N*/ ? p1 : p1.add(p2));\r\n\r\n                        //eliminate zero power values and convert them to numbers\r\n                        if(result.power.equals(0))\r\n                            result = result.convert(N);\r\n\r\n                        //properly convert to EX\r\n                        if(toEX)\r\n                            result.convert(EX);\r\n\r\n                        //take care of imaginaries\r\n                        if(a.imaginary && b.imaginary) {\r\n                            var isEven = even(result.power % 2);\r\n                            if(isEven) {\r\n                                result = new Symbol(1);\r\n                                m.negate();\r\n                            }\r\n                        }\r\n\r\n                        //cleanup: this causes the LaTeX generator to get confused as to how to render the symbol\r\n                        if(result.group !== EX && result.previousGroup)\r\n                            result.previousGroup = undefined;\r\n                        //the sign for b is floating around. Remember we are assuming that the odd variable will carry\r\n                        //the sign but this isn't true if they're equals symbols\r\n                        result.multiplier = result.multiplier.multiply(b.multiplier);\r\n                    }\r\n                }\r\n                else if(g1 === CB && a.isLinear()) {\r\n                    if(g2 === CB)\r\n                        b.distributeExponent();\r\n                    if(g2 === CB && b.isLinear()) {\r\n                        for(var s in b.symbols) {\r\n                            var x = b.symbols[s];\r\n                            result = result.combine(x);\r\n                        }\r\n                        result.multiplier = result.multiplier.multiply(b.multiplier);\r\n                    }\r\n                    else {\r\n                        result.combine(b);\r\n                    }\r\n                }\r\n                else {\r\n                    //the multiplier was already handled so nothing left to do\r\n                    if(g1 !== N) {\r\n                        if(g1 === CB) {\r\n                            result.distributeExponent();\r\n                            result.combine(b);\r\n                        }\r\n                        else if(!b.isOne()) {\r\n                            var bm = b.multiplier.clone();\r\n                            b.toUnitMultiplier();\r\n                            result = Symbol.shell(CB).combine([result, b]);\r\n                            //transfer the multiplier to the outside\r\n                            result.multiplier = result.multiplier.multiply(bm);\r\n                        }\r\n                    }\r\n                    else {\r\n                        result = b.clone().toUnitMultiplier();\r\n                    }\r\n                }\r\n\r\n                if(result.group === P) {\r\n                    var logV = Math.log(result.value),\r\n                            n1 = Math.log(bnum) / logV,\r\n                            n2 = Math.log(bden) / logV,\r\n                            ndiv = m.num / bnum,\r\n                            ddiv = m.den / bden;\r\n                    //we don't want to divide by zero no do we? Strange things happen.\r\n                    if(n1 !== 0 && isInt(n1) && isInt(ndiv)) {\r\n                        result.power = result.power.add(new Frac(n1));\r\n                        m.num /= bnum; //BigInt? Keep that in mind for the future.\r\n                    }\r\n                    if(n2 !== 0 && isInt(n2) && isInt(ddiv)) {\r\n                        result.power = result.power.subtract(new Frac(n2));\r\n                        m.den /= bden; //BigInt? Keep that in mind for the future.\r\n                    }\r\n                }\r\n\r\n                //unpack CB if length is only one\r\n                if(result.length === 1) {\r\n                    var t = result.multiplier;\r\n                    //transfer the multiplier\r\n                    result = firstObject(result.symbols);\r\n                    result.multiplier = result.multiplier.multiply(t);\r\n                }\r\n\r\n                //reduce square root\r\n                var ps = result.power.toString();\r\n                if(even(ps) && result.fname === SQRT) {\r\n                    //grab the sign of the symbol\r\n                    sign = sign * result.sign();\r\n                    var p = result.power;\r\n                    result = result.args[0];\r\n                    result = _.multiply(new Symbol(m), _.pow(result, new Symbol(p.divide(new Frac(2)))));\r\n                    //flip it back to the correct sign\r\n                    if(sign < 0)\r\n                        result.negate()\r\n                }\r\n                else {\r\n                    result.multiplier = result.multiplier.multiply(m).multiply(sign);\r\n                    if(result.group === CP && result.isImaginary())\r\n                        result.distributeMultiplier();\r\n                }\r\n\r\n                //back convert group P to a simpler group N if possible\r\n                if(result.group === P && isInt(result.power.toDecimal()))\r\n                    result = result.convert(N);\r\n\r\n                return result;\r\n            }\r\n            else {\r\n                //****** Matrices & Vector *****//\r\n                if(bIsSymbol && !aIsSymbol) { //keep symbols to the right\r\n                    t = a;\r\n                    a = b;\r\n                    b = t; //swap\r\n                    t = bIsSymbol;\r\n                    bIsSymbol = aIsSymbol;\r\n                    aIsSymbol = t;\r\n                }\r\n\r\n                var isMatrixB = isMatrix(b), isMatrixA = isMatrix(a);\r\n                if(aIsSymbol && isMatrixB) {\r\n                    var M = new Matrix();\r\n                    b.eachElement(function (e, i, j) {\r\n                        M.set(i, j, _.multiply(a.clone(), e));\r\n                    });\r\n\r\n                    b = M;\r\n                }\r\n                else {\r\n                    if(isMatrixA && isMatrixB) {\r\n                        b = a.multiply(b);\r\n                    }\r\n                    else if(aIsSymbol && isVector(b)) {\r\n                        b.each(function (x, i) {\r\n                            i--;\r\n                            b.elements[i] = _.multiply(a.clone(), b.elements[i]);\r\n                        });\r\n                    }\r\n                    else {\r\n                        if(isVector(a) && isVector(b)) {\r\n                            b.each(function (x, i) {\r\n                                i--;\r\n                                b.elements[i] = _.multiply(a.elements[i], b.elements[i]);\r\n                            });\r\n                        }\r\n                        else if(isVector(a) && isMatrix(b)) {\r\n                            //try to convert a to a matrix\r\n                            return this.multiply(b, a);\r\n                        }\r\n                        else if(isMatrix(a) && isVector(b)) {\r\n                            if(b.elements.length === a.rows()) {\r\n                                var M = new Matrix(), l = a.cols();\r\n                                b.each(function (e, i) {\r\n                                    var row = [];\r\n                                    for(var j = 0; j < l; j++) {\r\n                                        row.push(_.multiply(a.elements[i - 1][j].clone(), e.clone()));\r\n                                    }\r\n                                    M.elements.push(row);\r\n                                });\r\n                                return M;\r\n                            }\r\n                            else\r\n                                err('Dimensions must match!');\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return b;\r\n            }\r\n        };\r\n        /**\r\n         * Gets called when the parser finds the / operator. See this.add\r\n         * @param {Symbol} a\r\n         * @param {Symbol} b\r\n         * @returns {Symbol}\r\n         */\r\n        this.divide = function (a, b) {\r\n            var aIsSymbol = isSymbol(a),\r\n                    bIsSymbol = isSymbol(b);\r\n\r\n            if(aIsSymbol && bIsSymbol) {\r\n                //forward to Unit division\r\n                if(a.unit || b.unit) {\r\n                    return _.Unit.divide(a, b);\r\n                }\r\n                var result;\r\n                if(b.equals(0))\r\n                    throw new DivisionByZero('Division by zero not allowed!');\r\n\r\n                if(a.isConstant() && b.isConstant()) {\r\n                    result = a.clone();\r\n                    result.multiplier = result.multiplier.divide(b.multiplier);\r\n                }\r\n                else {\r\n                    b.invert();\r\n                    result = _.multiply(a, b);\r\n                }\r\n                return result;\r\n            }\r\n            else {\r\n                //******* Vectors & Matrices *********//\r\n                var isVectorA = isVector(a), isVectorB = isVector(b);\r\n                if(aIsSymbol && isVectorB) {\r\n                    b = b.map(function (x) {\r\n                        return _.divide(a.clone(), x);\r\n                    });\r\n                }\r\n                else if(isVectorA && bIsSymbol) {\r\n                    b = a.map(function (x) {\r\n                        return _.divide(x, b.clone());\r\n                    });\r\n                }\r\n                else if(isVectorA && isVectorB) {\r\n                    if(a.dimensions() === b.dimensions()) {\r\n                        b = b.map(function (x, i) {\r\n                            return _.divide(a.elements[--i], x);\r\n                        });\r\n                    }\r\n                    else\r\n                        _.error('Cannot divide vectors. Dimensions do not match!');\r\n                }\r\n                else {\r\n                    var isMatrixA = isMatrix(a), isMatrixB = isMatrix(b);\r\n                    if(isMatrixA && bIsSymbol) {\r\n                        var M = new Matrix();\r\n                        a.eachElement(function (x, i, j) {\r\n                            M.set(i, j, _.divide(x, b.clone()));\r\n                        });\r\n                        b = M;\r\n                    }\r\n                    else if(aIsSymbol && isMatrixB) {\r\n                        var M = new Matrix();\r\n                        b.eachElement(function (x, i, j) {\r\n                            M.set(i, j, _.divide(a.clone(), x));\r\n                        });\r\n                        b = M;\r\n                    }\r\n                    else if(isMatrixA && isMatrixB) {\r\n                        var M = new Matrix();\r\n                        if(a.rows() === b.rows() && a.cols() === b.cols()) {\r\n                            a.eachElement(function (x, i, j) {\r\n                                M.set(i, j, _.divide(x, b.elements[i][j]));\r\n                            });\r\n                            b = M;\r\n                        }\r\n                        else {\r\n                            _.error('Dimensions do not match!');\r\n                        }\r\n                    }\r\n                    else if(isMatrixA && isVectorB) {\r\n                        if(a.cols() === b.dimensions()) {\r\n                            var M = new Matrix();\r\n                            a.eachElement(function (x, i, j) {\r\n                                M.set(i, j, _.divide(x, b.elements[i].clone()));\r\n                            });\r\n                            b = M;\r\n                        }\r\n                        else {\r\n                            _.error('Unable to divide matrix by vector.');\r\n                        }\r\n                    }\r\n                }\r\n                return b;\r\n            }\r\n        };\r\n        /**\r\n         * Gets called when the parser finds the ^ operator. See this.add\r\n         * @param {Symbol} a\r\n         * @param {Symbol} b\r\n         * @returns {Symbol}\r\n         */\r\n        this.pow = function (a, b) {\r\n            var aIsSymbol = isSymbol(a),\r\n                    bIsSymbol = isSymbol(b);\r\n            if(aIsSymbol && bIsSymbol) {\r\n                //it has units then it's the Unit module's problem\r\n                if(a.unit || b.unit) {\r\n                    return _.Unit.pow(a, b);\r\n                }\r\n                \r\n                // Handle abs\r\n                if(a.group === FN && a.fname === ABS && even(b)) {\r\n                    var m = a.multiplier.clone();\r\n                    var raised = _.pow(a.args[0], b);\r\n                    raised.multiplier = m;\r\n                    return raised;\r\n                }\r\n                \r\n                // Handle infinity\r\n                if(a.isInfinity || b.isInfinity) {\r\n                    if(a.isInfinity && b.isInfinity)\r\n                        throw new UndefinedError('(' + a + ')^(' + b + ') is undefined!');\r\n\r\n                    if(a.isConstant() && b.isInfinity) {\r\n                        if(a.equals(0)) {\r\n                            if(b.lessThan(0))\r\n                                throw new UndefinedError('0^Infinity is undefined!');\r\n                            return new Symbol(0);\r\n                        }\r\n                        if(a.equals(1))\r\n                            throw new UndefinedError('1^' + b.toString() + ' is undefined!');\r\n                        //a^-oo\r\n                        if(b.lessThan(0))\r\n                            return new Symbol(0);\r\n                        //a^oo\r\n                        if(!a.lessThan(0))\r\n                            return Symbol.infinity();\r\n                    }\r\n\r\n                    if(a.isInfinity && b.isConstant()) {\r\n                        if(b.equals(0))\r\n                            throw new UndefinedError(a + '^0 is undefined!');\r\n                        if(b.lessThan(0))\r\n                            return new Symbol(0);\r\n                        return _.multiply(Symbol.infinity(), _.pow(new Symbol(a.sign()), b.clone()));\r\n                    }\r\n                }\r\n\r\n                var aIsZero = a.equals(0);\r\n                var bIsZero = b.equals(0);\r\n                if(aIsZero && bIsZero)\r\n                    throw new UndefinedError('0^0 is undefined!');\r\n\r\n                // Return 0 right away if possible\r\n                if(aIsZero && b.isConstant() && b.multiplier.greaterThan(0))\r\n                    return new Symbol(0);\r\n\r\n                if(bIsZero)\r\n                    return new Symbol(1);\r\n\r\n                var bIsConstant = b.isConstant(),\r\n                        aIsConstant = a.isConstant(),\r\n                        bIsInt = b.isInteger(),\r\n                        m = a.multiplier,\r\n                        result = a.clone();\r\n\r\n                // 0^0, 1/0, etc. Complain.\r\n                if(aIsConstant && bIsConstant && a.equals(0) && b.lessThan(0))\r\n                    throw new UndefinedError('Division by zero is not allowed!');\r\n\r\n                // Compute imaginary numbers right away\r\n                if(Settings.PARSE2NUMBER && aIsConstant && bIsConstant && a.sign() < 0 && evenFraction(b)) {\r\n                    var k, re, im;\r\n                    k = Math.PI * b;\r\n                    re = new Symbol(Math.cos(k));\r\n                    im = _.multiply(Symbol.imaginary(), new Symbol(Math.sin(k)));\r\n                    return _.add(re, im);\r\n                }\r\n\r\n                // Imaginary number under negative nthroot or to the n\r\n                if(Settings.PARSE2NUMBER && a.isImaginary() && bIsConstant && isInt(b) && !b.lessThan(0)) {\r\n                    var re, im, r, theta, nre, nim, phi;\r\n                    re = a.realpart();\r\n                    im = a.imagpart();\r\n                    if(re.isConstant('all') && im.isConstant('all')) {\r\n                        phi = Settings.USE_BIG ? Symbol(bigDec.atan2(i.multiplier.toDecimal(), r.multiplier.toDecimal()).times(b.toString())) : Math.atan2(im, re) * b;\r\n                        theta = new Symbol(phi);\r\n                        r = _.pow(Symbol.hyp(re, im), b);\r\n                        nre = _.multiply(r.clone(), _.trig.cos(theta.clone()));\r\n                        nim = _.multiply(r, _.trig.sin(theta));\r\n                        return _.add(nre, _.multiply(Symbol.imaginary(), nim));\r\n                    }\r\n                }\r\n\r\n                // Take care of the symbolic part\r\n                result.toUnitMultiplier();\r\n                //simpifly sqrt\r\n                if(result.group === FN && result.fname === SQRT && !bIsConstant) {\r\n                    var s = result.args[0];\r\n                    s.multiplyPower(new Symbol(0.5));\r\n                    s.multiplier.multiply(result.multiplier);\r\n                    s.multiplyPower(b);\r\n                    result = s;\r\n                }\r\n                else {\r\n                    var sign = m.sign();\r\n                    //handle cases such as (-a^3)^(1/4)\r\n                    if(evenFraction(b) && sign < 0) {\r\n                        // Swaperoo\r\n                        // First put the sign back on the symbol\r\n                        result.negate();\r\n                        // Wrap it in brackets\r\n                        result = _.symfunction(PARENTHESIS, [result]);\r\n                        // Move the sign back the exterior and let nerdamer handle the rest\r\n                        result.negate();\r\n                    }\r\n\r\n                    result.multiplyPower(b);\r\n                }\r\n\r\n                if(aIsConstant && bIsConstant && Settings.PARSE2NUMBER) {\r\n                    var c;\r\n                    //remove the sign\r\n                    if(sign < 0) {\r\n                        a.negate();\r\n                        if(b.multiplier.den.equals(2))\r\n                            //we know that the numerator has to be odd and therefore it's i\r\n                            c = new Symbol(Settings.IMAGINARY);\r\n                        else if(isInt(b.multiplier)) {\r\n                            if(even(b.multiplier))\r\n                                c = new Symbol(1);\r\n                            else\r\n                                c = new Symbol(-1);\r\n                        }\r\n                        else if(!even(b.multiplier.den)) {\r\n                            c = new Symbol(Math.pow(sign, b.multiplier.num));\r\n                        }\r\n                        else {\r\n                            c = _.pow(_.symfunction(PARENTHESIS, [new Symbol(sign)]), b.clone());\r\n                        }\r\n                    }\r\n\r\n                    result = new Symbol(Math.pow(a.multiplier.toDecimal(), b.multiplier.toDecimal()));\r\n\r\n                    //result = new Symbol(Math2.bigpow(a.multiplier, b.multiplier));\r\n                    //put the back sign\r\n                    if(c)\r\n                        result = _.multiply(result, c);\r\n                }\r\n                else if(bIsInt && !m.equals(1)) {\r\n                    var abs_b = b.abs();\r\n                    // Provide fall back to JS until big number implementation is improved\r\n                    if(abs_b.gt(Settings.MAX_EXP)) {\r\n                        if(b.sign() < 0)\r\n                            return new Symbol(0);\r\n                        return Symbol.infinity();\r\n                    }\r\n                    else {\r\n                        var p = b.multiplier.toDecimal();\r\n                        var sgn = Math.sign(p);\r\n                        p = Math.abs(p);\r\n                        var multiplier = new Frac(1);\r\n                        multiplier.num = m.num.pow(p);\r\n                        multiplier.den = m.den.pow(p);\r\n                        if(sgn < 0)\r\n                            multiplier.invert();\r\n                        //multiplying is justified since after mulltiplyPower if it was of group P it will now be of group N\r\n                        result.multiplier = result.multiplier.multiply(multiplier);\r\n                    }\r\n                }\r\n                else {\r\n                    var sign = a.sign();\r\n                    if(b.isConstant() && a.isConstant() && !b.multiplier.den.equals(1) && sign < 0) {\r\n                        //we know the sign is negative so if the denominator for b == 2 then it's i\r\n                        if(b.multiplier.den.equals(2)) {\r\n                            var i = new Symbol(Settings.IMAGINARY);\r\n                            a.negate();//remove the sign\r\n                            //if the power is negative then i is negative\r\n                            if(b.lessThan(0)) {\r\n                                i.negate();\r\n                                b.negate();//remove the sign from the power\r\n                            }\r\n                            //pull the power normally and put back the imaginary\r\n                            result = _.multiply(_.pow(a, b), i);\r\n                        }\r\n                        else {\r\n                            var aa = a.clone();\r\n                            aa.multiplier.negate();\r\n                            result = _.pow(_.symfunction(PARENTHESIS, [new Symbol(sign)]), b.clone());\r\n                            var _a = _.pow(new Symbol(aa.multiplier.num), b.clone());\r\n                            var _b = _.pow(new Symbol(aa.multiplier.den), b.clone());\r\n                            var r = _.divide(_a, _b);\r\n                            result = _.multiply(result, r);\r\n                        }\r\n                    }\r\n                    else if(Settings.PARSE2NUMBER && b.isImaginary()) {\r\n                        //4^(i + 2) = e^(- (2 - 4 i) π n + (2 + i) log(4))\r\n\r\n                        var re = b.realpart();\r\n                        var im = b.imagpart();\r\n                        /*\r\n                         if(b.group === CP && false) {\r\n                         var ex = _.pow(a.clone(), re);\r\n                         var xi = _.multiply(_.multiply(ex.clone(), trig.sin(im.clone())), Symbol.imaginary());\r\n                         var xa = _.multiply(trig.cos(im), ex);\r\n                         result = _.add(xi, xa);\r\n                         }\r\n                         else {\r\n                         */\r\n                        var aa = a.clone().toLinear();\r\n                        var a1 = _.pow(aa.clone(), re);\r\n                        var log_a = log(aa.clone());\r\n                        var b1 = trig.cos(_.multiply(im.clone(), log_a));\r\n                        var c1 = _.multiply(trig.sin(_.multiply(im, log(aa))), Symbol.imaginary());\r\n                        result = _.multiply(a1, _.add(b1, c1));\r\n                        result = _.expand(_.parse(result));\r\n                        /*\r\n                         }   \r\n                         */\r\n                    }\r\n                    else {\r\n                        //b is a symbol\r\n                        var neg_num = a.group === N && sign < 0,\r\n                            num = testSQRT(new Symbol(neg_num ? m.num : Math.abs(m.num)).setPower(b.clone())),\r\n                            den = testSQRT(new Symbol(m.den).setPower(b.clone()).invert());\r\n\r\n                        //eliminate imaginary if possible\r\n                        if(a.imaginary) {\r\n                            if(bIsInt) {\r\n                                var s, p, n;\r\n                                s = Math.sign(b);\r\n                                p = abs(b);\r\n                                n = p % 4;\r\n                                result = new Symbol(even(n) ? -1 : Settings.IMAGINARY);\r\n                                if(n === 0 || s < 0 && (n === 1) || s > 0 && (n === 3)) {\r\n                                    result.negate();\r\n                                }\r\n                            }\r\n                            else {\r\n                                //assume i = sqrt(-1) -> (-1)^(1/2)\r\n                                var nr = b.multiplier.multiply(Frac.quick(1, 2)),\r\n                                        //the denominator denotes the power so raise to it. It will turn positive it round\r\n                                        tn = Math.pow(-1, nr.num);\r\n                                result = even(nr.den) ? new Symbol(-1).setPower(nr, true) : new Symbol(tn);\r\n                            }\r\n                        }\r\n                        //ensure that the sign is carried by the symbol and not the multiplier\r\n                        //this enables us to check down the line if the multiplier can indeed be transferred\r\n                        if(sign < 0 && !neg_num)\r\n                            result.negate();\r\n\r\n                        //retain the absolute value\r\n                        if(bIsConstant && a.group !== EX) {\r\n                            var evenr = even(b.multiplier.den),\r\n                                    evenp = even(a.power),\r\n                                    n = result.power.toDecimal(),\r\n                                    evennp = even(n);\r\n                            if(evenr && evenp && !evennp) {\r\n                                if(n === 1)\r\n                                    result = _.symfunction(ABS, [result]);\r\n                                else if(!isInt(n)) {\r\n                                    var p = result.power;\r\n                                    result = _.symfunction(ABS, [result.toLinear()]).setPower(p);\r\n                                }\r\n                                else {\r\n                                    result = _.multiply(_.symfunction(ABS, [result.clone().toLinear()]),\r\n                                            result.clone().setPower(new Frac(n - 1)));\r\n                                }\r\n                                //quick workaround. Revisit\r\n                                if(Settings.POSITIVE_MULTIPLIERS && result.fname === ABS)\r\n                                    result = result.args[0];\r\n                            }\r\n                        }\r\n                        //multiply out sqrt\r\n                        if(b.equals(2) && result.group === CB) {\r\n                            var _result = new Symbol(1);\r\n                            result.each(function (sym) {\r\n                                _result = _.multiply(_result, _.pow(sym, b));\r\n                            });\r\n                            result = _result;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                result = testSQRT(result);\r\n\r\n                // Don't multiply until we've tested the remaining symbol\r\n                if(num && den) {\r\n                    result = _.multiply(result, testPow(_.multiply(num, den)));\r\n                }\r\n\r\n                // Reduce square root\r\n                if(result.fname === SQRT) {\r\n                    var isEX = result.group === EX;\r\n                    var t = isEX ? result.power.multiplier.toString() : result.power.toString();\r\n                    if(even(t)) {\r\n                        var pt = isEX ? _.divide(result.power, new Symbol(2)) : new Symbol(result.power.divide(new Frac(2))),\r\n                                m = result.multiplier;\r\n                        result = _.pow(result.args[0], pt);\r\n                        result.multiplier = result.multiplier.multiply(m);\r\n                    }\r\n                }\r\n                // Detect Euler's identity\r\n                else if(!Settings.IGNORE_E && result.isE() && result.group === EX && result.power.contains('pi')\r\n                        && result.power.contains(Settings.IMAGINARY) && b.group === CB) {\r\n                    var theta = b.stripVar(Settings.IMAGINARY);\r\n                    result = _.add(trig.cos(theta), _.multiply(Symbol.imaginary(), trig.sin(theta)));\r\n                }\r\n\r\n                return result;\r\n            }\r\n            else {\r\n                if(isVector(a) && bIsSymbol) {\r\n                    a = a.map(function (x) {\r\n                        return _.pow(x, b.clone());\r\n                    });\r\n                }\r\n                else if(isMatrix(a) && bIsSymbol) {\r\n                    var M = new Matrix();\r\n                    a.eachElement(function (x, i, j) {\r\n                        M.set(i, j, _.pow(x, b.clone()));\r\n                    });\r\n                    a = M;\r\n                }\r\n                else if(aIsSymbol && isMatrix(b)) {\r\n                    var M = new Matrix();\r\n                    b.eachElement(function (x, i, j) {\r\n                        M.set(i, j, _.pow(a.clone(), x));\r\n                    });\r\n                    a = M;\r\n                }\r\n                return a;\r\n            }\r\n        };\r\n        // Gets called when the parser finds the , operator.\r\n        // Commas return a Collector object which is roughly an array\r\n        this.comma = function (a, b) {\r\n            if(!(a instanceof Collection))\r\n                a = Collection.create(a);\r\n            a.append(b);\r\n            return a;\r\n        };\r\n        // Link to modulus\r\n        this.mod = function (a, b) {\r\n            return mod(a, b);\r\n        };\r\n        // Used to slice elements from arrays\r\n        this.slice = function (a, b) {\r\n            return new Slice(a, b);\r\n        };\r\n        // The equality setter\r\n        this.equals = function (a, b) {\r\n            // Equality can only be set for group S so complain it's not\r\n            if(a.group !== S && !a.isLinear())\r\n                err('Cannot set equality for ' + a.toString());\r\n            VARS[a.value] = b.clone();\r\n            return b;\r\n        };\r\n        // Percent\r\n        this.percent = function (a) {\r\n            return _.divide(a, new Symbol(100));\r\n        };\r\n        // Set variable\r\n        this.assign = function (a, b) {\r\n            if(a instanceof Collection && b instanceof Collection) {\r\n                a.elements.map(function (x, i) {\r\n                    return _.assign(x, b.elements[i]);\r\n                });\r\n                return Vector.fromArray(b.elements);\r\n            }\r\n            if(a.parent) {\r\n                // It's referring to the parent instead. The current item can be discarded\r\n                var e = a.parent;\r\n                e.elements[e.getter] = b;\r\n                delete e.getter;\r\n                return e;\r\n            }\r\n\r\n            if(a.group !== S)\r\n                throw new NerdamerValueError('Cannot complete operation. Incorrect LH value for ' + a);\r\n            VARS[a.value] = b;\r\n            return b;\r\n        };\r\n        this.function_assign = function (a, b) {\r\n            var f = a.elements.pop();\r\n            return setFunction(f, a.elements, b);\r\n        };\r\n        // Function to quickly convert bools to Symbols\r\n        var bool2Symbol = function (x) {\r\n            return new Symbol(x === true ? 1 : 0);\r\n        };\r\n        //check for equality\r\n        this.eq = function (a, b) {\r\n            return bool2Symbol(a.equals(b));\r\n        };\r\n        //checks for greater than\r\n        this.gt = function (a, b) {\r\n            return bool2Symbol(a.gt(b));\r\n        };\r\n        //checks for greater than equal\r\n        this.gte = function (a, b) {\r\n            return bool2Symbol(a.gte(b));\r\n        };\r\n        //checks for less than\r\n        this.lt = function (a, b) {\r\n            return bool2Symbol(a.lt(b));\r\n        };\r\n        //checks for less than equal\r\n        this.lte = function (a, b) {\r\n            return bool2Symbol(a.lte(b));\r\n        };\r\n        // wraps the factorial\r\n        this.factorial = function (a) {\r\n            return this.symfunction(FACTORIAL, [a]);\r\n        };\r\n        // wraps the double factorial\r\n        this.dfactorial = function (a) {\r\n            return this.symfunction(DOUBLEFACTORIAL, [a]);\r\n        };\r\n    }\r\n    ;\r\n\r\n    /* \"STATIC\" */\r\n    // converts a number to a fraction.\r\n    var Fraction = {\r\n        /**\r\n         * Converts a decimal to a fraction\r\n         * @param {number} value\r\n         * @param {object} opts\r\n         * @returns {Array} - an array containing the denominator and the numerator\r\n         */\r\n        convert: function (value, opts) {\r\n            var frac;\r\n            if(value === 0) {\r\n                frac = [0, 1];\r\n            }\r\n            else {\r\n                if(value < 1e-6 || value > 1e20) {\r\n                    var qc = this.quickConversion(Number(value));\r\n                    if(qc[1] <= 1e20) {\r\n                        var abs = Math.abs(value);\r\n                        var sign = value / abs;\r\n                        frac = this.fullConversion(abs.toFixed((qc[1] + '').length - 1));\r\n                        frac[0] = frac[0] * sign;\r\n                    }\r\n                    else {\r\n                        frac = qc;\r\n                    }\r\n                }\r\n                else {\r\n                    frac = this.fullConversion(value);\r\n                }\r\n            }\r\n            return frac;\r\n        },\r\n        /**\r\n         * If the fraction is too small or too large this gets called instead of fullConversion method\r\n         * @param {number} dec\r\n         * @returns {Array} - an array containing the denominator and the numerator\r\n         */\r\n        quickConversion: function (value) {\r\n            var stripSign = function (s) {\r\n                // Explicitely convert to a string\r\n                if(typeof s !== 'string') {\r\n                    s = s.toString();\r\n                }\r\n\r\n                var sign = '';\r\n\r\n                // Remove and store the sign\r\n                var start = s.charAt(0);\r\n                if(start === '-') {\r\n                    s = s.substr(1, s.length);\r\n                    sign = '-';\r\n                }\r\n                else if(start === '+') {\r\n                    // Just remove the plus sign\r\n                    s = s.substr(1, s.length);\r\n                }\r\n\r\n                return {\r\n                    sign: sign,\r\n                    value: s\r\n                };\r\n            };\r\n\r\n\r\n            function convert(value) {\r\n                // Explicitely convert to a decimal\r\n                if(Scientific.isScientific(value)) {\r\n                    value = scientificToDecimal(value);\r\n                }\r\n\r\n                // Split the value into the sign and the value\r\n                var nparts = stripSign(value);\r\n\r\n                // Split it at the decimal. We'll refer to it as the coeffient parts\r\n                var cparts = nparts.value.split('.');\r\n\r\n                // Combine the entire number by removing leading zero and adding the decimal part\r\n                // This would be teh same as moving the decimal point to the end\r\n                var num;\r\n                // We're dealing with integers\r\n                if(cparts.length === 1) {\r\n                    num = cparts[0];\r\n                }\r\n                else {\r\n                    num = cparts[0] + cparts[1];\r\n                }\r\n                var n = cparts[1] ? cparts[1].length : 0;\r\n                // Generate the padding for the zeros\r\n                var den = `1${'0'.repeat(n)}`;\r\n\r\n                if(num !== '0') {\r\n                    num = num.replace(/^0+/, '');\r\n                }\r\n                return [nparts.sign + num, den];\r\n            }\r\n\r\n            return convert(value);\r\n        },\r\n        /**\r\n         * Returns a good approximation of a fraction. This method gets called by convert\r\n         * http://mathforum.org/library/drmath/view/61772.html\r\n         * Decimal To Fraction Conversion - A Simpler Version\r\n         * Dr Peterson\r\n         * @param {number} dec\r\n         * @returns {Array} - an array containing the denominator and the numerator\r\n         */\r\n        fullConversion: function (dec) {\r\n            var done = false;\r\n            // you can adjust the epsilon to a larger number if you don't need very high precision\r\n            var n1 = 0, d1 = 1, n2 = 1, d2 = 0, n = 0, q = dec, epsilon = 1e-16;\r\n            while(!done) {\r\n                n++;\r\n                if(n > 10000) {\r\n                    done = true;\r\n                }\r\n                var a = Math.floor(q);\r\n                var num = n1 + a * n2;\r\n                var den = d1 + a * d2;\r\n                var e = (q - a);\r\n                if(e < epsilon) {\r\n                    done = true;\r\n                }\r\n                q = 1 / e;\r\n                n1 = n2;\r\n                d1 = d2;\r\n                n2 = num;\r\n                d2 = den;\r\n                if(Math.abs(num / den - dec) < epsilon || n > 30) {\r\n                    done = true;\r\n                }\r\n            }\r\n            return [num, den];\r\n        }\r\n    };\r\n    //Depends on Fraction\r\n\r\n    //The latex generator\r\n    var LaTeX = {\r\n        parser: (function () {\r\n            // create a parser and strip it from everything except the items that you need\r\n            var keep = ['classes', 'setOperator', 'getOperators', 'getBrackets', 'tokenize', 'toRPN', 'tree', 'units'];\r\n            var parser = new Parser();\r\n            for(var x in parser) {\r\n                if(keep.indexOf(x) === -1)\r\n                    delete parser[x];\r\n            }\r\n            // declare the operators\r\n            parser.setOperator({\r\n                precedence: 8,\r\n                operator: '\\\\',\r\n                action: 'slash',\r\n                prefix: true,\r\n                postfix: false,\r\n                leftAssoc: true,\r\n                operation: function (e) {\r\n                    return e; // bypass the slash\r\n                }\r\n            });\r\n            parser.setOperator({\r\n                precedence: 8,\r\n                operator: '\\\\,',\r\n                action: 'slash_comma',\r\n                prefix: true,\r\n                postfix: false,\r\n                leftAssoc: true,\r\n                operation: function (e) {\r\n                    return e; // bypass the slash\r\n                }\r\n            });\r\n            // have braces not map to anything. We want them to be return as-is\r\n            var brackets = parser.getBrackets();\r\n            brackets['{'].maps_to = undefined;\r\n            return parser;\r\n        })(),\r\n        space: '~',\r\n        dot: ' \\\\cdot ',\r\n        // grab a list of supported functions but remove the excluded ones found in exclFN\r\n\r\n        latex: function (symbol, option) {\r\n            // it might be an array\r\n            if(symbol.clone) {\r\n                symbol = symbol.clone(); // leave original as-is\r\n            }\r\n            if(symbol instanceof _.classes.Collection)\r\n                symbol = symbol.elements;\r\n\r\n            if(isArray(symbol)) {\r\n                var LaTeXArray = [];\r\n                for(var i = 0; i < symbol.length; i++) {\r\n                    var sym = symbol[i];\r\n                    //This way I can generate LaTeX on an array of strings.\r\n                    if(!isSymbol(sym))\r\n                        sym = _.parse(sym);\r\n                    LaTeXArray.push(this.latex(sym, option));\r\n                }\r\n                return this.brackets(LaTeXArray.join(', '), 'square');\r\n            }\r\n\r\n            else if(isMatrix(symbol)) {\r\n                var TeX = '\\\\begin{pmatrix}\\n';\r\n                for(var i = 0; i < symbol.elements.length; i++) {\r\n                    var rowTeX = [],\r\n                            e = symbol.elements[i];\r\n                    for(var j = 0; j < e.length; j++) {\r\n                        rowTeX.push(this.latex(e[j], option));\r\n                    }\r\n                    TeX += rowTeX.join(' & ');\r\n                    if(i < symbol.elements.length - 1) {\r\n                        TeX += '\\\\\\\\\\n';\r\n                    }\r\n                }\r\n                TeX += '\\\\end{pmatrix}';\r\n                return TeX;\r\n            }\r\n\r\n            else if(isVector(symbol)) {\r\n                var TeX = '\\\\left[';\r\n                for(var i = 0; i < symbol.elements.length; i++) {\r\n                    TeX += this.latex(symbol.elements[i], option) + ' ' + (i !== symbol.elements.length - 1 ? ',\\\\,' : '');\r\n                }\r\n                TeX += '\\\\right]';\r\n                return TeX;\r\n            }\r\n\r\n            else if(isSet(symbol)) {\r\n                var TeX = '\\\\{';\r\n                for(var i = 0; i < symbol.elements.length; i++) {\r\n                    TeX += this.latex(symbol.elements[i], option) + ' ' + (i !== symbol.elements.length - 1 ? ',\\\\,' : '');\r\n                }\r\n                TeX += '\\\\}';\r\n                return TeX;\r\n            }\r\n\r\n            symbol = symbol.clone();\r\n\r\n            var decimal = (option === 'decimal' || option === 'decimals'),\r\n                    power = symbol.power,\r\n                    invert = isNegative(power),\r\n                    negative = symbol.multiplier.lessThan(0);\r\n\r\n            if(symbol.group === P && decimal) {\r\n                return String(symbol.multiplier.toDecimal() * Math.pow(symbol.value, symbol.power.toDecimal()));\r\n            }\r\n            else {\r\n                symbol.multiplier = symbol.multiplier.abs();\r\n\r\n                // if the user wants the result in decimal format then return it as such by placing it at the top part\r\n                var m_array;\r\n\r\n                if(decimal) {\r\n                    var m = String(symbol.multiplier.toDecimal());\r\n                    // if(String(m) === '1' && !decimal) m = '';\r\n                    m_array = [m, ''];\r\n                }\r\n                else {\r\n                    m_array = [symbol.multiplier.num, symbol.multiplier.den];\r\n                }\r\n                // get the value as a two part array\r\n                var v_array = this.value(symbol, invert, option, negative),\r\n                        p;\r\n                // make it all positive since we know whether to push the power to the numerator or denominator already.\r\n                if(invert)\r\n                    power.negate();\r\n                // the power is simple since it requires no additional formatting. We can get it to a\r\n                // string right away. pass in true to neglect unit powers\r\n                if(decimal) {\r\n                    p = isSymbol(power) ? LaTeX.latex(power, option) : String(power.toDecimal());\r\n                    if(String(p) === '1')\r\n                        p = '';\r\n                }\r\n                // get the latex representation\r\n                else if(isSymbol(power))\r\n                    p = this.latex(power, option);\r\n                // get it as a fraction\r\n                else\r\n                    p = this.formatFrac(power, true);\r\n                // use this array to specify if the power is getting attached to the top or the bottom\r\n                var p_array = ['', ''],\r\n                        // stick it to the top or the bottom. If it's negative then the power gets placed on the bottom\r\n                        index = invert ? 1 : 0;\r\n                p_array[index] = p;\r\n\r\n                // special case group P and decimal\r\n                var retval = (negative ? '-' : '') + this.set(m_array, v_array, p_array, symbol.group === CB);\r\n\r\n                return retval.replace(/\\+\\-/gi, '-');\r\n            }\r\n\r\n        },\r\n        // greek mapping\r\n        greek: {\r\n            alpha: '\\\\alpha',\r\n            beta: '\\\\beta',\r\n            gamma: '\\\\gamma',\r\n            delta: '\\\\delta',\r\n            epsilon: '\\\\epsilon',\r\n            zeta: '\\\\zeta',\r\n            eta: '\\\\eta',\r\n            theta: '\\\\theta',\r\n            iota: '\\\\iota',\r\n            kappa: '\\\\kappa',\r\n            lambda: '\\\\lambda',\r\n            mu: '\\\\mu',\r\n            nu: '\\\\nu',\r\n            xi: '\\\\xi',\r\n            omnikron: '\\\\omnikron',\r\n            pi: '\\\\pi',\r\n            rho: '\\\\rho',\r\n            sigma: '\\\\sigma',\r\n            tau: '\\\\tau',\r\n            upsilon: '\\\\upsilon',\r\n            phi: '\\\\phi',\r\n            chi: '\\\\chi',\r\n            psi: '\\\\psi',\r\n            omega: '\\\\omega',\r\n            Gamma: '\\\\Gamma',\r\n            Delta: '\\\\Delta',\r\n            Epsilon: '\\\\Epsilon',\r\n            Theta: '\\\\Theta',\r\n            Lambda: '\\\\Lambda',\r\n            Xi: '\\\\Xi',\r\n            Pi: '\\\\Pi',\r\n            Sigma: '\\\\Sigma',\r\n            Phi: '\\\\Phi',\r\n            Psi: '\\\\Psi',\r\n            Omega: '\\\\Omega'\r\n        },\r\n        symbols: {\r\n            arccos: '\\\\arccos',\r\n            cos: '\\\\cos',\r\n            csc: '\\\\csc',\r\n            exp: '\\\\exp',\r\n            ker: '\\\\ker',\r\n            limsup: '\\\\limsup',\r\n            min: '\\\\min',\r\n            sinh: '\\\\sinh',\r\n            arcsin: '\\\\arcsin',\r\n            cosh: '\\\\cosh',\r\n            deg: '\\\\deg',\r\n            gcd: '\\\\gcd',\r\n            lg: '\\\\lg',\r\n            ln: '\\\\ln',\r\n            Pr: '\\\\Pr',\r\n            sqrt: '\\\\sqrt',\r\n            sup: '\\\\sup',\r\n            arctan: '\\\\arctan',\r\n            cot: '\\\\cot',\r\n            det: '\\\\det',\r\n            hom: '\\\\hom',\r\n            lim: '\\\\lim',\r\n            log: '\\\\log',\r\n            LN: '\\\\LN',\r\n            sec: '\\\\sec',\r\n            tan: '\\\\tan',\r\n            arg: '\\\\arg',\r\n            coth: '\\\\coth',\r\n            dim: '\\\\dim',\r\n            inf: '\\\\inf',\r\n            liminf: '\\\\liminf',\r\n            max: '\\\\max',\r\n            sin: '\\\\sin',\r\n            tanh: '\\\\tanh'\r\n        },\r\n        // get the raw value of the symbol as an array\r\n        value: function (symbol, inverted, option, negative) {\r\n            var group = symbol.group,\r\n                    previousGroup = symbol.previousGroup,\r\n                    v = ['', ''],\r\n                    index = inverted ? 1 : 0;\r\n            /*if(group === N) // do nothing since we want to return top & bottom blank; */\r\n            if(symbol.isInfinity) {\r\n                v[index] = '\\\\infty';\r\n            }\r\n            else if(group === S || group === P || previousGroup === S || previousGroup === P || previousGroup === N) {\r\n                var value = this.formatSubscripts(symbol.value);\r\n                if(value.replace)\r\n                    value = value.replace(/(.+)_$/, '$1\\\\_');\r\n                // split it so we can check for instances of alpha as well as alpha_b\r\n                var t_varray = String(value).split('_');\r\n                var greek = this.greek[t_varray[0]];\r\n                if(greek) {\r\n                    t_varray[0] = greek;\r\n                    value = t_varray.join('_');\r\n                }\r\n                var symbol = this.symbols[t_varray[0]];\r\n                if(symbol) {\r\n                    t_varray[0] = symbol;\r\n                    value = t_varray.join('_');\r\n                }\r\n                v[index] = value;\r\n            }\r\n            else if(group === FN || previousGroup === FN) {\r\n                var name,\r\n                        input = [],\r\n                        fname = symbol.fname;\r\n                // collect the arguments\r\n                for(var i = 0; i < symbol.args.length; i++) {\r\n                    var arg = symbol.args[i], item;\r\n                    if(typeof arg === 'string')\r\n                        item = arg;\r\n                    else {\r\n                        item = this.latex(arg, option);\r\n                    }\r\n                    input.push(item);\r\n                }\r\n\r\n                if(fname === SQRT) {\r\n                    v[index] = '\\\\sqrt' + this.braces(input.join(','));\r\n                }\r\n                else if(fname === ABS) {\r\n                    v[index] = this.brackets(input.join(','), 'abs');\r\n                }\r\n                else if(fname === PARENTHESIS) {\r\n                    v[index] = this.brackets(input.join(','), 'parens');\r\n                }\r\n                else if(fname === 'limit') {\r\n                    v[index] = ' \\\\lim\\\\limits_{' + input[1] + ' \\\\to ' + input[2] + '} ' + input[0];\r\n                }\r\n                else if(fname === 'integrate') {\r\n                    v[index] = '\\\\int' + this.braces(input[0]) + this.braces('d' + input[1]);\r\n                }\r\n                else if(fname === 'defint') {\r\n                    v[index] = '\\\\int\\\\limits_' + this.braces(input[1]) + '^' + this.braces(input[2]) + ' ' + input[0] + ' d' + input[3];\r\n                }\r\n                else if(fname === FACTORIAL || fname === DOUBLEFACTORIAL) {\r\n                    var arg = symbol.args[0];\r\n                    if(arg.power.equals(1) && (arg.isComposite() || arg.isCombination())) {\r\n                        input[0] = this.brackets(input[0]);\r\n                    }\r\n                    v[index] = input[0] + (fname === FACTORIAL ? '!' : '!!');\r\n                }\r\n                else if(fname === 'floor') {\r\n                    v[index] = '\\\\left \\\\lfloor' + this.braces(input[0]) + '\\\\right \\\\rfloor';\r\n                }\r\n                else if(fname === 'ceil') {\r\n                    v[index] = '\\\\left \\\\lceil' + this.braces(input[0]) + '\\\\right \\\\rceil';\r\n                }\r\n                // capture log(a, b)\r\n                else if(fname === Settings.LOG && input.length > 1) {\r\n                    v[index] = '\\\\mathrm' + this.braces(Settings.LOG) + '_' + this.braces(input[1]) + this.brackets(input[0]);\r\n                }\r\n                // capture log(a, b)\r\n                else if(fname === Settings.LOG10) {\r\n                    v[index] = '\\\\mathrm' + this.braces(Settings.LOG) + '_' + this.braces(10) + this.brackets(input[0]);\r\n                }\r\n                else if(fname === 'sum') {\r\n                    var a = input[0],\r\n                            b = input[1],\r\n                            c = input[2],\r\n                            d = input[3];\r\n                    v[index] = '\\\\sum\\\\limits_{' + this.braces(b) + '=' + this.braces(c) + '}^' + this.braces(d) + ' ' + this.braces(a) + '';\r\n                }\r\n                else if(fname === 'product') {\r\n                    var a = input[0],\r\n                            b = input[1],\r\n                            c = input[2],\r\n                            d = input[3];\r\n                    v[index] = '\\\\prod\\\\limits_{' + this.braces(b) + '=' + this.braces(c) + '}^' + this.braces(d) + ' ' + this.braces(a) + '';\r\n                }\r\n                else if(fname === 'nthroot') {\r\n                    v[index] = '\\\\sqrt[' + input[1] + ']' + this.braces(input[0]);\r\n                }\r\n                else if(fname === 'mod') {\r\n                    v[index] = input[0] + ' \\\\bmod ' + input[1];\r\n                }\r\n                else if(fname === 'realpart') {\r\n                    v[index] = '\\\\operatorname{Re}' + this.brackets(input[0]);\r\n                }\r\n                else if(fname === 'imagpart') {\r\n                    v[index] = '\\\\operatorname{Im}' + this.brackets(input[0]);\r\n                }\r\n                else {\r\n                    var name = fname !== '' ? '\\\\mathrm' + this.braces(fname.replace(/_/g, '\\\\_')) : '';\r\n                    if(symbol.isConversion)\r\n                        v[index] = name + this.brackets(input.join(''), 'parens');\r\n                    else\r\n                        v[index] = name + this.brackets(input.join(','), 'parens');\r\n                }\r\n            }\r\n            else if(symbol.isComposite()) {\r\n                var collected = symbol.collectSymbols().sort(\r\n                        group === CP || previousGroup === CP ?\r\n                        function (a, b) {\r\n                            return b.group - a.group;\r\n                        } :\r\n                        function (a, b) {\r\n                            var x = isSymbol(a.power) ? -1 : a.power;\r\n                            var y = isSymbol(b.power) ? -1 : b.power;\r\n                            return y - x;\r\n                        }\r\n                ),\r\n                        symbols = [],\r\n                        l = collected.length;\r\n                for(var i = 0; i < l; i++) {\r\n                    symbols.push(LaTeX.latex(collected[i], option));\r\n                }\r\n                var value = symbols.join('+');\r\n\r\n                v[index] = !(symbol.isLinear() && symbol.multiplier.equals(1)) || negative ? this.brackets(value, 'parens') : value;\r\n            }\r\n            else if(group === CB || previousGroup === EX || previousGroup === CB) {\r\n                if(group === CB)\r\n                    symbol.distributeExponent();\r\n                // This almost feels a little like cheating but I need to know if I should be wrapping the symbol\r\n                // in brackets or not. We'll do this by checking the value of the numerator and then comparing it\r\n                // to whether the symbol value is \"simple\" or not.\r\n                var denominator = [],\r\n                        numerator = [];\r\n                // Generate a profile\r\n                var den_map = [], num_map = [], num_c = 0, den_c = 0;\r\n                var setBrackets = function (container, map, counter) {\r\n                    if(counter > 1 && map.length > 0) {\r\n                        var l = map.length;\r\n                        for(var i = 0; i < l; i++) {\r\n                            var idx = map[i], item = container[idx];\r\n                            if(!(/^\\\\left\\(.+\\\\right\\)\\^\\{.+\\}$/g.test(item) || /^\\\\left\\(.+\\\\right\\)$/g.test(item))) {\r\n                                container[idx] = LaTeX.brackets(item, 'parens');\r\n                            }\r\n                        }\r\n                    }\r\n                    return container;\r\n                };\r\n\r\n                // Generate latex for each of them\r\n                symbol.each(function (x) {\r\n                    var isDenom = isNegative(x.power),\r\n                            laTex;\r\n\r\n                    if(isDenom) {\r\n                        laTex = LaTeX.latex(x.invert(), option);\r\n                        den_c++;\r\n                        if(x.isComposite()) {\r\n                            if(symbol.multiplier.den != 1 && Math.abs(x.power) == 1)\r\n                                laTex = LaTeX.brackets(laTex, 'parens');\r\n                            den_map.push(denominator.length); // make a note of where the composite was found\r\n                        }\r\n\r\n                        denominator.push(laTex);\r\n                    }\r\n                    else {\r\n                        laTex = LaTeX.latex(x, option);\r\n                        num_c++;\r\n                        if(x.isComposite()) {\r\n                            if(symbol.multiplier.num != 1 && Math.abs(x.power) == 1)\r\n                                laTex = LaTeX.brackets(laTex, 'parens');\r\n                            num_map.push(numerator.length);   // make a note of where the composite was found\r\n                        }\r\n                        numerator.push(laTex);\r\n                    }\r\n                });\r\n\r\n                // Apply brackets\r\n                setBrackets(numerator, num_map, num_c);\r\n                v[0] = numerator.join(this.dot); // collapse the numerator into one string\r\n\r\n                setBrackets(denominator, den_map, den_c);\r\n                v[1] = denominator.join(this.dot);\r\n            }\r\n\r\n            return v;\r\n        },\r\n        set: function (m, v, p, combine_power) {\r\n            var isBracketed = function (v) {\r\n                return /^\\\\left\\(.+\\\\right\\)$/.test(v);\r\n            };\r\n            // format the power if it exists\r\n            if(p)\r\n                p = this.formatP(p);\r\n            // group CB will have to be wrapped since the power applies to both it's numerator and denominator\r\n            if(combine_power) {\r\n                // POSSIBLE BUG: If powers for group CB format wrong, investigate this since I might have overlooked something\r\n                // the assumption is that in every case the denonimator should be empty when dealing with CB. I can't think\r\n                // of a case where this isn't true\r\n                var tp = p[0];\r\n                p[0] = ''; // temporarily make p blank\r\n            }\r\n\r\n            // merge v and p. Not that v MUST be first since the order matters\r\n            v = this.merge(v, p);\r\n            var mn = m[0], md = m[1], vn = v[0], vd = v[1];\r\n            // filters\r\n            // if the top has a variable but the numerator is one drop it\r\n            if(vn && Number(mn) === 1)\r\n                mn = '';\r\n            // if denominator is 1 drop it always\r\n            if(Number(md) === 1)\r\n                md = '';\r\n            // prepare the top portion but check that it's not already bracketed. If it is then leave out the cdot\r\n            var top = this.join(mn, vn, !isBracketed(vn) ? this.dot : '');\r\n\r\n            // prepare the bottom portion but check that it's not already bracketed. If it is then leave out the cdot\r\n            var bottom = this.join(md, vd, !isBracketed(vd) ? this.dot : '');\r\n            // format the power if it exists\r\n            // make it a fraction if both top and bottom exists\r\n            if(top && bottom) {\r\n                var frac = this.frac(top, bottom);\r\n                if(combine_power && tp)\r\n                    frac = this.brackets(frac) + tp;\r\n                return frac;\r\n            }\r\n            // otherwise only the top exists so return that\r\n            else\r\n                return top;\r\n        },\r\n        merge: function (a, b) {\r\n            var r = [];\r\n            for(var i = 0; i < 2; i++)\r\n                r[i] = a[i] + b[i];\r\n            return r;\r\n        },\r\n        // joins together two strings if both exist\r\n        join: function (n, d, glue) {\r\n            if(!n && !d)\r\n                return '';\r\n            if(n && !d)\r\n                return n;\r\n            if(d && !n)\r\n                return d;\r\n            return n + glue + d;\r\n        },\r\n        /**\r\n         * Places subscripts in braces for proper formatting\r\n         * @param {String} v\r\n         * @returns {String}\r\n         */\r\n        formatSubscripts: function (v) {\r\n            // Split it at the underscore\r\n            var arr = v.toString().split('_');\r\n\r\n            var name = '';\r\n\r\n            // Loop over all entries except the first one\r\n            while(arr.length > 1) {\r\n                // Wrap all in braces except for the last one\r\n                if(arr.length > 0) {\r\n                    name = '_' + this.braces(arr.pop() + name);\r\n                }\r\n            }\r\n\r\n            return arr[0] + name;\r\n        },\r\n        formatP: function (p_array) {\r\n            for(var i = 0; i < 2; i++) {\r\n                var p = p_array[i];\r\n                if(p)\r\n                    p_array[i] = '^' + this.braces(p);\r\n            }\r\n            return p_array;\r\n        },\r\n        /**\r\n         * formats the fractions accordingly.\r\n         * @param {Frac} f\r\n         * @param {bool} is_pow\r\n         */\r\n        formatFrac: function (f, is_pow) {\r\n            var n = f.num.toString(),\r\n                    d = f.den.toString();\r\n            // no need to have x^1\r\n            if(is_pow && n === '1' && d === '1')\r\n                return '';\r\n            // no need to have x/1\r\n            if(d === '1')\r\n                return n;\r\n            return this.frac(n, d);\r\n        },\r\n        frac: function (n, d) {\r\n            return '\\\\frac' + this.braces(n) + this.braces(d);\r\n        },\r\n        braces: function (e) {\r\n            return '{' + e + '}';\r\n        },\r\n        brackets: function (e, typ) {\r\n            typ = typ || 'parens';\r\n            var bracketTypes = {\r\n                parens: ['(', ')'],\r\n                square: ['[', ']'],\r\n                brace: ['{', '}'],\r\n                abs: ['|', '|'],\r\n                angle: ['\\\\langle', '\\\\rangle']\r\n            };\r\n            var bracket = bracketTypes[typ];\r\n            return '\\\\left' + bracket[0] + e + '\\\\right' + bracket[1];\r\n        },\r\n        /**\r\n         * Removes extreneous tokens\r\n         * @param {Tokens[]} tokens\r\n         * @returns {Tokens[]}\r\n         */\r\n        filterTokens: function (tokens) {\r\n            var filtered = [];\r\n\r\n            // Copy over the type of the scope\r\n            if(isArray(tokens)) {\r\n                filtered.type = tokens.type;\r\n            }\r\n\r\n            // the items that need to be disposed\r\n            var d = ['\\\\', 'left', 'right', 'big', 'Big', 'large', 'Large'];\r\n            for(var i = 0, l = tokens.length; i < l; i++) {\r\n                var token = tokens[i];\r\n                var next_token = tokens[i + 1];\r\n                if(token.value === '\\\\' && next_token.value === '\\\\') {\r\n                    filtered.push(token);\r\n                }\r\n                else if(isArray(token)) {\r\n                    filtered.push(LaTeX.filterTokens(token));\r\n                }\r\n                else if(d.indexOf(token.value) === -1) {\r\n                    filtered.push(token);\r\n                }\r\n            }\r\n            return filtered;\r\n        },\r\n        /*\r\n         * Parses tokens from LaTeX string. Does not do any error checking\r\n         * @param {Tokens[]} rpn\r\n         * @returns {String}\r\n         */\r\n        parse: function (raw_tokens) {\r\n            var i, l;\r\n            var retval = '';\r\n            var tokens = this.filterTokens(raw_tokens);\r\n            var replace = {\r\n                'cdot': '',\r\n                'times': '',\r\n                'infty': 'Infinity'\r\n            };\r\n            // get the next token\r\n            var next = function (n) {\r\n                return tokens[(typeof n === 'undefined' ? ++i : i += n)];\r\n            };\r\n            var parse_next = function () {\r\n                return LaTeX.parse(next());\r\n            };\r\n            var get = function (token) {\r\n                if(token in replace) {\r\n                    return replace[token];\r\n                }\r\n                // A quirk with implicit multiplication forces us to check for *\r\n                if(token === '*' && tokens[i + 1].value === '&') {\r\n                    next(2); // skip this and the &\r\n                    return ',';\r\n                }\r\n\r\n                if(token === '&') {\r\n                    next();\r\n                    return ','; // Skip the *\r\n                }\r\n                // If it's the end of a row, return the row separator\r\n                if(token === '\\\\') {\r\n                    return '],[';\r\n                }\r\n                return token;\r\n            };\r\n\r\n            // start parsing the tokens\r\n            for(i = 0, l = tokens.length; i < l; i++) {\r\n                var token = tokens[i];\r\n                // fractions\r\n                if(token.value === 'frac') {\r\n                    // parse and wrap it in brackets\r\n                    var n = parse_next();\r\n                    var d = parse_next();\r\n                    retval += n + '/' + d;\r\n                }\r\n                else if(token.value in LaTeX.symbols) {\r\n                    if(token.value === SQRT && tokens[i + 1].type === 'vector' && tokens[i + 2].type === 'Set') {\r\n                        var base = parse_next();\r\n                        var expr = parse_next();\r\n                        retval += (expr + '^' + inBrackets('1/' + base));\r\n                    }\r\n                    else {\r\n                        retval += token.value + parse_next();\r\n                    }\r\n                }\r\n                else if(token.value === 'int') {\r\n                    var f = parse_next();\r\n                    // skip the comma\r\n                    i++;\r\n                    // get the variable of integration\r\n                    var dx = next().value;\r\n                    dx = get(dx.substring(1, dx.length));\r\n                    retval += 'integrate' + inBrackets(f + ',' + dx);\r\n                }\r\n                else if(token.value === 'int_') {\r\n                    var l = parse_next(); // lower\r\n                    i++; // skip the ^\r\n                    var u = next().value; // upper\r\n                    // if it is in brackets\r\n                    if (u === undefined) {\r\n                        i--;\r\n                        var u = parse_next();\r\n                    }\r\n                    var f = parse_next(); // function\r\n                    \r\n                    // get the variable of integration\r\n                    var dx = next().value;\r\n                    // skip the comma\r\n                    if (dx === ',') {\r\n                        var dx = next().value;\r\n                    }\r\n                    // if 'd', skip\r\n                    if (dx === 'differentialD') {\r\n                        // skip the *\r\n                        i++;\r\n                        var dx = next().value;\r\n                    }\r\n                    if (dx === 'mathrm') {\r\n                        // skip the mathrm{d}\r\n                        i++;\r\n                        var dx = next().value;\r\n                    }\r\n                    retval += 'defint' + inBrackets(f + ',' + l + ',' + u + ',' + dx);\r\n                }\r\n                else if(token.value && token.value.startsWith('int_')) {\r\n                    // var l = parse_next(); // lower\r\n                    var l = token.value.replace('int_', '')\r\n                    console.log('uppernow')\r\n                    i++; // skip the ^\r\n                    var u = next().value; // upper\r\n                    // if it is in brackets\r\n                    if (u === undefined) {\r\n                        i--;\r\n                        var u = parse_next();\r\n                    }\r\n                    var f = parse_next(); // function\r\n                    \r\n                    // get the variable of integration\r\n                    var dx = next().value;\r\n                    // skip the comma\r\n                    if (dx === ',') {\r\n                        var dx = next().value;\r\n                    }\r\n                    // if 'd', skip\r\n                    if (dx === 'differentialD') {\r\n                        // skip the *\r\n                        i++;\r\n                        var dx = next().value;\r\n                    }\r\n                    if (dx === 'mathrm') {\r\n                        // skip the mathrm{d}\r\n                        i++;\r\n                        var dx = next().value;\r\n                    }\r\n                    retval += 'defint' + inBrackets(f + ',' + l + ',' + u + ',' + dx);\r\n                }\r\n                else if(token.value === 'mathrm') {\r\n                    var f = tokens[++i][0].value;\r\n                    retval += f + parse_next();\r\n                }\r\n                // sum and product\r\n                else if(token.value === 'sum_' || token.value === 'prod_') {\r\n                    var fn = token.value === 'sum_' ? 'sum' : 'product';\r\n                    var nxt = next();\r\n                    i++; // skip the caret\r\n                    var end = parse_next();\r\n                    var f = parse_next();\r\n                    retval += fn + inBrackets([f, get(nxt[0]), get(nxt[2]), get(end)].join(','));\r\n                }\r\n                else if(token.value === 'lim_') {\r\n                    var nxt = next();\r\n                    retval += 'limit' + inBrackets([parse_next(), get(nxt[0]), get(nxt[2])].join(','));\r\n                }\r\n                else if(token.value === 'begin') {\r\n                    var nxt = next();\r\n                    if(Array.isArray(nxt)) {\r\n                        var v = nxt[0].value;\r\n                        if(v === 'matrix') {\r\n                            // Start a matrix\r\n                            retval += 'matrix([';\r\n                        }\r\n                    }\r\n                }\r\n                else if(token.value === 'end') {\r\n                    var nxt = next();\r\n                    if(Array.isArray(nxt)) {\r\n                        var v = nxt[0].value;\r\n                        if(v === 'matrix') {\r\n                            // End a matrix\r\n                            retval += '])';\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    if(Array.isArray(token)) {\r\n                        retval += get(LaTeX.parse(token));\r\n                    }\r\n                    else {\r\n                        retval += get(token.value.toString());\r\n                    }\r\n                }\r\n            }\r\n\r\n            return inBrackets(retval);\r\n        }\r\n    };\r\n//Vector =======================================================================\r\n    function Vector(v) {\r\n        if(isVector(v))\r\n            this.elements = v.items.slice(0);\r\n        else if(isArray(v))\r\n            this.elements = v.slice(0);\r\n        else\r\n            this.elements = [].slice.call(arguments);\r\n    }\r\n    /*\r\n     * Generates a pre-filled array\r\n     * @param {type} n\r\n     * @param {type} val\r\n     * @returns {unresolved}\r\n     */\r\n    Vector.arrayPrefill = function (n, val) {\r\n        var a = [];\r\n        val = val || 0;\r\n        for(var i = 0; i < n; i++)\r\n            a[i] = val;\r\n        return a;\r\n    };\r\n    /**\r\n     * Generate a vector from and array\r\n     * @param {type} a\r\n     * @returns {unresolved}\r\n     */\r\n    Vector.fromArray = function (a) {\r\n        var v = new Vector();\r\n        v.elements = a;\r\n        return v;\r\n    };\r\n\r\n    /**\r\n     * Convert a Set to a Vector\r\n     * @param {Set} set\r\n     * @returns {Vector}\r\n     */\r\n    Vector.fromSet = function (set) {\r\n        return Vector.fromArray(set.elements);\r\n    };\r\n\r\n    //Ported from Sylvester.js\r\n    Vector.prototype = {\r\n        custom: true,\r\n        // Returns element i of the vector\r\n        e: function (i) {\r\n            return (i < 1 || i > this.elements.length) ? null : this.elements[i - 1];\r\n        },\r\n\r\n        set: function (i, val) {\r\n            if(!isSymbol(val))\r\n                val = new Symbol(val);\r\n            this.elements[i] = val;\r\n        },\r\n\r\n        // Returns the number of elements the vector has\r\n        dimensions: function () {\r\n            return this.elements.length;\r\n        },\r\n\r\n        // Returns the modulus ('length') of the vector\r\n        modulus: function () {\r\n            return block('SAFE', function () {\r\n                return _.pow((this.dot(this.clone())), new Symbol(0.5));\r\n            }, undefined, this);\r\n        },\r\n\r\n        // Returns true iff the vector is equal to the argument\r\n        eql: function (vector) {\r\n            var n = this.elements.length;\r\n            var V = vector.elements || vector;\r\n            if(n !== V.length) {\r\n                return false;\r\n            }\r\n            do {\r\n                if(Math.abs(_.subtract(this.elements[n - 1], V[n - 1]).valueOf()) > PRECISION) {\r\n                    return false;\r\n                }\r\n            }\r\n            while(--n);\r\n            return true;\r\n        },\r\n\r\n        // Returns a clone of the vector\r\n        clone: function () {\r\n            var V = new Vector(),\r\n                    l = this.elements.length;\r\n            for(var i = 0; i < l; i++) {\r\n                //Rule: all items within the vector must have a clone method.\r\n                V.elements.push(this.elements[i].clone());\r\n            }\r\n            if(this.getter) {\r\n                V.getter = this.getter.clone();\r\n            }\r\n            return V;\r\n        },\r\n\r\n        // Maps the vector to another vector according to the given function\r\n        map: function (fn) {\r\n            var elements = [];\r\n            this.each(function (x, i) {\r\n                elements.push(fn(x, i));\r\n            });\r\n\r\n            return new Vector(elements);\r\n        },\r\n\r\n        // Calls the iterator for each element of the vector in turn\r\n        each: function (fn) {\r\n            var n = this.elements.length, k = n, i;\r\n            do {\r\n                i = k - n;\r\n                fn(this.elements[i], i + 1);\r\n            }\r\n            while(--n);\r\n        },\r\n\r\n        // Returns a new vector created by normalizing the receiver\r\n        toUnitVector: function () {\r\n            return block('SAFE', function () {\r\n                var r = this.modulus();\r\n                if(r.valueOf() === 0) {\r\n                    return this.clone();\r\n                }\r\n                return this.map(function (x) {\r\n                    return _.divide(x, r);\r\n                });\r\n            }, undefined, this);\r\n        },\r\n\r\n        // Returns the angle between the vector and the argument (also a vector)\r\n        angleFrom: function (vector) {\r\n            return block('SAFE', function () {\r\n                var V = vector.elements || vector;\r\n                var n = this.elements.length;\r\n                if(n !== V.length) {\r\n                    return null;\r\n                }\r\n                var dot = new Symbol(0), mod1 = new Symbol(0), mod2 = new Symbol(0);\r\n                // Work things out in parallel to save time\r\n                this.each(function (x, i) {\r\n                    dot = _.add(dot, _.multiply(x, V[i - 1]));\r\n                    mod1 = _.add(mod1, _.multiply(x, x));// will not conflict in safe block\r\n                    mod2 = _.add(mod2, _.multiply(V[i - 1], V[i - 1]));// will not conflict in safe block\r\n                });\r\n                mod1 = _.pow(mod1, new Symbol(0.5));\r\n                mod2 = _.pow(mod2, new Symbol(0.5));\r\n                var product = _.multiply(mod1, mod2);\r\n                if(product.valueOf() === 0) {\r\n                    return null;\r\n                }\r\n                var theta = _.divide(dot, product);\r\n                var theta_val = theta.valueOf();\r\n                if(theta_val < -1) {\r\n                    theta = -1;\r\n                }\r\n                if(theta_val > 1) {\r\n                    theta = 1;\r\n                }\r\n                return new Symbol(Math.acos(theta));\r\n            }, undefined, this);\r\n        },\r\n\r\n        // Returns true iff the vector is parallel to the argument\r\n        isParallelTo: function (vector) {\r\n            var angle = this.angleFrom(vector).valueOf();\r\n            return (angle === null) ? null : (angle <= PRECISION);\r\n        },\r\n\r\n        // Returns true iff the vector is antiparallel to the argument\r\n        isAntiparallelTo: function (vector) {\r\n            var angle = this.angleFrom(vector).valueOf();\r\n            return (angle === null) ? null : (Math.abs(angle - Math.PI) <= PRECISION);\r\n        },\r\n\r\n        // Returns true iff the vector is perpendicular to the argument\r\n        isPerpendicularTo: function (vector) {\r\n            var dot = this.dot(vector);\r\n            return (dot === null) ? null : (Math.abs(dot) <= PRECISION);\r\n        },\r\n\r\n        // Returns the result of adding the argument to the vector\r\n        add: function (vector) {\r\n            return block('SAFE', function () {\r\n                var V = vector.elements || vector;\r\n                if(this.elements.length !== V.length) {\r\n                    return null;\r\n                }\r\n                return this.map(function (x, i) {\r\n                    return _.add(x, V[i - 1]);\r\n                });\r\n            }, undefined, this);\r\n        },\r\n\r\n        // Returns the result of subtracting the argument from the vector\r\n        subtract: function (vector) {\r\n            return block('SAFE', function () {\r\n                var V = vector.elements || vector;\r\n                if(this.elements.length !== V.length) {\r\n                    return null;\r\n                }\r\n                return this.map(function (x, i) {\r\n                    return _.subtract(x, V[i - 1]);\r\n                });\r\n            }, undefined, this);\r\n        },\r\n\r\n        // Returns the result of multiplying the elements of the vector by the argument\r\n        multiply: function (k) {\r\n            return this.map(function (x) {\r\n                return x.clone() * k.clone();\r\n            });\r\n        },\r\n\r\n        x: function (k) {\r\n            return this.multiply(k);\r\n        },\r\n\r\n        // Returns the scalar product of the vector with the argument\r\n        // Both vectors must have equal dimensionality\r\n        dot: function (vector) {\r\n            return block('SAFE', function () {\r\n                var V = vector.elements || vector;\r\n                var product = new Symbol(0), n = this.elements.length;\r\n                if(n !== V.length) {\r\n                    return null;\r\n                }\r\n                do {\r\n                    product = _.add(product, _.multiply(this.elements[n - 1], V[n - 1]));\r\n                }\r\n                while(--n);\r\n                return product;\r\n            }, undefined, this);\r\n        },\r\n\r\n        // Returns the vector product of the vector with the argument\r\n        // Both vectors must have dimensionality 3\r\n        cross: function (vector) {\r\n            var B = vector.elements || vector;\r\n            if(this.elements.length !== 3 || B.length !== 3) {\r\n                return null;\r\n            }\r\n            var A = this.elements;\r\n            return block('SAFE', function () {\r\n                return new Vector([\r\n                    _.subtract(_.multiply(A[1], B[2]), _.multiply(A[2], B[1])),\r\n                    _.subtract(_.multiply(A[2], B[0]), _.multiply(A[0], B[2])),\r\n                    _.subtract(_.multiply(A[0], B[1]), _.multiply(A[1], B[0]))\r\n                ]);\r\n            }, undefined, this);\r\n        },\r\n\r\n        // Returns the (absolute) largest element of the vector\r\n        max: function () {\r\n            var m = 0, n = this.elements.length, k = n, i;\r\n            do {\r\n                i = k - n;\r\n                if(Math.abs(this.elements[i].valueOf()) > Math.abs(m.valueOf())) {\r\n                    m = this.elements[i];\r\n                }\r\n            }\r\n            while(--n);\r\n            return m;\r\n        },\r\n        magnitude: function () {\r\n            var magnitude = new Symbol(0);\r\n            this.each(function (e) {\r\n                magnitude = _.add(magnitude, _.pow(e, new Symbol(2)));\r\n            });\r\n            return _.sqrt(magnitude);\r\n        },\r\n        // Returns the index of the first match found\r\n        indexOf: function (x) {\r\n            var index = null, n = this.elements.length, k = n, i;\r\n            do {\r\n                i = k - n;\r\n                if(index === null && this.elements[i].valueOf() === x.valueOf()) {\r\n                    index = i + 1;\r\n                }\r\n            }\r\n            while(--n);\r\n            return index;\r\n        },\r\n        text: function (x) {\r\n            return text(this);\r\n        },\r\n        toString: function () {\r\n            return this.text();\r\n        },\r\n        latex: function (option) {\r\n            var tex = [];\r\n            for(var i = 0; i < this.elements.length; i++) {\r\n                tex.push(LaTeX.latex.call(LaTeX, this.elements[i], option));\r\n            }\r\n            return '[' + tex.join(', ') + ']';\r\n        }\r\n    };\r\n\r\n//Matrix =======================================================================\r\n    function Matrix() {\r\n        var m = arguments,\r\n                l = m.length, i, el = [];\r\n        if(isMatrix(m)) { // if it's a matrix then make a clone\r\n            for(i = 0; i < l; i++) {\r\n                el.push(m[i].slice(0));\r\n            }\r\n        }\r\n        else {\r\n            var row, lw, rl;\r\n            for(i = 0; i < l; i++) {\r\n                row = m[i];\r\n                if(isVector(row))\r\n                    row = row.elements;\r\n                if(!isArray(row))\r\n                    row = [row];\r\n                rl = row.length;\r\n                if(lw && lw !== rl)\r\n                    err('Unable to create Matrix. Row dimensions do not match!');\r\n                el.push(row);\r\n                lw = rl;\r\n            }\r\n        }\r\n        this.elements = el;\r\n    }\r\n    Matrix.identity = function (n) {\r\n        var m = new Matrix();\r\n        for(var i = 0; i < n; i++) {\r\n            m.elements.push([]);\r\n            for(var j = 0; j < n; j++) {\r\n                m.set(i, j, i === j ? new Symbol(1) : new Symbol(0));\r\n            }\r\n        }\r\n        return m;\r\n    };\r\n    Matrix.fromArray = function (arr) {\r\n        function F(args) {\r\n            return Matrix.apply(this, args);\r\n        }\r\n        F.prototype = Matrix.prototype;\r\n\r\n        return new F(arr);\r\n    };\r\n    Matrix.zeroMatrix = function (rows, cols) {\r\n        var m = new Matrix();\r\n        for(var i = 0; i < rows; i++) {\r\n            m.elements.push(Vector.arrayPrefill(cols, new Symbol(0)));\r\n        }\r\n        return m;\r\n    };\r\n    Matrix.prototype = {\r\n        // needs be true to let the parser know not to try to cast it to a symbol\r\n        custom: true,\r\n        get: function (row, column) {\r\n            if(!this.elements[row])\r\n                return undefined;\r\n            return this.elements[row][column];\r\n        },\r\n        map: function (f, raw_values) {\r\n            var M = new Matrix();\r\n            this.each(function (e, i, j) {\r\n                M.set(i, j, f.call(M, e), raw_values);\r\n            });\r\n            return M;\r\n        },\r\n        set: function (row, column, value, raw) {\r\n            if(!this.elements[row])\r\n                this.elements[row] = [];\r\n            this.elements[row][column] = raw ? value : (isSymbol(value) ? value : new Symbol(value));\r\n        },\r\n        cols: function () {\r\n            return this.elements[0].length;\r\n        },\r\n        rows: function () {\r\n            return this.elements.length;\r\n        },\r\n        row: function (n) {\r\n            if(!n || n > this.cols())\r\n                return [];\r\n            return this.elements[n - 1];\r\n        },\r\n        col: function (n) {\r\n            var nr = this.rows(),\r\n                    col = [];\r\n            if(n > this.cols() || !n)\r\n                return col;\r\n            for(var i = 0; i < nr; i++) {\r\n                col.push(this.elements[i][n - 1]);\r\n            }\r\n            return col;\r\n        },\r\n        eachElement: function (fn) {\r\n            var nr = this.rows(),\r\n                    nc = this.cols(), i, j;\r\n            for(i = 0; i < nr; i++) {\r\n                for(j = 0; j < nc; j++) {\r\n                    fn.call(this, this.elements[i][j], i, j);\r\n                }\r\n            }\r\n        },\r\n        // ported from Sylvester.js\r\n        determinant: function () {\r\n            if(!this.isSquare()) {\r\n                return null;\r\n            }\r\n            var M = this.toRightTriangular();\r\n            var det = M.elements[0][0], n = M.elements.length - 1, k = n, i;\r\n            do {\r\n                i = k - n + 1;\r\n                det = _.multiply(det, M.elements[i][i]);\r\n            }\r\n            while(--n);\r\n            return det;\r\n        },\r\n        isSquare: function () {\r\n            return this.elements.length === this.elements[0].length;\r\n        },\r\n        isSingular: function () {\r\n            return this.isSquare() && this.determinant() === 0;\r\n        },\r\n        augment: function (m) {\r\n            var r = this.rows(), rr = m.rows();\r\n            if(r !== rr)\r\n                err(\"Cannot augment matrix. Rows don't match.\");\r\n            for(var i = 0; i < r; i++) {\r\n                this.elements[i] = this.elements[i].concat(m.elements[i]);\r\n            }\r\n\r\n            return this;\r\n        },\r\n        clone: function () {\r\n            var r = this.rows(), c = this.cols(),\r\n                    m = new Matrix();\r\n            for(var i = 0; i < r; i++) {\r\n                m.elements[i] = [];\r\n                for(var j = 0; j < c; j++) {\r\n                    var symbol = this.elements[i][j];\r\n                    m.elements[i][j] = isSymbol(symbol) ? symbol.clone() : symbol;\r\n                }\r\n            }\r\n            return m;\r\n        },\r\n        // ported from Sylvester.js\r\n        invert: function () {\r\n            if(!this.isSquare())\r\n                err('Matrix is not square!');\r\n            return block('SAFE', function () {\r\n                var ni = this.elements.length, ki = ni, i, j;\r\n                var imatrix = Matrix.identity(ni);\r\n                var M = this.augment(imatrix).toRightTriangular();\r\n                var np, kp = M.elements[0].length, p, els, divisor;\r\n                var inverse_elements = [], new_element;\r\n                // Matrix is non-singular so there will be no zeros on the diagonal\r\n                // Cycle through rows from last to first\r\n                do {\r\n                    i = ni - 1;\r\n                    // First, normalise diagonal elements to 1\r\n                    els = [];\r\n                    np = kp;\r\n                    inverse_elements[i] = [];\r\n                    divisor = M.elements[i][i];\r\n                    do {\r\n                        p = kp - np;\r\n                        new_element = _.divide(M.elements[i][p], divisor.clone());\r\n                        els.push(new_element);\r\n                        // Shuffle of the current row of the right hand side into the results\r\n                        // array as it will not be modified by later runs through this loop\r\n                        if(p >= ki) {\r\n                            inverse_elements[i].push(new_element);\r\n                        }\r\n                    }\r\n                    while(--np);\r\n                    M.elements[i] = els;\r\n                    // Then, subtract this row from those above it to\r\n                    // give the identity matrix on the left hand side\r\n                    for(j = 0; j < i; j++) {\r\n                        els = [];\r\n                        np = kp;\r\n                        do {\r\n                            p = kp - np;\r\n                            els.push(_.subtract(M.elements[j][p].clone(), _.multiply(M.elements[i][p].clone(), M.elements[j][i].clone())));\r\n                        }\r\n                        while(--np);\r\n                        M.elements[j] = els;\r\n                    }\r\n                }\r\n                while(--ni);\r\n                return Matrix.fromArray(inverse_elements);\r\n            }, undefined, this);\r\n        },\r\n        // ported from Sylvester.js\r\n        toRightTriangular: function () {\r\n            return block('SAFE', function () {\r\n                var M = this.clone(), els, fel, nel,\r\n                        n = this.elements.length, k = n, i, np, kp = this.elements[0].length, p;\r\n                do {\r\n                    i = k - n;\r\n                    fel = M.elements[i][i];\r\n                    if(fel.valueOf() === 0) {\r\n                        for(var j = i + 1; j < k; j++) {\r\n                            nel = M.elements[j][i];\r\n                            if(nel && nel.valueOf() !== 0) {\r\n                                els = [];\r\n                                np = kp;\r\n                                do {\r\n                                    p = kp - np;\r\n                                    els.push(_.add(M.elements[i][p].clone(), M.elements[j][p].clone()));\r\n                                }\r\n                                while(--np);\r\n                                M.elements[i] = els;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    var fel = M.elements[i][i];\r\n                    if(fel.valueOf() !== 0) {\r\n                        for(j = i + 1; j < k; j++) {\r\n                            var multiplier = _.divide(M.elements[j][i].clone(), M.elements[i][i].clone());\r\n                            els = [];\r\n                            np = kp;\r\n                            do {\r\n                                p = kp - np;\r\n                                // Elements with column numbers up to an including the number\r\n                                // of the row that we're subtracting can safely be set straight to\r\n                                // zero, since that's the point of this routine and it avoids having\r\n                                // to loop over and correct rounding errors later\r\n                                els.push(p <= i ? new Symbol(0) :\r\n                                        _.subtract(M.elements[j][p].clone(), _.multiply(M.elements[i][p].clone(), multiplier.clone())));\r\n                            }\r\n                            while(--np);\r\n                            M.elements[j] = els;\r\n                        }\r\n                    }\r\n                }\r\n                while(--n);\r\n\r\n                return M;\r\n            }, undefined, this);\r\n        },\r\n        transpose: function () {\r\n            var rows = this.elements.length, cols = this.elements[0].length;\r\n            var M = new Matrix(), ni = cols, i, nj, j;\r\n\r\n            do {\r\n                i = cols - ni;\r\n                M.elements[i] = [];\r\n                nj = rows;\r\n                do {\r\n                    j = rows - nj;\r\n                    M.elements[i][j] = this.elements[j][i].clone();\r\n                }\r\n                while(--nj);\r\n            }\r\n            while(--ni);\r\n            return M;\r\n        },\r\n        // Returns true if the matrix can multiply the argument from the left\r\n        canMultiplyFromLeft: function (matrix) {\r\n            var l = isMatrix(matrix) ? matrix.elements.length : matrix.length;\r\n            // this.columns should equal matrix.rows\r\n            return (this.elements[0].length === l);\r\n        },\r\n        sameSize: function (matrix) {\r\n            return this.rows() === matrix.rows() && this.cols() === matrix.cols();\r\n        },\r\n        multiply: function (matrix) {\r\n            return block('SAFE', function () {\r\n                var M = matrix.elements || matrix;\r\n                if(!this.canMultiplyFromLeft(M)) {\r\n                    if(this.sameSize(matrix)) {\r\n                        var MM = new Matrix();\r\n                        var rows = this.rows();\r\n                        for(var i = 0; i < rows; i++) {\r\n                            var e = _.multiply(new Vector(this.elements[i]), new Vector(matrix.elements[i]));\r\n                            MM.elements[i] = e.elements;\r\n                        }\r\n                        return MM;\r\n                    }\r\n                    return null;\r\n                }\r\n                var ni = this.elements.length, ki = ni, i, nj, kj = M[0].length, j;\r\n                var cols = this.elements[0].length, elements = [], sum, nc, c;\r\n                do {\r\n                    i = ki - ni;\r\n                    elements[i] = [];\r\n                    nj = kj;\r\n                    do {\r\n                        j = kj - nj;\r\n                        sum = new Symbol(0);\r\n                        nc = cols;\r\n                        do {\r\n                            c = cols - nc;\r\n                            sum = _.add(sum, _.multiply(this.elements[i][c], M[c][j]));\r\n                        }\r\n                        while(--nc);\r\n                        elements[i][j] = sum;\r\n                    }\r\n                    while(--nj);\r\n                }\r\n                while(--ni);\r\n                return Matrix.fromArray(elements);\r\n            }, undefined, this);\r\n        },\r\n        add: function (matrix, callback) {\r\n            var M = new Matrix();\r\n            if(this.sameSize(matrix)) {\r\n                this.eachElement(function (e, i, j) {\r\n                    var result = _.add(e.clone(), matrix.elements[i][j].clone());\r\n                    if(callback) {\r\n                        result = callback.call(M, result, e, matrix.elements[i][j]);\r\n                    }\r\n                    M.set(i, j, result);\r\n                });\r\n            }\r\n            return M;\r\n        },\r\n        subtract: function (matrix, callback) {\r\n            var M = new Matrix();\r\n            if(this.sameSize(matrix)) {\r\n                this.eachElement(function (e, i, j) {\r\n                    var result = _.subtract(e.clone(), matrix.elements[i][j].clone());\r\n                    if(callback) {\r\n                        result = callback.call(M, result, e, matrix.elements[i][j]);\r\n                    }\r\n                    M.set(i, j, result);\r\n                });\r\n            }\r\n            return M;\r\n        },\r\n        negate: function () {\r\n            this.each(function (e) {\r\n                return e.negate();\r\n            });\r\n            return this;\r\n        },\r\n        toVector: function () {\r\n            if(this.rows() === 1 || this.cols() === 1) {\r\n                var v = new Vector();\r\n                v.elements = this.elements;\r\n                return v;\r\n            }\r\n            return this;\r\n        },\r\n        toString: function (newline, to_decimal) {\r\n            var l = this.rows(),\r\n                    s = [];\r\n            newline = newline === undefined ? '\\n' : newline;\r\n            for(var i = 0; i < l; i++) {\r\n                s.push('[' + this.elements[i].map(function (x) {\r\n                    var v = to_decimal ? x.multiplier.toDecimal() : x.toString();\r\n                    return x !== undefined ? v : '';\r\n                }).join(',') + ']');\r\n            }\r\n            return 'matrix' + inBrackets(s.join(','));\r\n        },\r\n        text: function () {\r\n            return 'matrix(' + this.elements.toString('') + ')';\r\n        },\r\n        latex: function (option) {\r\n            var cols = this.cols(), elements = this.elements;\r\n            return format('\\\\begin{vmatrix}{0}\\\\end{vmatrix}', function () {\r\n                var tex = [];\r\n                for(var row in elements) {\r\n                    var row_tex = [];\r\n                    for(var i = 0; i < cols; i++) {\r\n                        row_tex.push(LaTeX.latex.call(LaTeX, elements[row][i], option));\r\n                    }\r\n                    tex.push(row_tex.join(' & '));\r\n                }\r\n                return tex.join(' \\\\cr ');\r\n            });\r\n        }\r\n    };\r\n    // aliases\r\n    Matrix.prototype.each = Matrix.prototype.eachElement;\r\n\r\n\r\n    function Set(set) {\r\n        this.elements = [];\r\n        // if the first object isn't an array, convert it to one.\r\n        if(!isVector(set))\r\n            set = Vector.fromArray(arguments);\r\n\r\n        if(set) {\r\n            var elements = set.elements;\r\n            for(var i = 0, l = elements.length; i < l; i++) {\r\n                this.add(elements[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    Set.fromArray = function (arr) {\r\n        function F(args) {\r\n            return Set.apply(this, args);\r\n        }\r\n        F.prototype = Set.prototype;\r\n\r\n        return new F(arr);\r\n    };\r\n\r\n    Set.prototype = {\r\n        add: function (x) {\r\n            if(!this.contains(x))\r\n                this.elements.push(x.clone());\r\n        },\r\n        contains: function (x) {\r\n            for(var i = 0; i < this.elements.length; i++) {\r\n                var e = this.elements[i];\r\n                if(x.equals(e))\r\n                    return true;\r\n            }\r\n            return false;\r\n        },\r\n        each: function (f) {\r\n            var elements = this.elements;\r\n            var set = new Set();\r\n            for(var i = 0, l = elements.length; i < l; i++) {\r\n                var e = elements[i];\r\n                f.call(this, e, set, i);\r\n            }\r\n            return set;\r\n        },\r\n        clone: function () {\r\n            var set = new Set();\r\n            this.each(function (e) {\r\n                set.add(e.clone());\r\n            });\r\n            return set;\r\n        },\r\n        union: function (set) {\r\n            var _union = this.clone();\r\n            set.each(function (e) {\r\n                _union.add(e);\r\n            });\r\n\r\n            return _union;\r\n        },\r\n        difference: function (set) {\r\n            var diff = this.clone();\r\n            set.each(function (e) {\r\n                diff.remove(e);\r\n            });\r\n            return diff;\r\n        },\r\n        remove: function (element) {\r\n            for(var i = 0, l = this.elements.length; i < l; i++) {\r\n                var e = this.elements[i];\r\n                if(e.equals(element)) {\r\n                    remove(this.elements, i);\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        },\r\n        intersection: function (set) {\r\n            var _intersection = new Set();\r\n            var A = this;\r\n            set.each(function (e) {\r\n                if(A.contains(e)) {\r\n                    _intersection.add(e);\r\n                }\r\n                ;\r\n            });\r\n\r\n            return _intersection;\r\n        },\r\n        intersects: function (set) {\r\n            return this.intersection(set).elements.length > 0;\r\n        },\r\n        is_subset: function (set) {\r\n            var elements = set.elements;\r\n            for(var i = 0, l = elements.length; i < l; i++) {\r\n                if(!this.contains(elements[i])) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        },\r\n        toString: function () {\r\n            return '{' + this.elements.join(',') + '}';\r\n        }\r\n    };\r\n\r\n//build ========================================================================\r\n    var Build = {\r\n        dependencies: {\r\n            _rename: {\r\n                'Math2.factorial': 'factorial'\r\n            },\r\n            factorial: {\r\n                'Math2.gamma': Math2.gamma\r\n            },\r\n            gamma_incomplete: {\r\n                'Math2.factorial': Math2.factorial\r\n            },\r\n            Li: {\r\n                'Math2.Ei': Math2.Ei,\r\n                'Math2.bigLog': Math2.bigLog,\r\n                'Frac': Frac\r\n            },\r\n            Ci: {\r\n                'Math2.factorial': Math2.factorial\r\n            },\r\n            Ei: {\r\n                'Math2.factorial': Math2.factorial\r\n            },\r\n            Si: {\r\n                'Math2.factorial': Math2.factorial\r\n            },\r\n            Shi: {\r\n                'Math2.factorial': Math2.factorial\r\n            },\r\n            Chi: {\r\n                'isInt': isInt,\r\n                'nround': nround,\r\n                'Math2.num_integrate': Math2.num_integrate\r\n            },\r\n            factor: {\r\n                'Math2.ifactor': Math2.ifactor,\r\n                'Symbol': Symbol\r\n            },\r\n            num_integrate: {\r\n                'Math2.simpson': Math2.simpson,\r\n                'nround': nround\r\n            },\r\n            fib: {\r\n                'even': even\r\n            }\r\n        },\r\n        /* Some functions need to be made numeric safe. Build checks if there's a\r\n         * reformat option and calls that instead when compiling the function string.\r\n         */\r\n        reformat: {\r\n            // this simply extends the build function\r\n            diff: function (symbol, deps) {\r\n                var v = symbol.args[1].toString();\r\n                var f = 'var f = ' + Build.build(symbol.args[0].toString(), [v]) + ';';\r\n                deps[1] += 'var diff = ' + Math2.diff.toString() + ';';\r\n                deps[1] += f;\r\n\r\n                return ['diff(f)(' + v + ')', deps];\r\n            }\r\n        },\r\n        getProperName: function (f) {\r\n            var map = {\r\n                continued_fraction: 'continuedFraction'\r\n            };\r\n            return map[f] || f;\r\n        },\r\n        // assumes that dependences are at max 2 levels\r\n        compileDependencies: function (f, deps) {\r\n            // grab the predefined dependiences\r\n            var dependencies = Build.dependencies[f];\r\n\r\n            // the dependency string\r\n            var dep_string = deps && deps[1] ? deps[1] : '';\r\n\r\n            // the functions to be replaced\r\n            var replacements = deps && deps[0] ? deps[0] : {};\r\n\r\n            // loop through them and add them to the list\r\n            for(var x in dependencies) {\r\n                if(typeof dependencies[x] === 'object')\r\n                    continue; // skip object\r\n                var components = x.split('.'); //Math.f becomes f\r\n                // if the function isn't part of an object then reference the function itself\r\n                dep_string += 'var ' + (components.length > 1 ? components[1] : components[0]) + '=' + dependencies[x] + ';';\r\n                replacements[x] = components.pop();\r\n            }\r\n\r\n            return [replacements, dep_string];\r\n        },\r\n        getArgsDeps: function (symbol, dependencies) {\r\n            var args = symbol.args;\r\n            for(var i = 0; i < args.length; i++) {\r\n                symbol.args[i].each(function (x) {\r\n                    if(x.group === FN)\r\n                        dependencies = Build.compileDependencies(x.fname, dependencies);\r\n                });\r\n            }\r\n            return dependencies;\r\n        },\r\n        build: function (symbol, arg_array) {\r\n            symbol = block('PARSE2NUMBER', function () {\r\n                return _.parse(symbol);\r\n            }, true);\r\n            var args = variables(symbol);\r\n            var supplements = [];\r\n            var dependencies = [];\r\n            var ftext = function (symbol, xports) {\r\n                //Fix for #545 - Parentheses confuse build.\r\n                if(symbol.fname === '') {\r\n                    symbol = Symbol.unwrapPARENS(symbol);\r\n                }\r\n                xports = xports || [];\r\n                var c = [],\r\n                        group = symbol.group,\r\n                        prefix = '';\r\n\r\n                var ftext_complex = function (group) {\r\n                    var d = group === CB ? '*' : '+',\r\n                            cc = [];\r\n\r\n                    for(var x in symbol.symbols) {\r\n                        var sym = symbol.symbols[x],\r\n                                ft = ftext(sym, xports)[0];\r\n                        // wrap it in brackets if it's group PL or CP\r\n                        if(sym.isComposite())\r\n                            ft = inBrackets(ft);\r\n                        cc.push(ft);\r\n                    }\r\n                    var retval = cc.join(d);\r\n                    retval = retval && !symbol.multiplier.equals(1) ? inBrackets(retval) : retval;\r\n                    return retval;\r\n                },\r\n                        ftext_function = function (bn) {\r\n                            var retval;\r\n                            if(bn in Math)\r\n                                retval = 'Math.' + bn;\r\n                            else {\r\n                                bn = Build.getProperName(bn);\r\n                                if(supplements.indexOf(bn) === -1) { // make sure you're not adding the function twice\r\n                                    //Math2 functions aren't part of the standard javascript\r\n                                    //Math library and must be exported.\r\n                                    xports.push('var ' + bn + ' = ' + Math2[bn].toString() + '; ');\r\n                                    supplements.push(bn);\r\n                                }\r\n                                retval = bn;\r\n                            }\r\n                            retval = retval + inBrackets(symbol.args.map(function (x) {\r\n                                return ftext(x, xports)[0];\r\n                            }).join(','));\r\n\r\n                            return retval;\r\n                        };\r\n\r\n                // the multiplier\r\n                if(group === N)\r\n                    c.push(symbol.multiplier.toDecimal());\r\n                else if(symbol.multiplier.equals(-1))\r\n                    prefix = '-';\r\n                else if(!symbol.multiplier.equals(1))\r\n                    c.push(symbol.multiplier.toDecimal());\r\n                // the value\r\n                var value;\r\n\r\n                if(group === S || group === P)\r\n                    value = symbol.value;\r\n                else if(group === FN) {\r\n                    dependencies = Build.compileDependencies(symbol.fname, dependencies);\r\n                    dependencies = Build.getArgsDeps(symbol, dependencies);\r\n                    if(Build.reformat[symbol.fname]) {\r\n                        var components = Build.reformat[symbol.fname](symbol, dependencies);\r\n                        dependencies = components[1];\r\n                        value = components[0];\r\n                    }\r\n                    else {\r\n                        value = ftext_function(symbol.fname);\r\n                    }\r\n\r\n                }\r\n                else if(group === EX) {\r\n                    var pg = symbol.previousGroup;\r\n                    if(pg === N || pg === S)\r\n                        value = symbol.value;\r\n                    else if(pg === FN) {\r\n                        value = ftext_function(symbol.fname);\r\n                        dependencies = Build.compileDependencies(symbol.fname, dependencies);\r\n                        dependencies = Build.getArgsDeps(symbol, dependencies);\r\n                    }\r\n                    else\r\n                        value = ftext_complex(symbol.previousGroup);\r\n                }\r\n                else {\r\n                    value = ftext_complex(symbol.group);\r\n                }\r\n\r\n                if(symbol.group !== N && !symbol.power.equals(1)) {\r\n                    var pow = ftext(_.parse(symbol.power));\r\n                    xports.push(pow[1]);\r\n                    value = 'Math.pow' + inBrackets(value + ',' + pow[0]);\r\n                }\r\n\r\n                if(value)\r\n                    c.push(prefix + value);\r\n\r\n                return [c.join('*'), xports.join('').replace(/\\n+\\s+/g, ' ')];\r\n            };\r\n            if(arg_array) {\r\n                // Fix for issue #546\r\n                // Disable argument checking since it's a bit presumptuous.\r\n                // Consider f(x) = 5; If I explicitely pass in an argument array contain x \r\n                // this check will fail and complain since the function doesn't contain x.\r\n                /*\r\n                 for (var i = 0; i < args.length; i++) {\r\n                 var arg = args[i];\r\n                 if (arg_array.indexOf(arg) === -1)\r\n                 err(arg + ' not found in argument array');\r\n                 }\r\n                 */\r\n                args = arg_array;\r\n            }\r\n\r\n            var f_array = ftext(symbol);\r\n\r\n            // make all the substitutions;\r\n            for(var x in dependencies[0]) {\r\n                var alias = dependencies[0][x];\r\n                f_array[1] = f_array[1].replace(x, alias);\r\n                dependencies[1] = dependencies[1].replace(x, alias);\r\n            }\r\n\r\n            var f = new Function(args, (dependencies[1] || '') + f_array[1] + ' return ' + f_array[0] + ';');\r\n\r\n            return f;\r\n        }\r\n    };\r\n\r\n\r\n//finalize =====================================================================\r\n    /* FINALIZE */\r\n    (function () {\r\n        reserveNames(_.CONSTANTS);\r\n        reserveNames(_.functions);\r\n        _.initConstants();\r\n        //bug fix for error but needs to be revisited\r\n        if(!_.error)\r\n            _.error = err;\r\n\r\n        //Store the log and log10 functions\r\n        Settings.LOG_FNS = {\r\n            log: _.functions['log'],\r\n            log10: _.functions['log10']\r\n        };\r\n\r\n    })();\r\n\r\n    /* END FINALIZE */\r\n\r\n//Core =========================================================================\r\n    var Utils = {\r\n        allSame: allSame,\r\n        allNumeric: allNumeric,\r\n        arguments2Array: arguments2Array,\r\n        arrayAddSlices: arrayAddSlices,\r\n        arrayClone: arrayClone,\r\n        arrayMax: arrayMax,\r\n        arrayMin: arrayMin,\r\n        arrayEqual: arrayEqual,\r\n        arrayUnique: arrayUnique,\r\n        arrayGetVariables: arrayGetVariables,\r\n        arraySum: arraySum,\r\n        block: block,\r\n        build: Build.build,\r\n        clearU: clearU,\r\n        comboSort: comboSort,\r\n        compare: compare,\r\n        convertToVector: convertToVector,\r\n        customError: customError,\r\n        customType: customType,\r\n        decompose_fn: decompose_fn,\r\n        each: each,\r\n        evaluate: evaluate,\r\n        even: even,\r\n        evenFraction: evenFraction,\r\n        fillHoles: fillHoles,\r\n        firstObject: firstObject,\r\n        format: format,\r\n        generatePrimes: generatePrimes,\r\n        getCoeffs: getCoeffs,\r\n        getU: getU,\r\n        importFunctions: importFunctions,\r\n        inBrackets: inBrackets,\r\n        isArray: isArray,\r\n        isExpression: isExpression,\r\n        isFraction: isFraction,\r\n        isInt: isInt,\r\n        isMatrix: isMatrix,\r\n        isNegative: isNegative,\r\n        isNumericSymbol: isNumericSymbol,\r\n        isPrime: isPrime,\r\n        isReserved: isReserved,\r\n        isSymbol: isSymbol,\r\n        isVariableSymbol: isVariableSymbol,\r\n        isVector: isVector,\r\n        keys: keys,\r\n        knownVariable: knownVariable,\r\n        nroots: nroots,\r\n        remove: remove,\r\n        reserveNames: reserveNames,\r\n        range: range,\r\n        round: nround,\r\n        sameSign: sameSign,\r\n        scientificToDecimal: scientificToDecimal,\r\n        separate: separate,\r\n        stringReplace: stringReplace,\r\n        text: text,\r\n        validateName: validateName,\r\n        variables: variables,\r\n        warn: warn\r\n    };\r\n\r\n    //This contains all the parts of nerdamer and enables nerdamer's internal functions\r\n    //to be used.\r\n    var C = {\r\n        groups: Groups,\r\n        Symbol: Symbol,\r\n        Expression: Expression,\r\n        Frac: Frac,\r\n        Vector: Vector,\r\n        Matrix: Matrix,\r\n        Parser: Parser,\r\n        Scientific: Scientific,\r\n        Fraction: Fraction,\r\n        Math2: Math2,\r\n        LaTeX: LaTeX,\r\n        Utils: Utils,\r\n        PARSER: _,\r\n        PARENTHESIS: PARENTHESIS,\r\n        Settings: Settings,\r\n        err: err,\r\n        bigInt: bigInt,\r\n        bigDec: bigDec,\r\n        exceptions: exceptions\r\n    };\r\n\r\n//libExports ===================================================================\r\n    /**\r\n     *\r\n     * @param {String} expression the expression to be evaluated\r\n     * @param {Object} subs the object containing the variable values\r\n     * @param {Integer} location a specific location in the equation list to\r\n     * insert the evaluated expression\r\n     * @param {String} option additional options\r\n     * @returns {Expression}\r\n     */\r\n    var libExports = function (expression, subs, option, location) {\r\n        // Initiate the numer flag\r\n        var numer = false;\r\n\r\n        // Is the user declaring a function?\r\n        var fndec = /^([a-z_][a-z\\d\\_]*)\\(([a-z_,\\s]*)\\):=(.+)$/gi.exec(expression);\r\n        if(fndec)\r\n            return nerdamer.setFunction(fndec[1], fndec[2].split(','), fndec[3]);\r\n\r\n        // var variable, fn, args;\r\n        // Convert any expression passed in to a string\r\n        if(expression instanceof Expression)\r\n            expression = expression.toString();\r\n\r\n        // Convert it to an array for simplicity\r\n        if(!isArray(option)) {\r\n            option = typeof option === 'undefined' ? [] : [option];\r\n        }\r\n\r\n        option.forEach(function (o) {\r\n            // Turn on the numer flag if requested\r\n            if(o === 'numer') {\r\n                numer = true;\r\n                return;\r\n            }\r\n            // Wrap it in a function if requested. This only holds true for\r\n            // functions that take a single argument which is the expression\r\n            var f = _.functions[option];\r\n            // If there's a function and it takes a single argument, then wrap\r\n            // the expression in it\r\n            if(f && f[1] === 1) {\r\n                expression = `${o}(${expression})`;\r\n            }\r\n        });\r\n\r\n        var e = block('PARSE2NUMBER', function () {\r\n            return _.parse(expression, subs);\r\n        }, numer || Settings.PARSE2NUMBER);\r\n\r\n        if(location) {\r\n            EXPRESSIONS[location - 1] = e;\r\n        }\r\n        else {\r\n            EXPRESSIONS.push(e);\r\n        }\r\n\r\n        return new Expression(e);\r\n    };\r\n    /**\r\n     * Converts expression into rpn form\r\n     * @param {String} expression\r\n     * @returns {Token[]}\r\n     */\r\n    libExports.rpn = function (expression) {\r\n        return _.tokenize(_.toRPN(expression));\r\n    };\r\n\r\n    /**\r\n     * Generates LaTeX from expression string\r\n     * @param {String} e\r\n     * @param {object} opt\r\n     * @returns {String}\r\n     */\r\n    libExports.convertToLaTeX = function (e, opt) {\r\n        return _.toTeX(e, opt);\r\n    };\r\n\r\n    /**\r\n     * Converts latex to text - Very very very basic at the moment\r\n     * @param {String} e\r\n     * @returns {String}\r\n     */\r\n    libExports.convertFromLaTeX = function (e) {\r\n        var txt = LaTeX.parse(_.tokenize(e));\r\n        return new Expression(_.parse(txt));\r\n    };\r\n\r\n    /**\r\n     * Get the version of nerdamer or a loaded add-on\r\n     * @param {String} add_on - The add-on being checked\r\n     * @returns {String} returns the version of nerdamer\r\n     */\r\n    libExports.version = function (add_on) {\r\n        if(add_on) {\r\n            try {\r\n                return C[add_on].version;\r\n            }\r\n            catch(e) {\r\n                return \"No module named \" + add_on + \" found!\";\r\n            }\r\n        }\r\n        return version;\r\n    };\r\n\r\n    /**\r\n     * Get nerdamer generated warnings\r\n     * @returns {String[]}\r\n     */\r\n    libExports.getWarnings = function () {\r\n        return WARNINGS;\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param {String} constant The name of the constant to be set\r\n     * @param {mixed} value The value of the constant\r\n     * @returns {Object} Returns the nerdamer object\r\n     */\r\n    libExports.setConstant = function (constant, value) {\r\n        validateName(constant);\r\n        if(!isReserved(constant)) {\r\n            //fix for issue #127\r\n            if(value === 'delete' || value === '') {\r\n                delete _.CONSTANTS[constant];\r\n            }\r\n            else {\r\n                if(isNaN(value))\r\n                    throw new NerdamerTypeError('Constant must be a number!');\r\n                _.CONSTANTS[constant] = value;\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Returns the value of a previously set constant\r\n     * @param {type} constant\r\n     * @returns {String}\r\n     */\r\n    libExports.getConstant = function (constant) {\r\n        return String(_.constant[constant]);\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param {String} name The name of the function\r\n     * @param {Array} params_array A list containing the parameter name of the functions\r\n     * @param {String} body The body of the function\r\n     * @returns {Boolean} returns true if succeeded and falls on fail\r\n     * @example nerdamer.setFunction('f',['x'], 'x^2+2');\r\n     */\r\n    libExports.setFunction = setFunction;\r\n\r\n    /**\r\n     *\r\n     * @returns {C} Exports the nerdamer core functions and objects\r\n     */\r\n    libExports.getCore = function () {\r\n        return C;\r\n    };\r\n\r\n    libExports.getExpression = libExports.getEquation = Expression.getExpression;\r\n\r\n    /**\r\n     *\r\n     * @param {Boolean} asArray The returned names are returned as an array if this is set to true;\r\n     * @returns {String|Array}\r\n     */\r\n    libExports.reserved = function (asArray) {\r\n        if(asArray) {\r\n            return RESERVED;\r\n        }\r\n        return RESERVED.join(', ');\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param {Integer} equation_number the number of the equation to clear.\r\n     * If 'all' is supplied then all equations are cleared\r\n     * @param {Boolean} keep_EXPRESSIONS_fixed use true if you don't want to keep EXPRESSIONS length fixed\r\n     * @returns {Object} Returns the nerdamer object\r\n     */\r\n    libExports.clear = function (equation_number, keep_EXPRESSIONS_fixed) {\r\n        if(equation_number === 'all') {\r\n            EXPRESSIONS = [];\r\n        }\r\n        else if(equation_number === 'last') {\r\n            EXPRESSIONS.pop();\r\n        }\r\n        else if(equation_number === 'first') {\r\n            EXPRESSIONS.shift();\r\n        }\r\n        else {\r\n            var index = !equation_number ? EXPRESSIONS.length : equation_number - 1;\r\n            keep_EXPRESSIONS_fixed === true ? EXPRESSIONS[index] = undefined : remove(EXPRESSIONS, index);\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Alias for nerdamer.clear('all')\r\n     */\r\n    libExports.flush = function () {\r\n        this.clear('all');\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param {Boolean} asObject\r\n     * @param {Boolean} asLaTeX\r\n     * @param {String|String[]} option\r\n     * @returns {Array}\r\n     */\r\n    libExports.expressions = function (asObject, asLaTeX, option) {\r\n        var result = asObject ? {} : [];\r\n        for(var i = 0; i < EXPRESSIONS.length; i++) {\r\n            var eq = asLaTeX ? LaTeX.latex(EXPRESSIONS[i], option) : text(EXPRESSIONS[i], option);\r\n            asObject ? result[i + 1] = eq : result.push(eq);\r\n        }\r\n        return result;\r\n    };\r\n\r\n    //the method for registering modules\r\n    libExports.register = function (obj) {\r\n        var core = this.getCore();\r\n\r\n        if(isArray(obj)) {\r\n            for(var i = 0; i < obj.length; i++) {\r\n                if(obj)\r\n                    this.register(obj[i]);\r\n            }\r\n        }\r\n        else if(obj && Settings.exclude.indexOf(obj.name) === -1) {\r\n            //make sure all the dependencies are available\r\n            if(obj.dependencies) {\r\n                for(var i = 0; i < obj.dependencies.length; i++)\r\n                    if(!core[obj.dependencies[i]])\r\n                        throw new Error(format('{0} requires {1} to be loaded!', obj.name, obj.dependencies[i]));\r\n            }\r\n            //if no parent object is provided then the function does not have an address and cannot be called directly\r\n            var parent_obj = obj.parent,\r\n                    fn = obj.build.call(core); //call constructor to get function\r\n            if(parent_obj) {\r\n                if(!core[parent_obj])\r\n                    core[obj.parent] = {};\r\n\r\n                var ref_obj = parent_obj === 'nerdamer' ? this : core[parent_obj];\r\n                //attach the function to the core\r\n                ref_obj[obj.name] = fn;\r\n            }\r\n            if(obj.visible)\r\n                _.functions[obj.name] = [fn, obj.numargs]; //make the function available\r\n\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @param {String} name variable name\r\n     * @returns {boolean} validates if the profided string is a valid variable name\r\n     */\r\n    libExports.validateName = validateName;\r\n\r\n    /**\r\n     * @param {String} varname variable name\r\n     * @returns {boolean} validates if the profided string is a valid variable name\r\n     */\r\n    libExports.validVarName = function (varname) {\r\n        try {\r\n            validateName(varname);\r\n            return RESERVED.indexOf(varname) === -1;\r\n        }\r\n        catch(e) {\r\n            return false;\r\n        }\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @returns {Array} Array of functions currently supported by nerdamer\r\n     */\r\n    libExports.supported = function () {\r\n        return keys(_.functions);\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @returns {Number} The number equations/expressions currently loaded\r\n     */\r\n    libExports.numEquations = libExports.numExpressions = function () {\r\n        return EXPRESSIONS.length;\r\n    };\r\n    /* END EXPORTS */\r\n\r\n    /**\r\n     *\r\n     * @param {String} v variable to be set\r\n     * @param {String} val value of variable. This can be a variable expression or number\r\n     * @returns {Object} Returns the nerdamer object\r\n     */\r\n    libExports.setVar = function (v, val) {\r\n        validateName(v);\r\n        //check if it's not already a constant\r\n        if(v in _.CONSTANTS)\r\n            err('Cannot set value for constant ' + v);\r\n        if(val === 'delete' || val === '')\r\n            delete VARS[v];\r\n        else {\r\n            VARS[v] = isSymbol(val) ? val : _.parse(val);\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Returns the value of a set variable\r\n     * @param {type} v\r\n     * @returns {varies}\r\n     */\r\n    libExports.getVar = function (v) {\r\n        return VARS[v];\r\n    };\r\n    /**\r\n     * Clear the variables from the VARS object\r\n     * @returns {Object} Returns the nerdamer object\r\n     */\r\n    libExports.clearVars = function () {\r\n        VARS = {};\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param {Function} loader\r\n     * @returns {nerdamer}\r\n     */\r\n    libExports.load = function (loader) {\r\n        loader.call(this);\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * @param {String} output - output format. Can be 'object' (just returns the VARS object), 'text' or 'latex'. Default: 'text'\r\n     * @param {String|String[]} option\r\n     * @returns {Object} Returns an object with the variables\r\n     */\r\n    libExports.getVars = function (output, option) {\r\n        output = output || 'text';\r\n        var variables = {};\r\n        if(output === 'object')\r\n            variables = VARS;\r\n        else {\r\n            for(var v in VARS) {\r\n                if(output === 'latex') {\r\n                    variables[v] = VARS[v].latex(option);\r\n                }\r\n                else if(output === 'text') {\r\n                    variables[v] = VARS[v].text(option);\r\n                }\r\n            }\r\n        }\r\n        return variables;\r\n    };\r\n\r\n    /**\r\n     * Set the value of a setting\r\n     * @param {String} setting The setting to be changed\r\n     * @param {boolean} value\r\n     */\r\n    libExports.set = function (setting, value) {\r\n        //current options:\r\n        //PARSE2NUMBER, suppress_errors\r\n        if(typeof setting === 'object')\r\n            for(var x in setting) {\r\n                libExports.set(x, setting[x]);\r\n            }\r\n\r\n        var disallowed = ['SAFE'];\r\n        if(disallowed.indexOf(setting) !== -1)\r\n            err('Cannot modify setting: ' + setting);\r\n\r\n        if(setting === 'PRECISION') {\r\n            bigDec.set({precision: value});\r\n            Settings.PRECISION = value;\r\n\r\n            // Avoid that nerdamer puts out garbage after 21 decimal place\r\n            if(value > 21) {\r\n                this.set('USE_BIG', true);\r\n            }\r\n        }\r\n        else if(setting === 'USE_LN' && value === true) {\r\n            //set log as LN\r\n            Settings.LOG = 'LN';\r\n            //set log10 as log\r\n            Settings.LOG10 = 'log';\r\n            //point the functions in the right direction\r\n            _.functions['log'] = Settings.LOG_FNS.log10; //log is now log10\r\n            //the log10 function must be explicitly set\r\n            _.functions['log'][0] = function (x) {\r\n                if(x.isConstant())\r\n                    return new Symbol(Math.log10(x));\r\n                return _.symfunction(Settings.LOG10, [x]);\r\n            };\r\n            _.functions['LN'] = Settings.LOG_FNS.log; //LN is now log\r\n\r\n            //remove log10\r\n            delete _.functions['log10'];\r\n        }\r\n        else\r\n            Settings[setting] = value;\r\n    };\r\n\r\n    /**\r\n     * Get the value of a setting\r\n     * @param {type} setting\r\n     * @returns {undefined}\r\n     */\r\n    libExports.get = function (setting) {\r\n        return Settings[setting];\r\n    };\r\n\r\n    /**\r\n     * This functions makes internal functions available externally\r\n     * @param {bool} override Override the functions when calling updateAPI if it exists\r\n     */\r\n    libExports.updateAPI = function (override) {\r\n        //Map internal functions to external ones\r\n        var linker = function (fname) {\r\n            return function () {\r\n                var args = [].slice.call(arguments);\r\n                for(var i = 0; i < args.length; i++)\r\n                    args[i] = _.parse(args[i]);\r\n                return new Expression(block('PARSE2NUMBER', function () {\r\n                    return _.callfunction(fname, args);\r\n                }));\r\n            };\r\n        };\r\n        //perform the mapping\r\n        for(var x in _.functions)\r\n            if(!(x in libExports) || override)\r\n                libExports[x] = linker(x);\r\n    };\r\n\r\n    libExports.replaceFunction = function (name, fn, num_args) {\r\n        var existing = _.functions[name];\r\n        var new_num_args = typeof num_args === 'undefined' ? existing[1] : num_args;\r\n        _.functions[name] = [fn.call(undefined, existing[0], C), new_num_args];\r\n    };\r\n\r\n    libExports.setOperator = function (operator, shift) {\r\n        _.setOperator(operator, shift);\r\n    };\r\n\r\n    libExports.getOperator = function (operator) {\r\n        return _.getOperator(operator);\r\n    };\r\n\r\n    libExports.aliasOperator = function (operator, withOperator) {\r\n        _.aliasOperator(operator, withOperator);\r\n    };\r\n\r\n    libExports.tree = function (expression) {\r\n        return _.tree(_.toRPN(_.tokenize(expression)));\r\n    };\r\n\r\n    libExports.htmlTree = function (expression, indent) {\r\n        var tree = this.tree(expression);\r\n\r\n        return '<div class=\"tree\">\\n' +\r\n                '    <ul>\\n' +\r\n                '        <li>\\n' +\r\n                tree.toHTML(3, indent) + '\\n' +\r\n                '        </li>\\n' +\r\n                '    </ul>\\n' +\r\n                '</div>';\r\n    };\r\n\r\n    libExports.addPeeker = function (name, f) {\r\n        if(_.peekers[name])\r\n            _.peekers[name].push(f);\r\n    };\r\n\r\n    libExports.removePeeker = function (name, f) {\r\n        remove(_.peekers[name], f);\r\n    };\r\n\r\n    libExports.parse = function (e) {\r\n        return String(e).split(';').map(function (x) {\r\n            return _.parse(x);\r\n        });\r\n    };\r\n\r\n    libExports.updateAPI();\r\n\r\n    return libExports; //Done\r\n//imports ======================================================================\r\n})({\r\n    //https://github.com/peterolson/BigInteger.js\r\n    bigInt: (function(){\r\n        var bigInt=function(undefined){\"use strict\";var BASE=1e7,LOG_BASE=7,MAX_INT=9007199254740992,MAX_INT_ARR=smallToArray(MAX_INT),LOG_MAX_INT=Math.log(MAX_INT);function Integer(v,radix){if(typeof v===\"undefined\")return Integer[0];if(typeof radix!==\"undefined\")return+radix===10?parseValue(v):parseBase(v,radix);return parseValue(v)}function BigInteger(value,sign){this.value=value;this.sign=sign;this.isSmall=false}BigInteger.prototype=Object.create(Integer.prototype);function SmallInteger(value){this.value=value;this.sign=value<0;this.isSmall=true}SmallInteger.prototype=Object.create(Integer.prototype);function isPrecise(n){return-MAX_INT<n&&n<MAX_INT}function smallToArray(n){if(n<1e7)return[n];if(n<1e14)return[n%1e7,Math.floor(n/1e7)];return[n%1e7,Math.floor(n/1e7)%1e7,Math.floor(n/1e14)]}function arrayToSmall(arr){trim(arr);var length=arr.length;if(length<4&&compareAbs(arr,MAX_INT_ARR)<0){switch(length){case 0:return 0;case 1:return arr[0];case 2:return arr[0]+arr[1]*BASE;default:return arr[0]+(arr[1]+arr[2]*BASE)*BASE}}return arr}function trim(v){var i=v.length;while(v[--i]===0);v.length=i+1}function createArray(length){var x=new Array(length);var i=-1;while(++i<length){x[i]=0}return x}function truncate(n){if(n>0)return Math.floor(n);return Math.ceil(n)}function add(a,b){var l_a=a.length,l_b=b.length,r=new Array(l_a),carry=0,base=BASE,sum,i;for(i=0;i<l_b;i++){sum=a[i]+b[i]+carry;carry=sum>=base?1:0;r[i]=sum-carry*base}while(i<l_a){sum=a[i]+carry;carry=sum===base?1:0;r[i++]=sum-carry*base}if(carry>0)r.push(carry);return r}function addAny(a,b){if(a.length>=b.length)return add(a,b);return add(b,a)}function addSmall(a,carry){var l=a.length,r=new Array(l),base=BASE,sum,i;for(i=0;i<l;i++){sum=a[i]-base+carry;carry=Math.floor(sum/base);r[i]=sum-carry*base;carry+=1}while(carry>0){r[i++]=carry%base;carry=Math.floor(carry/base)}return r}BigInteger.prototype.add=function(v){var n=parseValue(v);if(this.sign!==n.sign){return this.subtract(n.negate())}var a=this.value,b=n.value;if(n.isSmall){return new BigInteger(addSmall(a,Math.abs(b)),this.sign)}return new BigInteger(addAny(a,b),this.sign)};BigInteger.prototype.plus=BigInteger.prototype.add;SmallInteger.prototype.add=function(v){var n=parseValue(v);var a=this.value;if(a<0!==n.sign){return this.subtract(n.negate())}var b=n.value;if(n.isSmall){if(isPrecise(a+b))return new SmallInteger(a+b);b=smallToArray(Math.abs(b))}return new BigInteger(addSmall(b,Math.abs(a)),a<0)};SmallInteger.prototype.plus=SmallInteger.prototype.add;function subtract(a,b){var a_l=a.length,b_l=b.length,r=new Array(a_l),borrow=0,base=BASE,i,difference;for(i=0;i<b_l;i++){difference=a[i]-borrow-b[i];if(difference<0){difference+=base;borrow=1}else borrow=0;r[i]=difference}for(i=b_l;i<a_l;i++){difference=a[i]-borrow;if(difference<0)difference+=base;else{r[i++]=difference;break}r[i]=difference}for(;i<a_l;i++){r[i]=a[i]}trim(r);return r}function subtractAny(a,b,sign){var value;if(compareAbs(a,b)>=0){value=subtract(a,b)}else{value=subtract(b,a);sign=!sign}value=arrayToSmall(value);if(typeof value===\"number\"){if(sign)value=-value;return new SmallInteger(value)}return new BigInteger(value,sign)}function subtractSmall(a,b,sign){var l=a.length,r=new Array(l),carry=-b,base=BASE,i,difference;for(i=0;i<l;i++){difference=a[i]+carry;carry=Math.floor(difference/base);difference%=base;r[i]=difference<0?difference+base:difference}r=arrayToSmall(r);if(typeof r===\"number\"){if(sign)r=-r;return new SmallInteger(r)}return new BigInteger(r,sign)}BigInteger.prototype.subtract=function(v){var n=parseValue(v);if(this.sign!==n.sign){return this.add(n.negate())}var a=this.value,b=n.value;if(n.isSmall)return subtractSmall(a,Math.abs(b),this.sign);return subtractAny(a,b,this.sign)};BigInteger.prototype.minus=BigInteger.prototype.subtract;SmallInteger.prototype.subtract=function(v){var n=parseValue(v);var a=this.value;if(a<0!==n.sign){return this.add(n.negate())}var b=n.value;if(n.isSmall){return new SmallInteger(a-b)}return subtractSmall(b,Math.abs(a),a>=0)};SmallInteger.prototype.minus=SmallInteger.prototype.subtract;BigInteger.prototype.negate=function(){return new BigInteger(this.value,!this.sign)};SmallInteger.prototype.negate=function(){var sign=this.sign;var small=new SmallInteger(-this.value);small.sign=!sign;return small};BigInteger.prototype.abs=function(){return new BigInteger(this.value,false)};SmallInteger.prototype.abs=function(){return new SmallInteger(Math.abs(this.value))};function multiplyLong(a,b){var a_l=a.length,b_l=b.length,l=a_l+b_l,r=createArray(l),base=BASE,product,carry,i,a_i,b_j;for(i=0;i<a_l;++i){a_i=a[i];for(var j=0;j<b_l;++j){b_j=b[j];product=a_i*b_j+r[i+j];carry=Math.floor(product/base);r[i+j]=product-carry*base;r[i+j+1]+=carry}}trim(r);return r}function multiplySmall(a,b){var l=a.length,r=new Array(l),base=BASE,carry=0,product,i;for(i=0;i<l;i++){product=a[i]*b+carry;carry=Math.floor(product/base);r[i]=product-carry*base}while(carry>0){r[i++]=carry%base;carry=Math.floor(carry/base)}return r}function shiftLeft(x,n){var r=[];while(n-- >0)r.push(0);return r.concat(x)}function multiplyKaratsuba(x,y){var n=Math.max(x.length,y.length);if(n<=30)return multiplyLong(x,y);n=Math.ceil(n/2);var b=x.slice(n),a=x.slice(0,n),d=y.slice(n),c=y.slice(0,n);var ac=multiplyKaratsuba(a,c),bd=multiplyKaratsuba(b,d),abcd=multiplyKaratsuba(addAny(a,b),addAny(c,d));var product=addAny(addAny(ac,shiftLeft(subtract(subtract(abcd,ac),bd),n)),shiftLeft(bd,2*n));trim(product);return product}function useKaratsuba(l1,l2){return-.012*l1-.012*l2+15e-6*l1*l2>0}BigInteger.prototype.multiply=function(v){var n=parseValue(v),a=this.value,b=n.value,sign=this.sign!==n.sign,abs;if(n.isSmall){if(b===0)return Integer[0];if(b===1)return this;if(b===-1)return this.negate();abs=Math.abs(b);if(abs<BASE){return new BigInteger(multiplySmall(a,abs),sign)}b=smallToArray(abs)}if(useKaratsuba(a.length,b.length))return new BigInteger(multiplyKaratsuba(a,b),sign);return new BigInteger(multiplyLong(a,b),sign)};BigInteger.prototype.times=BigInteger.prototype.multiply;function multiplySmallAndArray(a,b,sign){if(a<BASE){return new BigInteger(multiplySmall(b,a),sign)}return new BigInteger(multiplyLong(b,smallToArray(a)),sign)}SmallInteger.prototype._multiplyBySmall=function(a){if(isPrecise(a.value*this.value)){return new SmallInteger(a.value*this.value)}return multiplySmallAndArray(Math.abs(a.value),smallToArray(Math.abs(this.value)),this.sign!==a.sign)};BigInteger.prototype._multiplyBySmall=function(a){if(a.value===0)return Integer[0];if(a.value===1)return this;if(a.value===-1)return this.negate();return multiplySmallAndArray(Math.abs(a.value),this.value,this.sign!==a.sign)};SmallInteger.prototype.multiply=function(v){return parseValue(v)._multiplyBySmall(this)};SmallInteger.prototype.times=SmallInteger.prototype.multiply;function square(a){var l=a.length,r=createArray(l+l),base=BASE,product,carry,i,a_i,a_j;for(i=0;i<l;i++){a_i=a[i];carry=0-a_i*a_i;for(var j=i;j<l;j++){a_j=a[j];product=2*(a_i*a_j)+r[i+j]+carry;carry=Math.floor(product/base);r[i+j]=product-carry*base}r[i+l]=carry}trim(r);return r}BigInteger.prototype.square=function(){return new BigInteger(square(this.value),false)};SmallInteger.prototype.square=function(){var value=this.value*this.value;if(isPrecise(value))return new SmallInteger(value);return new BigInteger(square(smallToArray(Math.abs(this.value))),false)};function divMod1(a,b){var a_l=a.length,b_l=b.length,base=BASE,result=createArray(b.length),divisorMostSignificantDigit=b[b_l-1],lambda=Math.ceil(base/(2*divisorMostSignificantDigit)),remainder=multiplySmall(a,lambda),divisor=multiplySmall(b,lambda),quotientDigit,shift,carry,borrow,i,l,q;if(remainder.length<=a_l)remainder.push(0);divisor.push(0);divisorMostSignificantDigit=divisor[b_l-1];for(shift=a_l-b_l;shift>=0;shift--){quotientDigit=base-1;if(remainder[shift+b_l]!==divisorMostSignificantDigit){quotientDigit=Math.floor((remainder[shift+b_l]*base+remainder[shift+b_l-1])/divisorMostSignificantDigit)}carry=0;borrow=0;l=divisor.length;for(i=0;i<l;i++){carry+=quotientDigit*divisor[i];q=Math.floor(carry/base);borrow+=remainder[shift+i]-(carry-q*base);carry=q;if(borrow<0){remainder[shift+i]=borrow+base;borrow=-1}else{remainder[shift+i]=borrow;borrow=0}}while(borrow!==0){quotientDigit-=1;carry=0;for(i=0;i<l;i++){carry+=remainder[shift+i]-base+divisor[i];if(carry<0){remainder[shift+i]=carry+base;carry=0}else{remainder[shift+i]=carry;carry=1}}borrow+=carry}result[shift]=quotientDigit}remainder=divModSmall(remainder,lambda)[0];return[arrayToSmall(result),arrayToSmall(remainder)]}function divMod2(a,b){var a_l=a.length,b_l=b.length,result=[],part=[],base=BASE,guess,xlen,highx,highy,check;while(a_l){part.unshift(a[--a_l]);trim(part);if(compareAbs(part,b)<0){result.push(0);continue}xlen=part.length;highx=part[xlen-1]*base+part[xlen-2];highy=b[b_l-1]*base+b[b_l-2];if(xlen>b_l){highx=(highx+1)*base}guess=Math.ceil(highx/highy);do{check=multiplySmall(b,guess);if(compareAbs(check,part)<=0)break;guess--}while(guess);result.push(guess);part=subtract(part,check)}result.reverse();return[arrayToSmall(result),arrayToSmall(part)]}function divModSmall(value,lambda){var length=value.length,quotient=createArray(length),base=BASE,i,q,remainder,divisor;remainder=0;for(i=length-1;i>=0;--i){divisor=remainder*base+value[i];q=truncate(divisor/lambda);remainder=divisor-q*lambda;quotient[i]=q|0}return[quotient,remainder|0]}function divModAny(self,v){var value,n=parseValue(v);var a=self.value,b=n.value;var quotient;if(b===0)throw new Error(\"Cannot divide by zero\");if(self.isSmall){if(n.isSmall){return[new SmallInteger(truncate(a/b)),new SmallInteger(a%b)]}return[Integer[0],self]}if(n.isSmall){if(b===1)return[self,Integer[0]];if(b==-1)return[self.negate(),Integer[0]];var abs=Math.abs(b);if(abs<BASE){value=divModSmall(a,abs);quotient=arrayToSmall(value[0]);var remainder=value[1];if(self.sign)remainder=-remainder;if(typeof quotient===\"number\"){if(self.sign!==n.sign)quotient=-quotient;return[new SmallInteger(quotient),new SmallInteger(remainder)]}return[new BigInteger(quotient,self.sign!==n.sign),new SmallInteger(remainder)]}b=smallToArray(abs)}var comparison=compareAbs(a,b);if(comparison===-1)return[Integer[0],self];if(comparison===0)return[Integer[self.sign===n.sign?1:-1],Integer[0]];if(a.length+b.length<=200)value=divMod1(a,b);else value=divMod2(a,b);quotient=value[0];var qSign=self.sign!==n.sign,mod=value[1],mSign=self.sign;if(typeof quotient===\"number\"){if(qSign)quotient=-quotient;quotient=new SmallInteger(quotient)}else quotient=new BigInteger(quotient,qSign);if(typeof mod===\"number\"){if(mSign)mod=-mod;mod=new SmallInteger(mod)}else mod=new BigInteger(mod,mSign);return[quotient,mod]}BigInteger.prototype.divmod=function(v){var result=divModAny(this,v);return{quotient:result[0],remainder:result[1]}};SmallInteger.prototype.divmod=BigInteger.prototype.divmod;BigInteger.prototype.divide=function(v){return divModAny(this,v)[0]};SmallInteger.prototype.over=SmallInteger.prototype.divide=BigInteger.prototype.over=BigInteger.prototype.divide;BigInteger.prototype.mod=function(v){return divModAny(this,v)[1]};SmallInteger.prototype.remainder=SmallInteger.prototype.mod=BigInteger.prototype.remainder=BigInteger.prototype.mod;BigInteger.prototype.pow=function(v){var n=parseValue(v),a=this.value,b=n.value,value,x,y;if(b===0)return Integer[1];if(a===0)return Integer[0];if(a===1)return Integer[1];if(a===-1)return n.isEven()?Integer[1]:Integer[-1];if(n.sign){return Integer[0]}if(!n.isSmall)throw new Error(\"The exponent \"+n.toString()+\" is too large.\");if(this.isSmall){if(isPrecise(value=Math.pow(a,b)))return new SmallInteger(truncate(value))}x=this;y=Integer[1];while(true){if(b&1===1){y=y.times(x);--b}if(b===0)break;b/=2;x=x.square()}return y};SmallInteger.prototype.pow=BigInteger.prototype.pow;BigInteger.prototype.modPow=function(exp,mod){exp=parseValue(exp);mod=parseValue(mod);if(mod.isZero())throw new Error(\"Cannot take modPow with modulus 0\");var r=Integer[1],base=this.mod(mod);while(exp.isPositive()){if(base.isZero())return Integer[0];if(exp.isOdd())r=r.multiply(base).mod(mod);exp=exp.divide(2);base=base.square().mod(mod)}return r};SmallInteger.prototype.modPow=BigInteger.prototype.modPow;function compareAbs(a,b){if(a.length!==b.length){return a.length>b.length?1:-1}for(var i=a.length-1;i>=0;i--){if(a[i]!==b[i])return a[i]>b[i]?1:-1}return 0}BigInteger.prototype.compareAbs=function(v){var n=parseValue(v),a=this.value,b=n.value;if(n.isSmall)return 1;return compareAbs(a,b)};SmallInteger.prototype.compareAbs=function(v){var n=parseValue(v),a=Math.abs(this.value),b=n.value;if(n.isSmall){b=Math.abs(b);return a===b?0:a>b?1:-1}return-1};BigInteger.prototype.compare=function(v){if(v===Infinity){return-1}if(v===-Infinity){return 1}var n=parseValue(v),a=this.value,b=n.value;if(this.sign!==n.sign){return n.sign?1:-1}if(n.isSmall){return this.sign?-1:1}return compareAbs(a,b)*(this.sign?-1:1)};BigInteger.prototype.compareTo=BigInteger.prototype.compare;SmallInteger.prototype.compare=function(v){if(v===Infinity){return-1}if(v===-Infinity){return 1}var n=parseValue(v),a=this.value,b=n.value;if(n.isSmall){return a==b?0:a>b?1:-1}if(a<0!==n.sign){return a<0?-1:1}return a<0?1:-1};SmallInteger.prototype.compareTo=SmallInteger.prototype.compare;BigInteger.prototype.equals=function(v){return this.compare(v)===0};SmallInteger.prototype.eq=SmallInteger.prototype.equals=BigInteger.prototype.eq=BigInteger.prototype.equals;BigInteger.prototype.notEquals=function(v){return this.compare(v)!==0};SmallInteger.prototype.neq=SmallInteger.prototype.notEquals=BigInteger.prototype.neq=BigInteger.prototype.notEquals;BigInteger.prototype.greater=function(v){return this.compare(v)>0};SmallInteger.prototype.gt=SmallInteger.prototype.greater=BigInteger.prototype.gt=BigInteger.prototype.greater;BigInteger.prototype.lesser=function(v){return this.compare(v)<0};SmallInteger.prototype.lt=SmallInteger.prototype.lesser=BigInteger.prototype.lt=BigInteger.prototype.lesser;BigInteger.prototype.greaterOrEquals=function(v){return this.compare(v)>=0};SmallInteger.prototype.geq=SmallInteger.prototype.greaterOrEquals=BigInteger.prototype.geq=BigInteger.prototype.greaterOrEquals;BigInteger.prototype.lesserOrEquals=function(v){return this.compare(v)<=0};SmallInteger.prototype.leq=SmallInteger.prototype.lesserOrEquals=BigInteger.prototype.leq=BigInteger.prototype.lesserOrEquals;BigInteger.prototype.isEven=function(){return(this.value[0]&1)===0};SmallInteger.prototype.isEven=function(){return(this.value&1)===0};BigInteger.prototype.isOdd=function(){return(this.value[0]&1)===1};SmallInteger.prototype.isOdd=function(){return(this.value&1)===1};BigInteger.prototype.isPositive=function(){return!this.sign};SmallInteger.prototype.isPositive=function(){return this.value>0};BigInteger.prototype.isNegative=function(){return this.sign};SmallInteger.prototype.isNegative=function(){return this.value<0};BigInteger.prototype.isUnit=function(){return false};SmallInteger.prototype.isUnit=function(){return Math.abs(this.value)===1};BigInteger.prototype.isZero=function(){return false};SmallInteger.prototype.isZero=function(){return this.value===0};BigInteger.prototype.isDivisibleBy=function(v){var n=parseValue(v);var value=n.value;if(value===0)return false;if(value===1)return true;if(value===2)return this.isEven();return this.mod(n).equals(Integer[0])};SmallInteger.prototype.isDivisibleBy=BigInteger.prototype.isDivisibleBy;function isBasicPrime(v){var n=v.abs();if(n.isUnit())return false;if(n.equals(2)||n.equals(3)||n.equals(5))return true;if(n.isEven()||n.isDivisibleBy(3)||n.isDivisibleBy(5))return false;if(n.lesser(49))return true}function millerRabinTest(n,a){var nPrev=n.prev(),b=nPrev,r=0,d,t,i,x;while(b.isEven())b=b.divide(2),r++;next:for(i=0;i<a.length;i++){if(n.lesser(a[i]))continue;x=bigInt(a[i]).modPow(b,n);if(x.equals(Integer[1])||x.equals(nPrev))continue;for(d=r-1;d!=0;d--){x=x.square().mod(n);if(x.isUnit())return false;if(x.equals(nPrev))continue next}return false}return true}BigInteger.prototype.isPrime=function(strict){var isPrime=isBasicPrime(this);if(isPrime!==undefined)return isPrime;var n=this.abs();var bits=n.bitLength();if(bits<=64)return millerRabinTest(n,[2,325,9375,28178,450775,9780504,1795265022]);var logN=Math.log(2)*bits;var t=Math.ceil(strict===true?2*Math.pow(logN,2):logN);for(var a=[],i=0;i<t;i++){a.push(bigInt(i+2))}return millerRabinTest(n,a)};SmallInteger.prototype.isPrime=BigInteger.prototype.isPrime;BigInteger.prototype.isProbablePrime=function(iterations){var isPrime=isBasicPrime(this);if(isPrime!==undefined)return isPrime;var n=this.abs();var t=iterations===undefined?5:iterations;for(var a=[],i=0;i<t;i++){a.push(bigInt.randBetween(2,n.minus(2)))}return millerRabinTest(n,a)};SmallInteger.prototype.isProbablePrime=BigInteger.prototype.isProbablePrime;BigInteger.prototype.modInv=function(n){var t=bigInt.zero,newT=bigInt.one,r=parseValue(n),newR=this.abs(),q,lastT,lastR;while(!newR.equals(bigInt.zero)){q=r.divide(newR);lastT=t;lastR=r;t=newT;r=newR;newT=lastT.subtract(q.multiply(newT));newR=lastR.subtract(q.multiply(newR))}if(!r.equals(1))throw new Error(this.toString()+\" and \"+n.toString()+\" are not co-prime\");if(t.compare(0)===-1){t=t.add(n)}if(this.isNegative()){return t.negate()}return t};SmallInteger.prototype.modInv=BigInteger.prototype.modInv;BigInteger.prototype.next=function(){var value=this.value;if(this.sign){return subtractSmall(value,1,this.sign)}return new BigInteger(addSmall(value,1),this.sign)};SmallInteger.prototype.next=function(){var value=this.value;if(value+1<MAX_INT)return new SmallInteger(value+1);return new BigInteger(MAX_INT_ARR,false)};BigInteger.prototype.prev=function(){var value=this.value;if(this.sign){return new BigInteger(addSmall(value,1),true)}return subtractSmall(value,1,this.sign)};SmallInteger.prototype.prev=function(){var value=this.value;if(value-1>-MAX_INT)return new SmallInteger(value-1);return new BigInteger(MAX_INT_ARR,true)};var powersOfTwo=[1];while(2*powersOfTwo[powersOfTwo.length-1]<=BASE)powersOfTwo.push(2*powersOfTwo[powersOfTwo.length-1]);var powers2Length=powersOfTwo.length,highestPower2=powersOfTwo[powers2Length-1];function shift_isSmall(n){return(typeof n===\"number\"||typeof n===\"string\")&&+Math.abs(n)<=BASE||n instanceof BigInteger&&n.value.length<=1}BigInteger.prototype.shiftLeft=function(n){if(!shift_isSmall(n)){throw new Error(String(n)+\" is too large for shifting.\")}n=+n;if(n<0)return this.shiftRight(-n);var result=this;if(result.isZero())return result;while(n>=powers2Length){result=result.multiply(highestPower2);n-=powers2Length-1}return result.multiply(powersOfTwo[n])};SmallInteger.prototype.shiftLeft=BigInteger.prototype.shiftLeft;BigInteger.prototype.shiftRight=function(n){var remQuo;if(!shift_isSmall(n)){throw new Error(String(n)+\" is too large for shifting.\")}n=+n;if(n<0)return this.shiftLeft(-n);var result=this;while(n>=powers2Length){if(result.isZero()||result.isNegative()&&result.isUnit())return result;remQuo=divModAny(result,highestPower2);result=remQuo[1].isNegative()?remQuo[0].prev():remQuo[0];n-=powers2Length-1}remQuo=divModAny(result,powersOfTwo[n]);return remQuo[1].isNegative()?remQuo[0].prev():remQuo[0]};SmallInteger.prototype.shiftRight=BigInteger.prototype.shiftRight;function bitwise(x,y,fn){y=parseValue(y);var xSign=x.isNegative(),ySign=y.isNegative();var xRem=xSign?x.not():x,yRem=ySign?y.not():y;var xDigit=0,yDigit=0;var xDivMod=null,yDivMod=null;var result=[];while(!xRem.isZero()||!yRem.isZero()){xDivMod=divModAny(xRem,highestPower2);xDigit=xDivMod[1].toJSNumber();if(xSign){xDigit=highestPower2-1-xDigit}yDivMod=divModAny(yRem,highestPower2);yDigit=yDivMod[1].toJSNumber();if(ySign){yDigit=highestPower2-1-yDigit}xRem=xDivMod[0];yRem=yDivMod[0];result.push(fn(xDigit,yDigit))}var sum=fn(xSign?1:0,ySign?1:0)!==0?bigInt(-1):bigInt(0);for(var i=result.length-1;i>=0;i-=1){sum=sum.multiply(highestPower2).add(bigInt(result[i]))}return sum}BigInteger.prototype.not=function(){return this.negate().prev()};SmallInteger.prototype.not=BigInteger.prototype.not;BigInteger.prototype.and=function(n){return bitwise(this,n,function(a,b){return a&b})};SmallInteger.prototype.and=BigInteger.prototype.and;BigInteger.prototype.or=function(n){return bitwise(this,n,function(a,b){return a|b})};SmallInteger.prototype.or=BigInteger.prototype.or;BigInteger.prototype.xor=function(n){return bitwise(this,n,function(a,b){return a^b})};SmallInteger.prototype.xor=BigInteger.prototype.xor;var LOBMASK_I=1<<30,LOBMASK_BI=(BASE&-BASE)*(BASE&-BASE)|LOBMASK_I;function roughLOB(n){var v=n.value,x=typeof v===\"number\"?v|LOBMASK_I:v[0]+v[1]*BASE|LOBMASK_BI;return x&-x}function integerLogarithm(value,base){if(base.compareTo(value)<=0){var tmp=integerLogarithm(value,base.square(base));var p=tmp.p;var e=tmp.e;var t=p.multiply(base);return t.compareTo(value)<=0?{p:t,e:e*2+1}:{p:p,e:e*2}}return{p:bigInt(1),e:0}}BigInteger.prototype.bitLength=function(){var n=this;if(n.compareTo(bigInt(0))<0){n=n.negate().subtract(bigInt(1))}if(n.compareTo(bigInt(0))===0){return bigInt(0)}return bigInt(integerLogarithm(n,bigInt(2)).e).add(bigInt(1))};SmallInteger.prototype.bitLength=BigInteger.prototype.bitLength;function max(a,b){a=parseValue(a);b=parseValue(b);return a.greater(b)?a:b}function min(a,b){a=parseValue(a);b=parseValue(b);return a.lesser(b)?a:b}function gcd(a,b){a=parseValue(a).abs();b=parseValue(b).abs();if(a.equals(b))return a;if(a.isZero())return b;if(b.isZero())return a;var c=Integer[1],d,t;while(a.isEven()&&b.isEven()){d=Math.min(roughLOB(a),roughLOB(b));a=a.divide(d);b=b.divide(d);c=c.multiply(d)}while(a.isEven()){a=a.divide(roughLOB(a))}do{while(b.isEven()){b=b.divide(roughLOB(b))}if(a.greater(b)){t=b;b=a;a=t}b=b.subtract(a)}while(!b.isZero());return c.isUnit()?a:a.multiply(c)}function lcm(a,b){a=parseValue(a).abs();b=parseValue(b).abs();return a.divide(gcd(a,b)).multiply(b)}function randBetween(a,b){a=parseValue(a);b=parseValue(b);var low=min(a,b),high=max(a,b);var range=high.subtract(low).add(1);if(range.isSmall)return low.add(Math.floor(Math.random()*range));var length=range.value.length-1;var result=[],restricted=true;for(var i=length;i>=0;i--){var top=restricted?range.value[i]:BASE;var digit=truncate(Math.random()*top);result.unshift(digit);if(digit<top)restricted=false}result=arrayToSmall(result);return low.add(typeof result===\"number\"?new SmallInteger(result):new BigInteger(result,false))}var parseBase=function(text,base){var length=text.length;var i;var absBase=Math.abs(base);for(var i=0;i<length;i++){var c=text[i].toLowerCase();if(c===\"-\")continue;if(/[a-z0-9]/.test(c)){if(/[0-9]/.test(c)&&+c>=absBase){if(c===\"1\"&&absBase===1)continue;throw new Error(c+\" is not a valid digit in base \"+base+\".\")}else if(c.charCodeAt(0)-87>=absBase){throw new Error(c+\" is not a valid digit in base \"+base+\".\")}}}if(2<=base&&base<=36){if(length<=LOG_MAX_INT/Math.log(base)){var result=parseInt(text,base);if(isNaN(result)){throw new Error(c+\" is not a valid digit in base \"+base+\".\")}return new SmallInteger(parseInt(text,base))}}base=parseValue(base);var digits=[];var isNegative=text[0]===\"-\";for(i=isNegative?1:0;i<text.length;i++){var c=text[i].toLowerCase(),charCode=c.charCodeAt(0);if(48<=charCode&&charCode<=57)digits.push(parseValue(c));else if(97<=charCode&&charCode<=122)digits.push(parseValue(c.charCodeAt(0)-87));else if(c===\"<\"){var start=i;do{i++}while(text[i]!==\">\");digits.push(parseValue(text.slice(start+1,i)))}else throw new Error(c+\" is not a valid character\")}return parseBaseFromArray(digits,base,isNegative)};function parseBaseFromArray(digits,base,isNegative){var val=Integer[0],pow=Integer[1],i;for(i=digits.length-1;i>=0;i--){val=val.add(digits[i].times(pow));pow=pow.times(base)}return isNegative?val.negate():val}function stringify(digit){if(digit<=35){return\"0123456789abcdefghijklmnopqrstuvwxyz\".charAt(digit)}return\"<\"+digit+\">\"}function toBase(n,base){base=bigInt(base);if(base.isZero()){if(n.isZero())return{value:[0],isNegative:false};throw new Error(\"Cannot convert nonzero numbers to base 0.\")}if(base.equals(-1)){if(n.isZero())return{value:[0],isNegative:false};if(n.isNegative())return{value:[].concat.apply([],Array.apply(null,Array(-n)).map(Array.prototype.valueOf,[1,0])),isNegative:false};var arr=Array.apply(null,Array(+n-1)).map(Array.prototype.valueOf,[0,1]);arr.unshift([1]);return{value:[].concat.apply([],arr),isNegative:false}}var neg=false;if(n.isNegative()&&base.isPositive()){neg=true;n=n.abs()}if(base.equals(1)){if(n.isZero())return{value:[0],isNegative:false};return{value:Array.apply(null,Array(+n)).map(Number.prototype.valueOf,1),isNegative:neg}}var out=[];var left=n,divmod;while(left.isNegative()||left.compareAbs(base)>=0){divmod=left.divmod(base);left=divmod.quotient;var digit=divmod.remainder;if(digit.isNegative()){digit=base.minus(digit).abs();left=left.next()}out.push(digit.toJSNumber())}out.push(left.toJSNumber());return{value:out.reverse(),isNegative:neg}}function toBaseString(n,base){var arr=toBase(n,base);return(arr.isNegative?\"-\":\"\")+arr.value.map(stringify).join(\"\")}BigInteger.prototype.toArray=function(radix){return toBase(this,radix)};SmallInteger.prototype.toArray=function(radix){return toBase(this,radix)};BigInteger.prototype.toString=function(radix){if(radix===undefined)radix=10;if(radix!==10)return toBaseString(this,radix);var v=this.value,l=v.length,str=String(v[--l]),zeros=\"0000000\",digit;while(--l>=0){digit=String(v[l]);str+=zeros.slice(digit.length)+digit}var sign=this.sign?\"-\":\"\";return sign+str};SmallInteger.prototype.toString=function(radix){if(radix===undefined)radix=10;if(radix!=10)return toBaseString(this,radix);return String(this.value)};BigInteger.prototype.toJSON=SmallInteger.prototype.toJSON=function(){return this.toString()};BigInteger.prototype.valueOf=function(){return parseInt(this.toString(),10)};BigInteger.prototype.toJSNumber=BigInteger.prototype.valueOf;SmallInteger.prototype.valueOf=function(){return this.value};SmallInteger.prototype.toJSNumber=SmallInteger.prototype.valueOf;function parseStringValue(v){if(isPrecise(+v)){var x=+v;if(x===truncate(x))return new SmallInteger(x);throw new Error(\"Invalid integer: \"+v)}var sign=v[0]===\"-\";if(sign)v=v.slice(1);var split=v.split(/e/i);if(split.length>2)throw new Error(\"Invalid integer: \"+split.join(\"e\"));if(split.length===2){var exp=split[1];if(exp[0]===\"+\")exp=exp.slice(1);exp=+exp;if(exp!==truncate(exp)||!isPrecise(exp))throw new Error(\"Invalid integer: \"+exp+\" is not a valid exponent.\");var text=split[0];var decimalPlace=text.indexOf(\".\");if(decimalPlace>=0){exp-=text.length-decimalPlace-1;text=text.slice(0,decimalPlace)+text.slice(decimalPlace+1)}if(exp<0)throw new Error(\"Cannot include negative exponent part for integers\");text+=new Array(exp+1).join(\"0\");v=text}var isValid=/^([0-9][0-9]*)$/.test(v);if(!isValid)throw new Error(\"Invalid integer: \"+v);var r=[],max=v.length,l=LOG_BASE,min=max-l;while(max>0){r.push(+v.slice(min,max));min-=l;if(min<0)min=0;max-=l}trim(r);return new BigInteger(r,sign)}function parseNumberValue(v){if(isPrecise(v)){if(v!==truncate(v))throw new Error(v+\" is not an integer.\");return new SmallInteger(v)}return parseStringValue(v.toString())}function parseValue(v){if(typeof v===\"number\"){return parseNumberValue(v)}if(typeof v===\"string\"){return parseStringValue(v)}return v}for(var i=0;i<1e3;i++){Integer[i]=new SmallInteger(i);if(i>0)Integer[-i]=new SmallInteger(-i)}Integer.one=Integer[1];Integer.zero=Integer[0];Integer.minusOne=Integer[-1];Integer.max=max;Integer.min=min;Integer.gcd=gcd;Integer.lcm=lcm;Integer.isInstance=function(x){return x instanceof BigInteger||x instanceof SmallInteger};Integer.randBetween=randBetween;Integer.fromArray=function(digits,base,isNegative){return parseBaseFromArray(digits.map(parseValue),parseValue(base||10),isNegative)};return Integer}();if(typeof module!==\"undefined\"&&module.hasOwnProperty(\"exports\")){module.exports=bigInt}if(typeof define===\"function\"&&define.amd){define(\"big-integer\",[],function(){return bigInt})}\r\n        return bigInt;\r\n    })(),\r\n    /*\r\n     *  decimal.js v10.2.1\r\n     *  An arbitrary-precision Decimal type for JavaScript.\r\n     *  https://github.com/MikeMcl/decimal.js\r\n     *  Copyright (c) 2020 Michael Mclaughlin <M8ch88l@gmail.com>\r\n     *  MIT Licence\r\n     */\r\n    bigDec: function(n){\"use strict\";var e,i,t,r,s=9e15,o=1e9,u=\"0123456789abcdef\",c=\"2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058\",f=\"3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789\",a={precision:20,rounding:4,modulo:1,toExpNeg:-7,toExpPos:21,minE:-s,maxE:s,crypto:!1},h=!0,d=\"[DecimalError] \",l=d+\"Invalid argument: \",p=d+\"Precision limit exceeded\",g=d+\"crypto unavailable\",m=Math.floor,w=Math.pow,v=/^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i,N=/^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i,b=/^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i,E=/^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,x=1e7,y=7,M=c.length-1,q=f.length-1,O={name:\"[object Decimal]\"};function D(n){var e,i,t,r=n.length-1,s=\"\",o=n[0];if(r>0){for(s+=o,e=1;e<r;e++)t=n[e]+\"\",(i=y-t.length)&&(s+=k(i)),s+=t;o=n[e],(i=y-(t=o+\"\").length)&&(s+=k(i))}else if(0===o)return\"0\";for(;o%10==0;)o/=10;return s+o}function F(n,e,i){if(n!==~~n||n<e||n>i)throw Error(l+n)}function A(n,e,i,t){var r,s,o,u;for(s=n[0];s>=10;s/=10)--e;return--e<0?(e+=y,r=0):(r=Math.ceil((e+1)/y),e%=y),s=w(10,y-e),u=n[r]%s|0,null==t?e<3?(0==e?u=u/100|0:1==e&&(u=u/10|0),o=i<4&&99999==u||i>3&&49999==u||5e4==u||0==u):o=(i<4&&u+1==s||i>3&&u+1==s/2)&&(n[r+1]/s/100|0)==w(10,e-2)-1||(u==s/2||0==u)&&0==(n[r+1]/s/100|0):e<4?(0==e?u=u/1e3|0:1==e?u=u/100|0:2==e&&(u=u/10|0),o=(t||i<4)&&9999==u||!t&&i>3&&4999==u):o=((t||i<4)&&u+1==s||!t&&i>3&&u+1==s/2)&&(n[r+1]/s/1e3|0)==w(10,e-3)-1,o}function S(n,e,i){for(var t,r,s=[0],o=0,c=n.length;o<c;){for(r=s.length;r--;)s[r]*=e;for(s[0]+=u.indexOf(n.charAt(o++)),t=0;t<s.length;t++)s[t]>i-1&&(void 0===s[t+1]&&(s[t+1]=0),s[t+1]+=s[t]/i|0,s[t]%=i)}return s.reverse()}O.absoluteValue=O.abs=function(){var n=new this.constructor(this);return n.s<0&&(n.s=1),P(n)},O.ceil=function(){return P(new this.constructor(this),this.e+1,2)},O.comparedTo=O.cmp=function(n){var e,i,t,r,s=this,o=s.d,u=(n=new s.constructor(n)).d,c=s.s,f=n.s;if(!o||!u)return c&&f?c!==f?c:o===u?0:!o^c<0?1:-1:NaN;if(!o[0]||!u[0])return o[0]?c:u[0]?-f:0;if(c!==f)return c;if(s.e!==n.e)return s.e>n.e^c<0?1:-1;for(e=0,i=(t=o.length)<(r=u.length)?t:r;e<i;++e)if(o[e]!==u[e])return o[e]>u[e]^c<0?1:-1;return t===r?0:t>r^c<0?1:-1},O.cosine=O.cos=function(){var n,e,i=this,t=i.constructor;return i.d?i.d[0]?(n=t.precision,e=t.rounding,t.precision=n+Math.max(i.e,i.sd())+y,t.rounding=1,i=function(n,e){var i,t,r=e.d.length;r<32?(i=Math.ceil(r/3),t=(1/z(4,i)).toString()):(i=16,t=\"2.3283064365386962890625e-10\");n.precision+=i,e=J(n,1,e.times(t),new n(1));for(var s=i;s--;){var o=e.times(e);e=o.times(o).minus(o).times(8).plus(1)}return n.precision-=i,e}(t,G(t,i)),t.precision=n,t.rounding=e,P(2==r||3==r?i.neg():i,n,e,!0)):new t(1):new t(NaN)},O.cubeRoot=O.cbrt=function(){var n,e,i,t,r,s,o,u,c,f,a=this,d=a.constructor;if(!a.isFinite()||a.isZero())return new d(a);for(h=!1,(s=a.s*w(a.s*a,1/3))&&Math.abs(s)!=1/0?t=new d(s.toString()):(i=D(a.d),(s=((n=a.e)-i.length+1)%3)&&(i+=1==s||-2==s?\"0\":\"00\"),s=w(i,1/3),n=m((n+1)/3)-(n%3==(n<0?-1:2)),(t=new d(i=s==1/0?\"5e\"+n:(i=s.toExponential()).slice(0,i.indexOf(\"e\")+1)+n)).s=a.s),o=(n=d.precision)+3;;)if(f=(c=(u=t).times(u).times(u)).plus(a),t=Z(f.plus(a).times(u),f.plus(c),o+2,1),D(u.d).slice(0,o)===(i=D(t.d)).slice(0,o)){if(\"9999\"!=(i=i.slice(o-3,o+1))&&(r||\"4999\"!=i)){+i&&(+i.slice(1)||\"5\"!=i.charAt(0))||(P(t,n+1,1),e=!t.times(t).times(t).eq(a));break}if(!r&&(P(u,n+1,0),u.times(u).times(u).eq(a))){t=u;break}o+=4,r=1}return h=!0,P(t,n,d.rounding,e)},O.decimalPlaces=O.dp=function(){var n,e=this.d,i=NaN;if(e){if(i=((n=e.length-1)-m(this.e/y))*y,n=e[n])for(;n%10==0;n/=10)i--;i<0&&(i=0)}return i},O.dividedBy=O.div=function(n){return Z(this,new this.constructor(n))},O.dividedToIntegerBy=O.divToInt=function(n){var e=this.constructor;return P(Z(this,new e(n),0,1,1),e.precision,e.rounding)},O.equals=O.eq=function(n){return 0===this.cmp(n)},O.floor=function(){return P(new this.constructor(this),this.e+1,3)},O.greaterThan=O.gt=function(n){return this.cmp(n)>0},O.greaterThanOrEqualTo=O.gte=function(n){var e=this.cmp(n);return 1==e||0===e},O.hyperbolicCosine=O.cosh=function(){var n,e,i,t,r,s=this,o=s.constructor,u=new o(1);if(!s.isFinite())return new o(s.s?1/0:NaN);if(s.isZero())return u;i=o.precision,t=o.rounding,o.precision=i+Math.max(s.e,s.sd())+4,o.rounding=1,(r=s.d.length)<32?e=(1/z(4,n=Math.ceil(r/3))).toString():(n=16,e=\"2.3283064365386962890625e-10\"),s=J(o,1,s.times(e),new o(1),!0);for(var c,f=n,a=new o(8);f--;)c=s.times(s),s=u.minus(c.times(a.minus(c.times(a))));return P(s,o.precision=i,o.rounding=t,!0)},O.hyperbolicSine=O.sinh=function(){var n,e,i,t,r=this,s=r.constructor;if(!r.isFinite()||r.isZero())return new s(r);if(e=s.precision,i=s.rounding,s.precision=e+Math.max(r.e,r.sd())+4,s.rounding=1,(t=r.d.length)<3)r=J(s,2,r,r,!0);else{n=(n=1.4*Math.sqrt(t))>16?16:0|n,r=J(s,2,r=r.times(1/z(5,n)),r,!0);for(var o,u=new s(5),c=new s(16),f=new s(20);n--;)o=r.times(r),r=r.times(u.plus(o.times(c.times(o).plus(f))))}return s.precision=e,s.rounding=i,P(r,e,i,!0)},O.hyperbolicTangent=O.tanh=function(){var n,e,i=this,t=i.constructor;return i.isFinite()?i.isZero()?new t(i):(n=t.precision,e=t.rounding,t.precision=n+7,t.rounding=1,Z(i.sinh(),i.cosh(),t.precision=n,t.rounding=e)):new t(i.s)},O.inverseCosine=O.acos=function(){var n,e=this,i=e.constructor,t=e.abs().cmp(1),r=i.precision,s=i.rounding;return-1!==t?0===t?e.isNeg()?U(i,r,s):new i(0):new i(NaN):e.isZero()?U(i,r+4,s).times(.5):(i.precision=r+6,i.rounding=1,e=e.asin(),n=U(i,r+4,s).times(.5),i.precision=r,i.rounding=s,n.minus(e))},O.inverseHyperbolicCosine=O.acosh=function(){var n,e,i=this,t=i.constructor;return i.lte(1)?new t(i.eq(1)?0:NaN):i.isFinite()?(n=t.precision,e=t.rounding,t.precision=n+Math.max(Math.abs(i.e),i.sd())+4,t.rounding=1,h=!1,i=i.times(i).minus(1).sqrt().plus(i),h=!0,t.precision=n,t.rounding=e,i.ln()):new t(i)},O.inverseHyperbolicSine=O.asinh=function(){var n,e,i=this,t=i.constructor;return!i.isFinite()||i.isZero()?new t(i):(n=t.precision,e=t.rounding,t.precision=n+2*Math.max(Math.abs(i.e),i.sd())+6,t.rounding=1,h=!1,i=i.times(i).plus(1).sqrt().plus(i),h=!0,t.precision=n,t.rounding=e,i.ln())},O.inverseHyperbolicTangent=O.atanh=function(){var n,e,i,t,r=this,s=r.constructor;return r.isFinite()?r.e>=0?new s(r.abs().eq(1)?r.s/0:r.isZero()?r:NaN):(n=s.precision,e=s.rounding,t=r.sd(),Math.max(t,n)<2*-r.e-1?P(new s(r),n,e,!0):(s.precision=i=t-r.e,r=Z(r.plus(1),new s(1).minus(r),i+n,1),s.precision=n+4,s.rounding=1,r=r.ln(),s.precision=n,s.rounding=e,r.times(.5))):new s(NaN)},O.inverseSine=O.asin=function(){var n,e,i,t,r=this,s=r.constructor;return r.isZero()?new s(r):(e=r.abs().cmp(1),i=s.precision,t=s.rounding,-1!==e?0===e?((n=U(s,i+4,t).times(.5)).s=r.s,n):new s(NaN):(s.precision=i+6,s.rounding=1,r=r.div(new s(1).minus(r.times(r)).sqrt().plus(1)).atan(),s.precision=i,s.rounding=t,r.times(2)))},O.inverseTangent=O.atan=function(){var n,e,i,t,r,s,o,u,c,f=this,a=f.constructor,d=a.precision,l=a.rounding;if(f.isFinite()){if(f.isZero())return new a(f);if(f.abs().eq(1)&&d+4<=q)return(o=U(a,d+4,l).times(.25)).s=f.s,o}else{if(!f.s)return new a(NaN);if(d+4<=q)return(o=U(a,d+4,l).times(.5)).s=f.s,o}for(a.precision=u=d+10,a.rounding=1,n=i=Math.min(28,u/y+2|0);n;--n)f=f.div(f.times(f).plus(1).sqrt().plus(1));for(h=!1,e=Math.ceil(u/y),t=1,c=f.times(f),o=new a(f),r=f;-1!==n;)if(r=r.times(c),s=o.minus(r.div(t+=2)),r=r.times(c),void 0!==(o=s.plus(r.div(t+=2))).d[e])for(n=e;o.d[n]===s.d[n]&&n--;);return i&&(o=o.times(2<<i-1)),h=!0,P(o,a.precision=d,a.rounding=l,!0)},O.isFinite=function(){return!!this.d},O.isInteger=O.isInt=function(){return!!this.d&&m(this.e/y)>this.d.length-2},O.isNaN=function(){return!this.s},O.isNegative=O.isNeg=function(){return this.s<0},O.isPositive=O.isPos=function(){return this.s>0},O.isZero=function(){return!!this.d&&0===this.d[0]},O.lessThan=O.lt=function(n){return this.cmp(n)<0},O.lessThanOrEqualTo=O.lte=function(n){return this.cmp(n)<1},O.logarithm=O.log=function(n){var e,i,t,r,s,o,u,c,f=this.constructor,a=f.precision,d=f.rounding;if(null==n)n=new f(10),e=!0;else{if(i=(n=new f(n)).d,n.s<0||!i||!i[0]||n.eq(1))return new f(NaN);e=n.eq(10)}if(i=this.d,this.s<0||!i||!i[0]||this.eq(1))return new f(i&&!i[0]?-1/0:1!=this.s?NaN:i?0:1/0);if(e)if(i.length>1)s=!0;else{for(r=i[0];r%10==0;)r/=10;s=1!==r}if(h=!1,o=V(this,u=a+5),t=e?T(f,u+10):V(n,u),A((c=Z(o,t,u,1)).d,r=a,d))do{if(o=V(this,u+=10),t=e?T(f,u+10):V(n,u),c=Z(o,t,u,1),!s){+D(c.d).slice(r+1,r+15)+1==1e14&&(c=P(c,a+1,0));break}}while(A(c.d,r+=10,d));return h=!0,P(c,a,d)},O.minus=O.sub=function(n){var e,i,t,r,s,o,u,c,f,a,d,l,p=this,g=p.constructor;if(n=new g(n),!p.d||!n.d)return p.s&&n.s?p.d?n.s=-n.s:n=new g(n.d||p.s!==n.s?p:NaN):n=new g(NaN),n;if(p.s!=n.s)return n.s=-n.s,p.plus(n);if(f=p.d,l=n.d,u=g.precision,c=g.rounding,!f[0]||!l[0]){if(l[0])n.s=-n.s;else{if(!f[0])return new g(3===c?-0:0);n=new g(p)}return h?P(n,u,c):n}if(i=m(n.e/y),a=m(p.e/y),f=f.slice(),s=a-i){for((d=s<0)?(e=f,s=-s,o=l.length):(e=l,i=a,o=f.length),s>(t=Math.max(Math.ceil(u/y),o)+2)&&(s=t,e.length=1),e.reverse(),t=s;t--;)e.push(0);e.reverse()}else{for((d=(t=f.length)<(o=l.length))&&(o=t),t=0;t<o;t++)if(f[t]!=l[t]){d=f[t]<l[t];break}s=0}for(d&&(e=f,f=l,l=e,n.s=-n.s),o=f.length,t=l.length-o;t>0;--t)f[o++]=0;for(t=l.length;t>s;){if(f[--t]<l[t]){for(r=t;r&&0===f[--r];)f[r]=x-1;--f[r],f[t]+=x}f[t]-=l[t]}for(;0===f[--o];)f.pop();for(;0===f[0];f.shift())--i;return f[0]?(n.d=f,n.e=L(f,i),h?P(n,u,c):n):new g(3===c?-0:0)},O.modulo=O.mod=function(n){var e,i=this,t=i.constructor;return n=new t(n),!i.d||!n.s||n.d&&!n.d[0]?new t(NaN):!n.d||i.d&&!i.d[0]?P(new t(i),t.precision,t.rounding):(h=!1,9==t.modulo?(e=Z(i,n.abs(),0,3,1)).s*=n.s:e=Z(i,n,0,t.modulo,1),e=e.times(n),h=!0,i.minus(e))},O.naturalExponential=O.exp=function(){return B(this)},O.naturalLogarithm=O.ln=function(){return V(this)},O.negated=O.neg=function(){var n=new this.constructor(this);return n.s=-n.s,P(n)},O.plus=O.add=function(n){var e,i,t,r,s,o,u,c,f,a,d=this,l=d.constructor;if(n=new l(n),!d.d||!n.d)return d.s&&n.s?d.d||(n=new l(n.d||d.s===n.s?d:NaN)):n=new l(NaN),n;if(d.s!=n.s)return n.s=-n.s,d.minus(n);if(f=d.d,a=n.d,u=l.precision,c=l.rounding,!f[0]||!a[0])return a[0]||(n=new l(d)),h?P(n,u,c):n;if(s=m(d.e/y),t=m(n.e/y),f=f.slice(),r=s-t){for(r<0?(i=f,r=-r,o=a.length):(i=a,t=s,o=f.length),r>(o=(s=Math.ceil(u/y))>o?s+1:o+1)&&(r=o,i.length=1),i.reverse();r--;)i.push(0);i.reverse()}for((o=f.length)-(r=a.length)<0&&(r=o,i=a,a=f,f=i),e=0;r;)e=(f[--r]=f[r]+a[r]+e)/x|0,f[r]%=x;for(e&&(f.unshift(e),++t),o=f.length;0==f[--o];)f.pop();return n.d=f,n.e=L(f,t),h?P(n,u,c):n},O.precision=O.sd=function(n){var e,i=this;if(void 0!==n&&n!==!!n&&1!==n&&0!==n)throw Error(l+n);return i.d?(e=_(i.d),n&&i.e+1>e&&(e=i.e+1)):e=NaN,e},O.round=function(){var n=this,e=n.constructor;return P(new e(n),n.e+1,e.rounding)},O.sine=O.sin=function(){var n,e,i=this,t=i.constructor;return i.isFinite()?i.isZero()?new t(i):(n=t.precision,e=t.rounding,t.precision=n+Math.max(i.e,i.sd())+y,t.rounding=1,i=function(n,e){var i,t=e.d.length;if(t<3)return J(n,2,e,e);i=(i=1.4*Math.sqrt(t))>16?16:0|i,e=e.times(1/z(5,i)),e=J(n,2,e,e);for(var r,s=new n(5),o=new n(16),u=new n(20);i--;)r=e.times(e),e=e.times(s.plus(r.times(o.times(r).minus(u))));return e}(t,G(t,i)),t.precision=n,t.rounding=e,P(r>2?i.neg():i,n,e,!0)):new t(NaN)},O.squareRoot=O.sqrt=function(){var n,e,i,t,r,s,o=this,u=o.d,c=o.e,f=o.s,a=o.constructor;if(1!==f||!u||!u[0])return new a(!f||f<0&&(!u||u[0])?NaN:u?o:1/0);for(h=!1,0==(f=Math.sqrt(+o))||f==1/0?(((e=D(u)).length+c)%2==0&&(e+=\"0\"),f=Math.sqrt(e),c=m((c+1)/2)-(c<0||c%2),t=new a(e=f==1/0?\"5e\"+c:(e=f.toExponential()).slice(0,e.indexOf(\"e\")+1)+c)):t=new a(f.toString()),i=(c=a.precision)+3;;)if(t=(s=t).plus(Z(o,s,i+2,1)).times(.5),D(s.d).slice(0,i)===(e=D(t.d)).slice(0,i)){if(\"9999\"!=(e=e.slice(i-3,i+1))&&(r||\"4999\"!=e)){+e&&(+e.slice(1)||\"5\"!=e.charAt(0))||(P(t,c+1,1),n=!t.times(t).eq(o));break}if(!r&&(P(s,c+1,0),s.times(s).eq(o))){t=s;break}i+=4,r=1}return h=!0,P(t,c,a.rounding,n)},O.tangent=O.tan=function(){var n,e,i=this,t=i.constructor;return i.isFinite()?i.isZero()?new t(i):(n=t.precision,e=t.rounding,t.precision=n+10,t.rounding=1,(i=i.sin()).s=1,i=Z(i,new t(1).minus(i.times(i)).sqrt(),n+10,0),t.precision=n,t.rounding=e,P(2==r||4==r?i.neg():i,n,e,!0)):new t(NaN)},O.times=O.mul=function(n){var e,i,t,r,s,o,u,c,f,a=this,d=a.constructor,l=a.d,p=(n=new d(n)).d;if(n.s*=a.s,!(l&&l[0]&&p&&p[0]))return new d(!n.s||l&&!l[0]&&!p||p&&!p[0]&&!l?NaN:l&&p?0*n.s:n.s/0);for(i=m(a.e/y)+m(n.e/y),(c=l.length)<(f=p.length)&&(s=l,l=p,p=s,o=c,c=f,f=o),s=[],t=o=c+f;t--;)s.push(0);for(t=f;--t>=0;){for(e=0,r=c+t;r>t;)u=s[r]+p[t]*l[r-t-1]+e,s[r--]=u%x|0,e=u/x|0;s[r]=(s[r]+e)%x|0}for(;!s[--o];)s.pop();return e?++i:s.shift(),n.d=s,n.e=L(s,i),h?P(n,d.precision,d.rounding):n},O.toBinary=function(n,e){return K(this,2,n,e)},O.toDecimalPlaces=O.toDP=function(n,e){var i=this,t=i.constructor;return i=new t(i),void 0===n?i:(F(n,0,o),void 0===e?e=t.rounding:F(e,0,8),P(i,n+i.e+1,e))},O.toExponential=function(n,e){var i,t=this,r=t.constructor;return void 0===n?i=R(t,!0):(F(n,0,o),void 0===e?e=r.rounding:F(e,0,8),i=R(t=P(new r(t),n+1,e),!0,n+1)),t.isNeg()&&!t.isZero()?\"-\"+i:i},O.toFixed=function(n,e){var i,t,r=this,s=r.constructor;return void 0===n?i=R(r):(F(n,0,o),void 0===e?e=s.rounding:F(e,0,8),i=R(t=P(new s(r),n+r.e+1,e),!1,n+t.e+1)),r.isNeg()&&!r.isZero()?\"-\"+i:i},O.toFraction=function(n){var e,i,t,r,s,o,u,c,f,a,d,p,g=this,m=g.d,v=g.constructor;if(!m)return new v(g);if(f=i=new v(1),t=c=new v(0),o=(s=(e=new v(t)).e=_(m)-g.e-1)%y,e.d[0]=w(10,o<0?y+o:o),null==n)n=s>0?e:f;else{if(!(u=new v(n)).isInt()||u.lt(f))throw Error(l+u);n=u.gt(e)?s>0?e:f:u}for(h=!1,u=new v(D(m)),a=v.precision,v.precision=s=m.length*y*2;d=Z(u,e,0,1,1),1!=(r=i.plus(d.times(t))).cmp(n);)i=t,t=r,r=f,f=c.plus(d.times(r)),c=r,r=e,e=u.minus(d.times(r)),u=r;return r=Z(n.minus(i),t,0,1,1),c=c.plus(r.times(f)),i=i.plus(r.times(t)),c.s=f.s=g.s,p=Z(f,t,s,1).minus(g).abs().cmp(Z(c,i,s,1).minus(g).abs())<1?[f,t]:[c,i],v.precision=a,h=!0,p},O.toHexadecimal=O.toHex=function(n,e){return K(this,16,n,e)},O.toNearest=function(n,e){var i=this,t=i.constructor;if(i=new t(i),null==n){if(!i.d)return i;n=new t(1),e=t.rounding}else{if(n=new t(n),void 0===e?e=t.rounding:F(e,0,8),!i.d)return n.s?i:n;if(!n.d)return n.s&&(n.s=i.s),n}return n.d[0]?(h=!1,i=Z(i,n,0,e,1).times(n),h=!0,P(i)):(n.s=i.s,i=n),i},O.toNumber=function(){return+this},O.toOctal=function(n,e){return K(this,8,n,e)},O.toPower=O.pow=function(n){var e,i,t,r,s,o,u=this,c=u.constructor,f=+(n=new c(n));if(!(u.d&&n.d&&u.d[0]&&n.d[0]))return new c(w(+u,f));if((u=new c(u)).eq(1))return u;if(t=c.precision,s=c.rounding,n.eq(1))return P(u,t,s);if((e=m(n.e/y))>=n.d.length-1&&(i=f<0?-f:f)<=9007199254740991)return r=C(c,u,i,t),n.s<0?new c(1).div(r):P(r,t,s);if((o=u.s)<0){if(e<n.d.length-1)return new c(NaN);if(0==(1&n.d[e])&&(o=1),0==u.e&&1==u.d[0]&&1==u.d.length)return u.s=o,u}return(e=0!=(i=w(+u,f))&&isFinite(i)?new c(i+\"\").e:m(f*(Math.log(\"0.\"+D(u.d))/Math.LN10+u.e+1)))>c.maxE+1||e<c.minE-1?new c(e>0?o/0:0):(h=!1,c.rounding=u.s=1,i=Math.min(12,(e+\"\").length),(r=B(n.times(V(u,t+i)),t)).d&&A((r=P(r,t+5,1)).d,t,s)&&(e=t+10,+D((r=P(B(n.times(V(u,e+i)),e),e+5,1)).d).slice(t+1,t+15)+1==1e14&&(r=P(r,t+1,0))),r.s=o,h=!0,c.rounding=s,P(r,t,s))},O.toPrecision=function(n,e){var i,t=this,r=t.constructor;return void 0===n?i=R(t,t.e<=r.toExpNeg||t.e>=r.toExpPos):(F(n,1,o),void 0===e?e=r.rounding:F(e,0,8),i=R(t=P(new r(t),n,e),n<=t.e||t.e<=r.toExpNeg,n)),t.isNeg()&&!t.isZero()?\"-\"+i:i},O.toSignificantDigits=O.toSD=function(n,e){var i=this.constructor;return void 0===n?(n=i.precision,e=i.rounding):(F(n,1,o),void 0===e?e=i.rounding:F(e,0,8)),P(new i(this),n,e)},O.toString=function(){var n=this,e=n.constructor,i=R(n,n.e<=e.toExpNeg||n.e>=e.toExpPos);return n.isNeg()&&!n.isZero()?\"-\"+i:i},O.truncated=O.trunc=function(){return P(new this.constructor(this),this.e+1,1)},O.valueOf=O.toJSON=function(){var n=this,e=n.constructor,i=R(n,n.e<=e.toExpNeg||n.e>=e.toExpPos);return n.isNeg()?\"-\"+i:i};var Z=function(){function n(n,e,i){var t,r=0,s=n.length;for(n=n.slice();s--;)t=n[s]*e+r,n[s]=t%i|0,r=t/i|0;return r&&n.unshift(r),n}function e(n,e,i,t){var r,s;if(i!=t)s=i>t?1:-1;else for(r=s=0;r<i;r++)if(n[r]!=e[r]){s=n[r]>e[r]?1:-1;break}return s}function t(n,e,i,t){for(var r=0;i--;)n[i]-=r,r=n[i]<e[i]?1:0,n[i]=r*t+n[i]-e[i];for(;!n[0]&&n.length>1;)n.shift()}return function(r,s,o,u,c,f){var a,h,d,l,p,g,w,v,N,b,E,M,q,O,D,F,A,S,Z,R,L=r.constructor,T=r.s==s.s?1:-1,U=r.d,_=s.d;if(!(U&&U[0]&&_&&_[0]))return new L(r.s&&s.s&&(U?!_||U[0]!=_[0]:_)?U&&0==U[0]||!_?0*T:T/0:NaN);for(f?(p=1,h=r.e-s.e):(f=x,p=y,h=m(r.e/p)-m(s.e/p)),Z=_.length,A=U.length,b=(N=new L(T)).d=[],d=0;_[d]==(U[d]||0);d++);if(_[d]>(U[d]||0)&&h--,null==o?(O=o=L.precision,u=L.rounding):O=c?o+(r.e-s.e)+1:o,O<0)b.push(1),g=!0;else{if(O=O/p+2|0,d=0,1==Z){for(l=0,_=_[0],O++;(d<A||l)&&O--;d++)D=l*f+(U[d]||0),b[d]=D/_|0,l=D%_|0;g=l||d<A}else{for((l=f/(_[0]+1)|0)>1&&(_=n(_,l,f),U=n(U,l,f),Z=_.length,A=U.length),F=Z,M=(E=U.slice(0,Z)).length;M<Z;)E[M++]=0;(R=_.slice()).unshift(0),S=_[0],_[1]>=f/2&&++S;do{l=0,(a=e(_,E,Z,M))<0?(q=E[0],Z!=M&&(q=q*f+(E[1]||0)),(l=q/S|0)>1?(l>=f&&(l=f-1),1==(a=e(w=n(_,l,f),E,v=w.length,M=E.length))&&(l--,t(w,Z<v?R:_,v,f))):(0==l&&(a=l=1),w=_.slice()),(v=w.length)<M&&w.unshift(0),t(E,w,M,f),-1==a&&(a=e(_,E,Z,M=E.length))<1&&(l++,t(E,Z<M?R:_,M,f)),M=E.length):0===a&&(l++,E=[0]),b[d++]=l,a&&E[0]?E[M++]=U[F]||0:(E=[U[F]],M=1)}while((F++<A||void 0!==E[0])&&O--);g=void 0!==E[0]}b[0]||b.shift()}if(1==p)N.e=h,i=g;else{for(d=1,l=b[0];l>=10;l/=10)d++;N.e=d+h*p-1,P(N,c?o+N.e+1:o,u,g)}return N}}();function P(n,e,i,t){var r,s,o,u,c,f,a,d,l,p=n.constructor;n:if(null!=e){if(!(d=n.d))return n;for(r=1,u=d[0];u>=10;u/=10)r++;if((s=e-r)<0)s+=y,o=e,c=(a=d[l=0])/w(10,r-o-1)%10|0;else if((l=Math.ceil((s+1)/y))>=(u=d.length)){if(!t)break n;for(;u++<=l;)d.push(0);a=c=0,r=1,o=(s%=y)-y+1}else{for(a=u=d[l],r=1;u>=10;u/=10)r++;c=(o=(s%=y)-y+r)<0?0:a/w(10,r-o-1)%10|0}if(t=t||e<0||void 0!==d[l+1]||(o<0?a:a%w(10,r-o-1)),f=i<4?(c||t)&&(0==i||i==(n.s<0?3:2)):c>5||5==c&&(4==i||t||6==i&&(s>0?o>0?a/w(10,r-o):0:d[l-1])%10&1||i==(n.s<0?8:7)),e<1||!d[0])return d.length=0,f?(e-=n.e+1,d[0]=w(10,(y-e%y)%y),n.e=-e||0):d[0]=n.e=0,n;if(0==s?(d.length=l,u=1,l--):(d.length=l+1,u=w(10,y-s),d[l]=o>0?(a/w(10,r-o)%w(10,o)|0)*u:0),f)for(;;){if(0==l){for(s=1,o=d[0];o>=10;o/=10)s++;for(o=d[0]+=u,u=1;o>=10;o/=10)u++;s!=u&&(n.e++,d[0]==x&&(d[0]=1));break}if(d[l]+=u,d[l]!=x)break;d[l--]=0,u=1}for(s=d.length;0===d[--s];)d.pop()}return h&&(n.e>p.maxE?(n.d=null,n.e=NaN):n.e<p.minE&&(n.e=0,n.d=[0])),n}function R(n,e,i){if(!n.isFinite())return j(n);var t,r=n.e,s=D(n.d),o=s.length;return e?(i&&(t=i-o)>0?s=s.charAt(0)+\".\"+s.slice(1)+k(t):o>1&&(s=s.charAt(0)+\".\"+s.slice(1)),s=s+(n.e<0?\"e\":\"e+\")+n.e):r<0?(s=\"0.\"+k(-r-1)+s,i&&(t=i-o)>0&&(s+=k(t))):r>=o?(s+=k(r+1-o),i&&(t=i-r-1)>0&&(s=s+\".\"+k(t))):((t=r+1)<o&&(s=s.slice(0,t)+\".\"+s.slice(t)),i&&(t=i-o)>0&&(r+1===o&&(s+=\".\"),s+=k(t))),s}function L(n,e){var i=n[0];for(e*=y;i>=10;i/=10)e++;return e}function T(n,e,i){if(e>M)throw h=!0,i&&(n.precision=i),Error(p);return P(new n(c),e,1,!0)}function U(n,e,i){if(e>q)throw Error(p);return P(new n(f),e,i,!0)}function _(n){var e=n.length-1,i=e*y+1;if(e=n[e]){for(;e%10==0;e/=10)i--;for(e=n[0];e>=10;e/=10)i++}return i}function k(n){for(var e=\"\";n--;)e+=\"0\";return e}function C(n,e,i,t){var r,s=new n(1),o=Math.ceil(t/y+4);for(h=!1;;){if(i%2&&Q((s=s.times(e)).d,o)&&(r=!0),0===(i=m(i/2))){i=s.d.length-1,r&&0===s.d[i]&&++s.d[i];break}Q((e=e.times(e)).d,o)}return h=!0,s}function I(n){return 1&n.d[n.d.length-1]}function H(n,e,i){for(var t,r=new n(e[0]),s=0;++s<e.length;){if(!(t=new n(e[s])).s){r=t;break}r[i](t)&&(r=t)}return r}function B(n,e){var i,t,r,s,o,u,c,f=0,a=0,d=0,l=n.constructor,p=l.rounding,g=l.precision;if(!n.d||!n.d[0]||n.e>17)return new l(n.d?n.d[0]?n.s<0?0:1/0:1:n.s?n.s<0?0:n:NaN);for(null==e?(h=!1,c=g):c=e,u=new l(.03125);n.e>-2;)n=n.times(u),d+=5;for(c+=t=Math.log(w(2,d))/Math.LN10*2+5|0,i=s=o=new l(1),l.precision=c;;){if(s=P(s.times(n),c,1),i=i.times(++a),D((u=o.plus(Z(s,i,c,1))).d).slice(0,c)===D(o.d).slice(0,c)){for(r=d;r--;)o=P(o.times(o),c,1);if(null!=e)return l.precision=g,o;if(!(f<3&&A(o.d,c-t,p,f)))return P(o,l.precision=g,p,h=!0);l.precision=c+=10,i=s=u=new l(1),a=0,f++}o=u}}function V(n,e){var i,t,r,s,o,u,c,f,a,d,l,p=1,g=n,m=g.d,w=g.constructor,v=w.rounding,N=w.precision;if(g.s<0||!m||!m[0]||!g.e&&1==m[0]&&1==m.length)return new w(m&&!m[0]?-1/0:1!=g.s?NaN:m?0:g);if(null==e?(h=!1,a=N):a=e,w.precision=a+=10,t=(i=D(m)).charAt(0),!(Math.abs(s=g.e)<15e14))return f=T(w,a+2,N).times(s+\"\"),g=V(new w(t+\".\"+i.slice(1)),a-10).plus(f),w.precision=N,null==e?P(g,N,v,h=!0):g;for(;t<7&&1!=t||1==t&&i.charAt(1)>3;)t=(i=D((g=g.times(n)).d)).charAt(0),p++;for(s=g.e,t>1?(g=new w(\"0.\"+i),s++):g=new w(t+\".\"+i.slice(1)),d=g,c=o=g=Z(g.minus(1),g.plus(1),a,1),l=P(g.times(g),a,1),r=3;;){if(o=P(o.times(l),a,1),D((f=c.plus(Z(o,new w(r),a,1))).d).slice(0,a)===D(c.d).slice(0,a)){if(c=c.times(2),0!==s&&(c=c.plus(T(w,a+2,N).times(s+\"\"))),c=Z(c,new w(p),a,1),null!=e)return w.precision=N,c;if(!A(c.d,a-10,v,u))return P(c,w.precision=N,v,h=!0);w.precision=a+=10,f=o=g=Z(d.minus(1),d.plus(1),a,1),l=P(g.times(g),a,1),r=u=1}c=f,r+=2}}function j(n){return String(n.s*n.s/0)}function $(n,e){var i,t,r;for((i=e.indexOf(\".\"))>-1&&(e=e.replace(\".\",\"\")),(t=e.search(/e/i))>0?(i<0&&(i=t),i+=+e.slice(t+1),e=e.substring(0,t)):i<0&&(i=e.length),t=0;48===e.charCodeAt(t);t++);for(r=e.length;48===e.charCodeAt(r-1);--r);if(e=e.slice(t,r)){if(r-=t,n.e=i=i-t-1,n.d=[],t=(i+1)%y,i<0&&(t+=y),t<r){for(t&&n.d.push(+e.slice(0,t)),r-=y;t<r;)n.d.push(+e.slice(t,t+=y));e=e.slice(t),t=y-e.length}else t-=r;for(;t--;)e+=\"0\";n.d.push(+e),h&&(n.e>n.constructor.maxE?(n.d=null,n.e=NaN):n.e<n.constructor.minE&&(n.e=0,n.d=[0]))}else n.e=0,n.d=[0];return n}function W(n,i){var t,r,s,o,u,c,f,a,d;if(\"Infinity\"===i||\"NaN\"===i)return+i||(n.s=NaN),n.e=NaN,n.d=null,n;if(N.test(i))t=16,i=i.toLowerCase();else if(v.test(i))t=2;else{if(!b.test(i))throw Error(l+i);t=8}for((o=i.search(/p/i))>0?(f=+i.slice(o+1),i=i.substring(2,o)):i=i.slice(2),u=(o=i.indexOf(\".\"))>=0,r=n.constructor,u&&(o=(c=(i=i.replace(\".\",\"\")).length)-o,s=C(r,new r(t),o,2*o)),o=d=(a=S(i,t,x)).length-1;0===a[o];--o)a.pop();return o<0?new r(0*n.s):(n.e=L(a,d),n.d=a,h=!1,u&&(n=Z(n,s,4*c)),f&&(n=n.times(Math.abs(f)<54?w(2,f):e.pow(2,f))),h=!0,n)}function J(n,e,i,t,r){var s,o,u,c,f=n.precision,a=Math.ceil(f/y);for(h=!1,c=i.times(i),u=new n(t);;){if(o=Z(u.times(c),new n(e++*e++),f,1),u=r?t.plus(o):t.minus(o),t=Z(o.times(c),new n(e++*e++),f,1),void 0!==(o=u.plus(t)).d[a]){for(s=a;o.d[s]===u.d[s]&&s--;);if(-1==s)break}s=u,u=t,t=o,o=s,0}return h=!0,o.d.length=a+1,o}function z(n,e){for(var i=n;--e;)i*=n;return i}function G(n,e){var i,t=e.s<0,s=U(n,n.precision,1),o=s.times(.5);if((e=e.abs()).lte(o))return r=t?4:1,e;if((i=e.divToInt(s)).isZero())r=t?3:2;else{if((e=e.minus(i.times(s))).lte(o))return r=I(i)?t?2:3:t?4:1,e;r=I(i)?t?1:4:t?3:2}return e.minus(s).abs()}function K(n,e,t,r){var s,c,f,a,h,d,l,p,g,m=n.constructor,w=void 0!==t;if(w?(F(t,1,o),void 0===r?r=m.rounding:F(r,0,8)):(t=m.precision,r=m.rounding),n.isFinite()){for(w?(s=2,16==e?t=4*t-3:8==e&&(t=3*t-2)):s=e,(f=(l=R(n)).indexOf(\".\"))>=0&&(l=l.replace(\".\",\"\"),(g=new m(1)).e=l.length-f,g.d=S(R(g),10,s),g.e=g.d.length),c=h=(p=S(l,10,s)).length;0==p[--h];)p.pop();if(p[0]){if(f<0?c--:((n=new m(n)).d=p,n.e=c,p=(n=Z(n,g,t,r,0,s)).d,c=n.e,d=i),f=p[t],a=s/2,d=d||void 0!==p[t+1],d=r<4?(void 0!==f||d)&&(0===r||r===(n.s<0?3:2)):f>a||f===a&&(4===r||d||6===r&&1&p[t-1]||r===(n.s<0?8:7)),p.length=t,d)for(;++p[--t]>s-1;)p[t]=0,t||(++c,p.unshift(1));for(h=p.length;!p[h-1];--h);for(f=0,l=\"\";f<h;f++)l+=u.charAt(p[f]);if(w){if(h>1)if(16==e||8==e){for(f=16==e?4:3,--h;h%f;h++)l+=\"0\";for(h=(p=S(l,s,e)).length;!p[h-1];--h);for(f=1,l=\"1.\";f<h;f++)l+=u.charAt(p[f])}else l=l.charAt(0)+\".\"+l.slice(1);l=l+(c<0?\"p\":\"p+\")+c}else if(c<0){for(;++c;)l=\"0\"+l;l=\"0.\"+l}else if(++c>h)for(c-=h;c--;)l+=\"0\";else c<h&&(l=l.slice(0,c)+\".\"+l.slice(c))}else l=w?\"0p+0\":\"0\";l=(16==e?\"0x\":2==e?\"0b\":8==e?\"0o\":\"\")+l}else l=j(n);return n.s<0?\"-\"+l:l}function Q(n,e){if(n.length>e)return n.length=e,!0}function X(n){return new this(n).abs()}function Y(n){return new this(n).acos()}function nn(n){return new this(n).acosh()}function en(n,e){return new this(n).plus(e)}function tn(n){return new this(n).asin()}function rn(n){return new this(n).asinh()}function sn(n){return new this(n).atan()}function on(n){return new this(n).atanh()}function un(n,e){n=new this(n),e=new this(e);var i,t=this.precision,r=this.rounding,s=t+4;return n.s&&e.s?n.d||e.d?!e.d||n.isZero()?(i=e.s<0?U(this,t,r):new this(0)).s=n.s:!n.d||e.isZero()?(i=U(this,s,1).times(.5)).s=n.s:e.s<0?(this.precision=s,this.rounding=1,i=this.atan(Z(n,e,s,1)),e=U(this,s,1),this.precision=t,this.rounding=r,i=n.s<0?i.minus(e):i.plus(e)):i=this.atan(Z(n,e,s,1)):(i=U(this,s,1).times(e.s>0?.25:.75)).s=n.s:i=new this(NaN),i}function cn(n){return new this(n).cbrt()}function fn(n){return P(n=new this(n),n.e+1,2)}function an(n){if(!n||\"object\"!=typeof n)throw Error(d+\"Object expected\");var e,i,t,r=!0===n.defaults,u=[\"precision\",1,o,\"rounding\",0,8,\"toExpNeg\",-s,0,\"toExpPos\",0,s,\"maxE\",0,s,\"minE\",-s,0,\"modulo\",0,9];for(e=0;e<u.length;e+=3)if(i=u[e],r&&(this[i]=a[i]),void 0!==(t=n[i])){if(!(m(t)===t&&t>=u[e+1]&&t<=u[e+2]))throw Error(l+i+\": \"+t);this[i]=t}if(i=\"crypto\",r&&(this[i]=a[i]),void 0!==(t=n[i])){if(!0!==t&&!1!==t&&0!==t&&1!==t)throw Error(l+i+\": \"+t);if(t){if(\"undefined\"==typeof crypto||!crypto||!crypto.getRandomValues&&!crypto.randomBytes)throw Error(g);this[i]=!0}else this[i]=!1}return this}function hn(n){return new this(n).cos()}function dn(n){return new this(n).cosh()}function ln(n,e){return new this(n).div(e)}function pn(n){return new this(n).exp()}function gn(n){return P(n=new this(n),n.e+1,3)}function mn(){var n,e,i=new this(0);for(h=!1,n=0;n<arguments.length;)if((e=new this(arguments[n++])).d)i.d&&(i=i.plus(e.times(e)));else{if(e.s)return h=!0,new this(1/0);i=e}return h=!0,i.sqrt()}function wn(n){return n instanceof e||n&&\"[object Decimal]\"===n.name||!1}function vn(n){return new this(n).ln()}function Nn(n,e){return new this(n).log(e)}function bn(n){return new this(n).log(2)}function En(n){return new this(n).log(10)}function xn(){return H(this,arguments,\"lt\")}function yn(){return H(this,arguments,\"gt\")}function Mn(n,e){return new this(n).mod(e)}function qn(n,e){return new this(n).mul(e)}function On(n,e){return new this(n).pow(e)}function Dn(n){var e,i,t,r,s=0,u=new this(1),c=[];if(void 0===n?n=this.precision:F(n,1,o),t=Math.ceil(n/y),this.crypto)if(crypto.getRandomValues)for(e=crypto.getRandomValues(new Uint32Array(t));s<t;)(r=e[s])>=429e7?e[s]=crypto.getRandomValues(new Uint32Array(1))[0]:c[s++]=r%1e7;else{if(!crypto.randomBytes)throw Error(g);for(e=crypto.randomBytes(t*=4);s<t;)(r=e[s]+(e[s+1]<<8)+(e[s+2]<<16)+((127&e[s+3])<<24))>=214e7?crypto.randomBytes(4).copy(e,s):(c.push(r%1e7),s+=4);s=t/4}else for(;s<t;)c[s++]=1e7*Math.random()|0;for(t=c[--s],n%=y,t&&n&&(r=w(10,y-n),c[s]=(t/r|0)*r);0===c[s];s--)c.pop();if(s<0)i=0,c=[0];else{for(i=-1;0===c[0];i-=y)c.shift();for(t=1,r=c[0];r>=10;r/=10)t++;t<y&&(i-=y-t)}return u.e=i,u.d=c,u}function Fn(n){return P(n=new this(n),n.e+1,this.rounding)}function An(n){return(n=new this(n)).d?n.d[0]?n.s:0*n.s:n.s||NaN}function Sn(n){return new this(n).sin()}function Zn(n){return new this(n).sinh()}function Pn(n){return new this(n).sqrt()}function Rn(n,e){return new this(n).sub(e)}function Ln(n){return new this(n).tan()}function Tn(n){return new this(n).tanh()}function Un(n){return P(n=new this(n),n.e+1,1)}return(e=function n(e){var i,t,r;function s(n){var e,i,t,r=this;if(!(r instanceof s))return new s(n);if(r.constructor=s,n instanceof s)return r.s=n.s,void(h?!n.d||n.e>s.maxE?(r.e=NaN,r.d=null):n.e<s.minE?(r.e=0,r.d=[0]):(r.e=n.e,r.d=n.d.slice()):(r.e=n.e,r.d=n.d?n.d.slice():n.d));if(\"number\"==(t=typeof n)){if(0===n)return r.s=1/n<0?-1:1,r.e=0,void(r.d=[0]);if(n<0?(n=-n,r.s=-1):r.s=1,n===~~n&&n<1e7){for(e=0,i=n;i>=10;i/=10)e++;return void(h?e>s.maxE?(r.e=NaN,r.d=null):e<s.minE?(r.e=0,r.d=[0]):(r.e=e,r.d=[n]):(r.e=e,r.d=[n]))}return 0*n!=0?(n||(r.s=NaN),r.e=NaN,void(r.d=null)):$(r,n.toString())}if(\"string\"!==t)throw Error(l+n);return 45===(i=n.charCodeAt(0))?(n=n.slice(1),r.s=-1):(43===i&&(n=n.slice(1)),r.s=1),E.test(n)?$(r,n):W(r,n)}if(s.prototype=O,s.ROUND_UP=0,s.ROUND_DOWN=1,s.ROUND_CEIL=2,s.ROUND_FLOOR=3,s.ROUND_HALF_UP=4,s.ROUND_HALF_DOWN=5,s.ROUND_HALF_EVEN=6,s.ROUND_HALF_CEIL=7,s.ROUND_HALF_FLOOR=8,s.EUCLID=9,s.config=s.set=an,s.clone=n,s.isDecimal=wn,s.abs=X,s.acos=Y,s.acosh=nn,s.add=en,s.asin=tn,s.asinh=rn,s.atan=sn,s.atanh=on,s.atan2=un,s.cbrt=cn,s.ceil=fn,s.cos=hn,s.cosh=dn,s.div=ln,s.exp=pn,s.floor=gn,s.hypot=mn,s.ln=vn,s.log=Nn,s.log10=En,s.log2=bn,s.max=xn,s.min=yn,s.mod=Mn,s.mul=qn,s.pow=On,s.random=Dn,s.round=Fn,s.sign=An,s.sin=Sn,s.sinh=Zn,s.sqrt=Pn,s.sub=Rn,s.tan=Ln,s.tanh=Tn,s.trunc=Un,void 0===e&&(e={}),e&&!0!==e.defaults)for(r=[\"precision\",\"rounding\",\"toExpNeg\",\"toExpPos\",\"maxE\",\"minE\",\"modulo\",\"crypto\"],i=0;i<r.length;)e.hasOwnProperty(t=r[i++])||(e[t]=this[t]);return s.config(e),s}(a)).default=e.Decimal=e,c=new e(c),f=new e(f),\"function\"==typeof define&&define.amd?define(function(){return e}):\"undefined\"!=typeof module&&module.exports?(\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator&&(O[Symbol.for(\"nodejs.util.inspect.custom\")]=O.toString,O[Symbol.toStringTag]=\"Decimal\"),module.exports=e):(n||(n=\"undefined\"!=typeof self&&self&&self.self==self?self:window),t=n.Decimal,e.noConflict=function(){return n.Decimal=t,e},n.Decimal=e),e}(this)\r\n//    bigDec: require('decimal.js')\r\n});\r\n\r\nif((typeof module) !== 'undefined') {\r\n    module.exports = nerdamer;\r\n};","import { toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, createElementVNode as _createElementVNode, vShow as _vShow, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, createBlock as _createBlock } from \"vue\"\n\nconst _hoisted_1 = { key: 0 }\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"h2\", null, \" What do you wanna calculate? \", -1)\nconst _hoisted_3 = { key: 1 }\nconst _hoisted_4 = [\"innerHTML\"]\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_ion_title = _resolveComponent(\"ion-title\")!\n  const _component_ion_back_button = _resolveComponent(\"ion-back-button\")!\n  const _component_ion_buttons = _resolveComponent(\"ion-buttons\")!\n  const _component_ion_button = _resolveComponent(\"ion-button\")!\n  const _component_ion_toolbar = _resolveComponent(\"ion-toolbar\")!\n  const _component_ion_header = _resolveComponent(\"ion-header\")!\n  const _component_ion_label = _resolveComponent(\"ion-label\")!\n  const _component_ion_input = _resolveComponent(\"ion-input\")!\n  const _component_ion_content = _resolveComponent(\"ion-content\")!\n  const _component_ion_modal = _resolveComponent(\"ion-modal\")!\n  const _component_ion_card_title = _resolveComponent(\"ion-card-title\")!\n  const _component_ion_card_subtitle = _resolveComponent(\"ion-card-subtitle\")!\n  const _component_ion_card_header = _resolveComponent(\"ion-card-header\")!\n  const _component_ion_segment_button = _resolveComponent(\"ion-segment-button\")!\n  const _component_ion_segment = _resolveComponent(\"ion-segment\")!\n  const _component_ion_item = _resolveComponent(\"ion-item\")!\n  const _component_ion_col = _resolveComponent(\"ion-col\")!\n  const _component_ion_row = _resolveComponent(\"ion-row\")!\n  const _component_ion_grid = _resolveComponent(\"ion-grid\")!\n  const _component_ion_card_content = _resolveComponent(\"ion-card-content\")!\n  const _component_ion_card = _resolveComponent(\"ion-card\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_ion_header, null, {\n        default: _withCtx(() => [\n          _createVNode(_component_ion_toolbar, null, {\n            default: _withCtx(() => [\n              _createVNode(_component_ion_title, null, {\n                default: _withCtx(() => [\n                  _createTextVNode(_toDisplayString(_ctx.drugStore.currentDrug.GENERIC_NAME), 1)\n                ]),\n                _: 1\n              }),\n              _createVNode(_component_ion_buttons, { slot: \"start\" }, {\n                default: _withCtx(() => [\n                  _createVNode(_component_ion_back_button)\n                ]),\n                _: 1\n              }),\n              _createVNode(_component_ion_buttons, { slot: \"end\" }, {\n                default: _withCtx(() => [\n                  _createVNode(_component_ion_button, {\n                    fill: \"clear\",\n                    shape: \"round\",\n                    id: \"open-modal\"\n                  }, {\n                    default: _withCtx(() => [\n                      _createTextVNode(_toDisplayString(_ctx.patientStore.currentPatient.weight) + \" (Kg) \", 1)\n                    ]),\n                    _: 1\n                  })\n                ]),\n                _: 1\n              })\n            ]),\n            _: 1\n          })\n        ]),\n        _: 1\n      }),\n      _createVNode(_component_ion_content, { class: \"ion-padding\" }, {\n        default: _withCtx(() => [\n          _createVNode(_component_ion_modal, {\n            ref: \"modal\",\n            trigger: \"open-modal\",\n            \"initial-breakpoint\": 0.25,\n            breakpoints: [0, 0.25, 0.5, 0.75]\n          }, {\n            default: _withCtx(() => [\n              _createVNode(_component_ion_content, { class: \"ion-padding\" }, {\n                default: _withCtx(() => [\n                  _createVNode(_component_ion_label, { position: \"stacked\" }, {\n                    default: _withCtx(() => [\n                      _createTextVNode(\"Weight (kg)\")\n                    ]),\n                    _: 1\n                  }),\n                  _createVNode(_component_ion_input, {\n                    placeholder: \"Weight\",\n                    modelValue: _ctx.patientStore.currentPatient.weight,\n                    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = ($event: any) => ((_ctx.patientStore.currentPatient.weight) = $event)),\n                    onIonChange: _cache[1] || (_cache[1] = ($event: any) => (_ctx.calculateDrug_TruyenLienTuc('weight'))),\n                    color: \"primary\"\n                  }, null, 8, [\"modelValue\"])\n                ]),\n                _: 1\n              })\n            ]),\n            _: 1\n          }, 8, [\"initial-breakpoint\", \"breakpoints\"]),\n          _createVNode(_component_ion_card, null, {\n            default: _withCtx(() => [\n              _createVNode(_component_ion_card_header, null, {\n                default: _withCtx(() => [\n                  _createVNode(_component_ion_card_title, null, {\n                    default: _withCtx(() => [\n                      _createTextVNode(_toDisplayString(_ctx.drugStore.currentDrug.GENERIC_NAME), 1)\n                    ]),\n                    _: 1\n                  }),\n                  _createVNode(_component_ion_card_subtitle, null, {\n                    default: _withCtx(() => [\n                      _createTextVNode(_toDisplayString(`1 ${_ctx.drugStore.currentDrug.DOSE_FORM} contain\n                        ${_ctx.drugStore.currentDrug.AMOUNT}${_ctx.drugStore.currentDrug.AMOUNT_UNIT}/${_ctx.drugStore.currentDrug.SOLVENT}${_ctx.drugStore.currentDrug.SOLVENT_UNIT};\n                        Dose\n                        range: ${_ctx.drugStore.currentDrug.MIN_DOSE}-${_ctx.drugStore.currentDrug.MAX_DOSE}\n                        ${_ctx.drugStore.currentDrug.DOSE_UNIT}/${_ctx.drugStore.currentDrug.PER_TIME} ${_ctx.drugStore.currentDrug.PER_TIME ==\n                \"dose\" || _ctx.drugStore.currentDrug.PER_TIME == \"single\" ? \"/each \" + _ctx.drugStore.currentDrug.FREQ + \"h\" : \"\"}`), 1)\n                    ]),\n                    _: 1\n                  })\n                ]),\n                _: 1\n              }),\n              _createVNode(_component_ion_card_content, null, {\n                default: _withCtx(() => [\n                  (_ctx.drugStore.currentDrug.cal_typeCalculate == 'truyenLienTuc')\n                    ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n                        _hoisted_2,\n                        _createVNode(_component_ion_segment, {\n                          modelValue: _ctx.toCalWhat,\n                          \"onUpdate:modelValue\": _cache[2] || (_cache[2] = ($event: any) => ((_ctx.toCalWhat) = $event)),\n                          mode: \"ios\",\n                          onIonChange: _cache[3] || (_cache[3] = ($event: any) => (_ctx.changeToCalWhat()))\n                        }, {\n                          default: _withCtx(() => [\n                            _createVNode(_component_ion_segment_button, { value: \"toCalInfusionRate\" }, {\n                              default: _withCtx(() => [\n                                _createVNode(_component_ion_label, null, {\n                                  default: _withCtx(() => [\n                                    _createTextVNode(\"Infusion Rate?\")\n                                  ]),\n                                  _: 1\n                                })\n                              ]),\n                              _: 1\n                            }),\n                            _createVNode(_component_ion_segment_button, { value: \"toCalDose\" }, {\n                              default: _withCtx(() => [\n                                _createVNode(_component_ion_label, null, {\n                                  default: _withCtx(() => [\n                                    _createTextVNode(\"Dose?\")\n                                  ]),\n                                  _: 1\n                                })\n                              ]),\n                              _: 1\n                            }),\n                            _createVNode(_component_ion_segment_button, { value: \"toCalMgInAmpules\" }, {\n                              default: _withCtx(() => [\n                                _createVNode(_component_ion_label, null, {\n                                  default: _withCtx(() => [\n                                    _createTextVNode(\"mg in Ampules?\")\n                                  ]),\n                                  _: 1\n                                })\n                              ]),\n                              _: 1\n                            })\n                          ]),\n                          _: 1\n                        }, 8, [\"modelValue\"]),\n                        _createVNode(_component_ion_grid, null, {\n                          default: _withCtx(() => [\n                            _createVNode(_component_ion_row, null, {\n                              default: _withCtx(() => [\n                                _createVNode(_component_ion_col, null, {\n                                  default: _withCtx(() => [\n                                    _createVNode(_component_ion_item, null, {\n                                      default: _withCtx(() => [\n                                        _createVNode(_component_ion_label, { position: \"stacked\" }, {\n                                          default: _withCtx(() => [\n                                            _createTextVNode(\"Dose (\" + _toDisplayString((_ctx.drugStore.currentDrug.DOSE_UNIT + \"/\" +\n                      _ctx.drugStore.currentDrug.PER_TIME)) + \")\", 1)\n                                          ]),\n                                          _: 1\n                                        }),\n                                        _createVNode(_component_ion_input, {\n                                          placeholder: \"Dose\",\n                                          type: \"number\",\n                                          modelValue: _ctx.calDose,\n                                          \"onUpdate:modelValue\": _cache[4] || (_cache[4] = ($event: any) => ((_ctx.calDose) = $event)),\n                                          onIonChange: _cache[5] || (_cache[5] = ($event: any) => (_ctx.calculateDrug_TruyenLienTuc('calDose'))),\n                                          disabled: _ctx.toCalWhat == 'toCalDose'\n                                        }, null, 8, [\"modelValue\", \"disabled\"])\n                                      ]),\n                                      _: 1\n                                    })\n                                  ]),\n                                  _: 1\n                                }),\n                                _createVNode(_component_ion_col, null, {\n                                  default: _withCtx(() => [\n                                    _createVNode(_component_ion_item, null, {\n                                      default: _withCtx(() => [\n                                        _createVNode(_component_ion_label, { position: \"stacked\" }, {\n                                          default: _withCtx(() => [\n                                            _createTextVNode(\"Ampules \" + _toDisplayString(_ctx.drugStore.currentDrug.AMOUNT! +\n                      _ctx.drugStore.currentDrug.AMOUNT_UNIT! + '/' +\n                      _ctx.drugStore.currentDrug.SOLVENT + _ctx.drugStore.currentDrug.SOLVENT_UNIT), 1)\n                                          ]),\n                                          _: 1\n                                        }),\n                                        _createVNode(_component_ion_input, {\n                                          placeholder: \"Ampules\",\n                                          type: \"number\",\n                                          modelValue: _ctx.calAmpule,\n                                          \"onUpdate:modelValue\": _cache[6] || (_cache[6] = ($event: any) => ((_ctx.calAmpule) = $event)),\n                                          onIonChange: _cache[7] || (_cache[7] = ($event: any) => (_ctx.calculateDrug_TruyenLienTuc('calAmpule'))),\n                                          disabled: _ctx.toCalWhat == 'toCalMgInAmpules' || _ctx.toCalWhat == 'toCalInfusionRate' && (_ctx.drugStore.currentDrug.PER_TIME == 'single' || _ctx.drugStore.currentDrug.PER_TIME == 'dose' || _ctx.drugStore.currentDrug.PER_TIME == 'day')\n                                        }, null, 8, [\"modelValue\", \"disabled\"])\n                                      ]),\n                                      _: 1\n                                    })\n                                  ]),\n                                  _: 1\n                                }),\n                                _createVNode(_component_ion_col, { size: \"1\" }),\n                                _createVNode(_component_ion_col, null, {\n                                  default: _withCtx(() => [\n                                    _createVNode(_component_ion_item, null, {\n                                      default: _withCtx(() => [\n                                        _createVNode(_component_ion_label, { position: \"stacked\" }, {\n                                          default: _withCtx(() => [\n                                            _createTextVNode(\"Dilution (mililiters)\")\n                                          ]),\n                                          _: 1\n                                        }),\n                                        _createVNode(_component_ion_input, {\n                                          placeholder: \"Dilution in mililiters\",\n                                          modelValue: _ctx.calDilution,\n                                          \"onUpdate:modelValue\": _cache[8] || (_cache[8] = ($event: any) => ((_ctx.calDilution) = $event)),\n                                          onIonChange: _cache[9] || (_cache[9] = ($event: any) => (_ctx.calculateDrug_TruyenLienTuc('calDilution'))),\n                                          type: \"number\"\n                                        }, null, 8, [\"modelValue\"])\n                                      ]),\n                                      _: 1\n                                    })\n                                  ]),\n                                  _: 1\n                                })\n                              ]),\n                              _: 1\n                            }),\n                            _createVNode(_component_ion_row, null, {\n                              default: _withCtx(() => [\n                                _createVNode(_component_ion_col, null, {\n                                  default: _withCtx(() => [\n                                    _createVNode(_component_ion_item, null, {\n                                      default: _withCtx(() => [\n                                        _createVNode(_component_ion_label, { position: \"stacked\" }, {\n                                          default: _withCtx(() => [\n                                            _createTextVNode(\"Infusion Rate (mL/h)\")\n                                          ]),\n                                          _: 1\n                                        }),\n                                        _createVNode(_component_ion_input, {\n                                          placeholder: \"Infusion Rate\",\n                                          modelValue: _ctx.calInfusionRate,\n                                          \"onUpdate:modelValue\": _cache[10] || (_cache[10] = ($event: any) => ((_ctx.calInfusionRate) = $event)),\n                                          onIonChange: _cache[11] || (_cache[11] = ($event: any) => (_ctx.calculateDrug_TruyenLienTuc('infusionRate'))),\n                                          disabled: _ctx.toCalWhat == 'toCalInfusionRate' || _ctx.toCalWhat == 'toCalMgInAmpules',\n                                          type: \"number\"\n                                        }, null, 8, [\"modelValue\", \"disabled\"])\n                                      ]),\n                                      _: 1\n                                    })\n                                  ]),\n                                  _: 1\n                                }),\n                                _withDirectives(_createVNode(_component_ion_col, null, {\n                                  default: _withCtx(() => [\n                                    _createVNode(_component_ion_item, null, {\n                                      default: _withCtx(() => [\n                                        _createVNode(_component_ion_label, { position: \"stacked\" }, {\n                                          default: _withCtx(() => [\n                                            _createTextVNode(\"Duration (hour)\")\n                                          ]),\n                                          _: 1\n                                        }),\n                                        _createVNode(_component_ion_input, {\n                                          placeholder: \"Duration\",\n                                          modelValue: _ctx.calDuration,\n                                          \"onUpdate:modelValue\": _cache[12] || (_cache[12] = ($event: any) => ((_ctx.calDuration) = $event)),\n                                          onIonChange: _cache[13] || (_cache[13] = ($event: any) => (_ctx.calculateDrug_TruyenLienTuc(''))),\n                                          type: \"number\"\n                                        }, null, 8, [\"modelValue\"])\n                                      ]),\n                                      _: 1\n                                    })\n                                  ]),\n                                  _: 1\n                                }, 512), [\n                                  [_vShow, _ctx.calDuration > 0]\n                                ])\n                              ]),\n                              _: 1\n                            })\n                          ]),\n                          _: 1\n                        })\n                      ]))\n                    : (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [\n                        _createVNode(_component_ion_grid, null, {\n                          default: _withCtx(() => [\n                            _createVNode(_component_ion_row, null, {\n                              default: _withCtx(() => [\n                                _createVNode(_component_ion_col, {\n                                  onClick: _cache[16] || (_cache[16] = ($event: any) => (_ctx.calculationStore.__truyenLienTucCalWhat('input_ampule')))\n                                }, {\n                                  default: _withCtx(() => [\n                                    _createVNode(_component_ion_item, null, {\n                                      default: _withCtx(() => [\n                                        _createVNode(_component_ion_label, { position: \"stacked\" }, {\n                                          default: _withCtx(() => [\n                                            _createTextVNode(\"Dose (\" + _toDisplayString((_ctx.drugStore.currentDrug.DOSE_UNIT + \"/\" +\n                      _ctx.drugStore.currentDrug.PER_TIME)) + \")\", 1)\n                                          ]),\n                                          _: 1\n                                        }),\n                                        _createVNode(_component_ion_input, {\n                                          placeholder: \"Dose\",\n                                          type: \"number\",\n                                          modelValue: _ctx.calculationStore.inputCalParams.dose,\n                                          \"onUpdate:modelValue\": _cache[14] || (_cache[14] = ($event: any) => ((_ctx.calculationStore.inputCalParams.dose) = $event)),\n                                          onIonChange: _cache[15] || (_cache[15] = ($event: any) => (_ctx.calculationStore.calBolusDoseChanged('input_dose'))),\n                                          disabled: _ctx.calculationStore.inputCalParams.toCalWhat.from_Ampule_to_Dose,\n                                          ref: \"input_dose\"\n                                        }, null, 8, [\"modelValue\", \"disabled\"])\n                                      ]),\n                                      _: 1\n                                    })\n                                  ]),\n                                  _: 1\n                                }),\n                                _createVNode(_component_ion_col, null, {\n                                  default: _withCtx(() => [\n                                    _createVNode(_component_ion_item, null, {\n                                      default: _withCtx(() => [\n                                        _createVNode(_component_ion_label, { position: \"stacked\" }, {\n                                          default: _withCtx(() => [\n                                            _createTextVNode(\"Duration (hour)\")\n                                          ]),\n                                          _: 1\n                                        }),\n                                        _createVNode(_component_ion_input, {\n                                          placeholder: \"Duration\",\n                                          modelValue: _ctx.calculationStore.inputCalParams.duration,\n                                          \"onUpdate:modelValue\": _cache[17] || (_cache[17] = ($event: any) => ((_ctx.calculationStore.inputCalParams.duration) = $event)),\n                                          onIonChange: _cache[18] || (_cache[18] = ($event: any) => (_ctx.calculationStore.calBolusDoseChanged())),\n                                          type: \"number\"\n                                        }, null, 8, [\"modelValue\"])\n                                      ]),\n                                      _: 1\n                                    })\n                                  ]),\n                                  _: 1\n                                }),\n                                _createVNode(_component_ion_col, null, {\n                                  default: _withCtx(() => [\n                                    _createVNode(_component_ion_item, null, {\n                                      default: _withCtx(() => [\n                                        _createVNode(_component_ion_label, { position: \"stacked\" }, {\n                                          default: _withCtx(() => [\n                                            _createTextVNode(\"Dilution (mililiters)\")\n                                          ]),\n                                          _: 1\n                                        }),\n                                        _createVNode(_component_ion_input, {\n                                          placeholder: \"Dilution in mililiters\",\n                                          modelValue: _ctx.calculationStore.inputCalParams.dilution,\n                                          \"onUpdate:modelValue\": _cache[19] || (_cache[19] = ($event: any) => ((_ctx.calculationStore.inputCalParams.dilution) = $event)),\n                                          onIonChange: _cache[20] || (_cache[20] = ($event: any) => (_ctx.calculationStore.calBolusDoseChanged())),\n                                          type: \"number\"\n                                        }, null, 8, [\"modelValue\"])\n                                      ]),\n                                      _: 1\n                                    })\n                                  ]),\n                                  _: 1\n                                }),\n                                _createVNode(_component_ion_col, {\n                                  onClick: _cache[23] || (_cache[23] = ($event: any) => (_ctx.calculationStore.__truyenLienTucCalWhat('input_dose')))\n                                }, {\n                                  default: _withCtx(() => [\n                                    _createVNode(_component_ion_item, null, {\n                                      default: _withCtx(() => [\n                                        _createVNode(_component_ion_label, { position: \"stacked\" }, {\n                                          default: _withCtx(() => [\n                                            _createTextVNode(\"Ampules \" + _toDisplayString(_ctx.drugStore.currentDrug.AMOUNT! +\n                      _ctx.drugStore.currentDrug.AMOUNT_UNIT! + '/' +\n                      _ctx.drugStore.currentDrug.SOLVENT + _ctx.drugStore.currentDrug.SOLVENT_UNIT), 1)\n                                          ]),\n                                          _: 1\n                                        }),\n                                        _createVNode(_component_ion_input, {\n                                          placeholder: \"Ampules\",\n                                          type: \"number\",\n                                          modelValue: _ctx.calculationStore.inputCalParams.ampule,\n                                          \"onUpdate:modelValue\": _cache[21] || (_cache[21] = ($event: any) => ((_ctx.calculationStore.inputCalParams.ampule) = $event)),\n                                          disabled: !_ctx.calculationStore.inputCalParams.toCalWhat.from_Ampule_to_Dose,\n                                          ref: \"input_ampule\",\n                                          onIonChange: _cache[22] || (_cache[22] = ($event: any) => (_ctx.calculationStore.calBolusDoseChanged('input_ampule')))\n                                        }, null, 8, [\"modelValue\", \"disabled\"])\n                                      ]),\n                                      _: 1\n                                    })\n                                  ]),\n                                  _: 1\n                                })\n                              ]),\n                              _: 1\n                            })\n                          ]),\n                          _: 1\n                        })\n                      ])),\n                  _createVNode(_component_ion_grid, null, {\n                    default: _withCtx(() => [\n                      _createVNode(_component_ion_row, null, {\n                        default: _withCtx(() => [\n                          _createVNode(_component_ion_col, null, {\n                            default: _withCtx(() => [\n                              _createElementVNode(\"span\", {\n                                innerHTML: _ctx.calculationStore.howToUseInfo\n                              }, null, 8, _hoisted_4)\n                            ]),\n                            _: 1\n                          })\n                        ]),\n                        _: 1\n                      })\n                    ]),\n                    _: 1\n                  })\n                ]),\n                _: 1\n              })\n            ]),\n            _: 1\n          })\n        ]),\n        _: 1\n      })\n    ]),\n    _: 1\n  }))\n}","import { PatientsInterface } from \"@/services/interface.patients\";\r\nimport { defineStore } from \"pinia\";\r\nexport const usePatientsStore = defineStore(\"PatientsStore\", {\r\n    //state\r\n    state: ()=> (\r\n    {\r\n        currentPatient: {} as PatientsInterface,\r\n    }),\r\n    //actions\r\n    actions: {\r\n        async start(){\r\n            return false\r\n        }\r\n    },\r\n    //getters\r\n    getters: {    }\r\n})","import { defineStore } from \"pinia\";\r\nimport { useDrugStore } from \"./store.drugs\";\r\nimport { usePatientsStore } from \"./store.patients\";\r\n\r\nconst drugStore = useDrugStore()\r\nconst patientsStore = usePatientsStore()\r\nexport const useCalculationStore = defineStore(\"CalculationStore\", {\r\n    state: () => ({\r\n        howToUseInfo: \"\",\r\n        inputCalParams: {\r\n            dose: 0,\r\n            ampule: 0,\r\n            dilution: 10,\r\n            duration: 1,\r\n            infusionRate: 0,\r\n            unitConverted: {\r\n                dose: 0,\r\n                concentration: 0,\r\n                ampuleUnit: 0, // Chuyển đơn vị mg/ gram về mcg để tính toán\r\n            },\r\n            toCalWhat: {\r\n                // Nhập Ống thuốc -> tính Liều mcg/kg\r\n                from_Ampule_to_Dose: false,\r\n                input: \"input_dose\", // cal ampule; input_ampule = cal dose\r\n            }\r\n        }\r\n    }),\r\n    actions: {\r\n        // todo: tính liều bolus / *chích nhát*\r\n        // @param: changeWcalW: string = \r\n        // 1. changeWcalW = input_dose -> changed dose calculate ampule\r\n        // 2. changeWcalW = input_ampule -> changed ampule calculate dose   \r\n        calBolusDoseChanged(changeWcalW?: string) {\r\n            // console.log(\"this.inputCalParams.toCalWhat.input\", this.inputCalParams.toCalWhat.input, \"changeWcalW\", changeWcalW)\r\n            //stop condition\r\n            if (this.inputCalParams.toCalWhat.input != changeWcalW && changeWcalW != undefined) {\r\n                console.log(\"calBolusDoseChanged\", \"stop calculate\")\r\n                return false;\r\n            }\r\n            //Nếu cấp param cal (tức dose, hoặc ampule thay đổi) thì set tính, còn không thì giữ nguyên như cũ (tức mình thay đổi dilution hoặc duration)\r\n            if (this.inputCalParams.toCalWhat.input == \"input_dose\") {\r\n                this._convertCorrectedUnitConcentration()\r\n                this._convertCorrectedUnitDose()\r\n                // Tính số ampule cần sử dụng để được liều mong muốn\r\n                this.inputCalParams.ampule = this.inputCalParams.unitConverted.dose * patientsStore.currentPatient.weight! / this.inputCalParams.unitConverted.ampuleUnit\r\n            } else if (this.inputCalParams.toCalWhat.input == \"input_ampule\") {\r\n                this._convertCorrectedUnitConcentration()\r\n                this.inputCalParams.dose = this.inputCalParams.unitConverted.ampuleUnit * this.inputCalParams.ampule / patientsStore.currentPatient.weight!\r\n                // this._convertCorrectedUnitDose()\r\n                this._convertToShowDose(this.inputCalParams.dose)\r\n            }\r\n            // Tính tốc độ truyền\r\n            this.inputCalParams.infusionRate = this.inputCalParams.dilution / this.inputCalParams.duration\r\n\r\n            // Cập nhật thông tin sử dụng thuốc\r\n            // console.log(this.inputCalParams)\r\n            this.howToUseInfo = `\r\n            Dilute <b>${this.inputCalParams.ampule} ${drugStore.currentDrug.DOSE_FORM}</b> <b></i>(${this.inputCalParams.ampule * drugStore.currentDrug.SOLVENT!} mL)</i></b> of <b>${drugStore.currentDrug.GENERIC_NAME}</b> up to <b>${this.inputCalParams.dilution} mL</b> of dilution.<br/>\r\n\r\n            Dose is: <b>${this.inputCalParams.dose} ${drugStore.currentDrug.DOSE_UNIT}/${drugStore.currentDrug.PER_TIME}</b> <br/>\r\n            Infusion rate is: <b>${this.inputCalParams.infusionRate} mL/hour</b> <br/>\r\n            Final concentration: ${this.inputCalParams.unitConverted.concentration} mcg/mL.<br/>\r\n              Estimation time is: ${this.inputCalParams.dilution / this.inputCalParams.infusionRate} hours.<br/>`\r\n\r\n        },\r\n        //@return: liều thuốc đổi về mcg/kg  /min\r\n        _convertCorrectedUnitDose() {\r\n            // DOSE mcg/kg\r\n            let correctedDose = this.inputCalParams.dose\r\n            if (drugStore.currentDrug.DOSE_UNIT == \"mg/kg\") {\r\n                correctedDose = correctedDose * 1000 // -> mcg/kg\r\n            } else if (drugStore.currentDrug.DOSE_UNIT == \"gram/kg\") {\r\n                correctedDose = correctedDose * 1000000 // -> mcg/kg\r\n            }\r\n            // Dose (-> mcg/kg    /min), chuyển trên Giờ thành trên Phút\r\n            if (drugStore.currentDrug.PER_TIME == \"hour\") {\r\n                correctedDose = correctedDose / 60\r\n            }\r\n            // console.log(\"correctedDose: \" + correctedDose)\r\n            this.inputCalParams.unitConverted.dose = correctedDose // mcg/kg/min\r\n        },\r\n        //@return mcg drug/ ml: số mcg trên mỗi mililit\r\n        _convertCorrectedUnitConcentration() {\r\n            // Nồng độ = -> mcg/mL\r\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n            let correctedConcentrat = drugStore.currentDrug.AMOUNT! * this.inputCalParams.ampule / this.inputCalParams.dilution\r\n            if (drugStore.currentDrug.AMOUNT_UNIT == \"mg\") {\r\n                correctedConcentrat = correctedConcentrat * 1000\r\n                this.inputCalParams.unitConverted.ampuleUnit = drugStore.currentDrug.AMOUNT! * 1000\r\n\r\n            } else if (drugStore.currentDrug.AMOUNT_UNIT == \"gram\") {\r\n                correctedConcentrat = correctedConcentrat * 1000000\r\n\r\n                this.inputCalParams.unitConverted.ampuleUnit = drugStore.currentDrug.AMOUNT! * 1000000\r\n            }\r\n            // console.info(\"convertCorrectedUnitConcentration \", correctedConcentrat)\r\n            this.inputCalParams.unitConverted.concentration = correctedConcentrat\r\n        },\r\n        //@return trả về đơn vị ban đầu\r\n        _convertToShowDose(calculatedDose) {\r\n            let correctedDose = calculatedDose\r\n            if (drugStore.currentDrug.DOSE_UNIT == \"mg/kg\") {\r\n                correctedDose = correctedDose / 1000 // -> mcg/kg\r\n            } else if (drugStore.currentDrug.DOSE_UNIT == \"gram/kg\") {\r\n                correctedDose = correctedDose / 1000000 // -> mcg/kg\r\n            }\r\n            if (drugStore.currentDrug.PER_TIME == \"hour\") {\r\n                correctedDose = correctedDose * 60\r\n            }\r\n            this.inputCalParams.dose = correctedDose\r\n        },\r\n        __truyenLienTucCalWhat(cal: string) {\r\n            if (cal == 'input_dose' && !this.inputCalParams.toCalWhat.from_Ampule_to_Dose) {\r\n                this.inputCalParams.toCalWhat.input = \"input_ampule\"\r\n\r\n            }\r\n            else if (cal == 'input_ampule' && this.inputCalParams.toCalWhat.from_Ampule_to_Dose) {\r\n                this.inputCalParams.toCalWhat.input = \"input_dose\"\r\n            }\r\n            // console.log(\"__truyenLienTucCalWhat\", \"cal\",cal, \"set input\", this.inputCalParams.toCalWhat.input)\r\n\r\n            // console.log(\"__truyenLienTucCalWhat stop2\", cal)\r\n\r\n            if (cal == \"input_dose\") {\r\n                this.inputCalParams.toCalWhat.from_Ampule_to_Dose = true\r\n            } else {\r\n                this.inputCalParams.toCalWhat.from_Ampule_to_Dose = false\r\n            }\r\n        }\r\n    }\r\n})","\nimport { defineComponent } from 'vue';\nimport { calculatorOutline } from \"ionicons/icons\";\nimport {\n  IonPage, IonHeader, IonToolbar, IonTitle, IonContent, IonButtons, IonBackButton, IonButton,\n  IonCard, IonCardContent, IonCardHeader, IonCardSubtitle, IonCardTitle,\n  IonCol, IonGrid, IonRow,\n  IonInput, IonItem, IonLabel,\n  // IonButton,IonIcon,\n  // IonToggle,\n  IonSegment, IonSegmentButton,\n  IonModal\n} from '@ionic/vue';\nimport { useDrugStore } from \"@/stores/store.drugs\";\n\nimport nerdamer from \"nerdamer/all\";\n\nimport { usePatientsStore } from '@/stores/store.patients';\nimport { useCalculationStore } from '@/stores/store.calculations';\nexport default defineComponent({\n  name: 'drugsCalculateDose',\n  components: {\n    IonHeader, IonToolbar, IonTitle, IonContent, IonPage, IonButtons, IonBackButton, IonButton,\n    IonCard, IonCardContent, IonCardHeader, IonCardSubtitle, IonCardTitle,\n    IonCol, IonGrid, IonRow,\n    IonInput, IonItem, IonLabel,\n    // IonButton, IonIcon,\n    // IonToggle,\n    IonSegment, IonSegmentButton,\n    IonModal\n  },\n  setup() {\n    const drugStore = useDrugStore()\n    // Sử dụng store patients và cài đặt giá trị ban đầu cho nó\n    const patientStore = usePatientsStore()\n    const calculationStore = useCalculationStore()\n    patientStore.currentPatient.weight = patientStore.currentPatient.weight ? patientStore.currentPatient.weight : 50\n    // Cài curent Drug ban đầu\n    return {\n      drugStore, patientStore, calculationStore,\n      calculatorOutline\n    }\n  },\n  data() {\n    return {\n      calAmpule: 1,\n      calDilution: 25,\n      calDose: 0,\n      calInfusionRate: 0,\n      calDuration: 0,\n      toCalWhat: \"toCalInfusionRate\", // dành cho truyền liên tục\n      unitConverted: {\n        dose: 0,\n        concentration: 0\n      },\n      information: ''\n    }\n  },\n  methods: {\n    \n    convertCorrectedUnitDose() {\n      // DOSE mcg/kg\n      let correctedDose = this.calDose\n      if (this.drugStore.currentDrug.DOSE_UNIT == \"mg/kg\") {\n        correctedDose = correctedDose * 1000 // -> mcg/kg\n      } else if (this.drugStore.currentDrug.DOSE_UNIT == \"gram/kg\") {\n        correctedDose = correctedDose * 1000000 // -> mcg/kg\n      }\n      // Dose (-> mcg/kg    /min), chuyển trên Giờ thành trên Phút\n      if (this.drugStore.currentDrug.PER_TIME == \"hour\") {\n        correctedDose = correctedDose / 60\n      }\n      // console.log(\"correctedDose: \" + correctedDose)\n      this.unitConverted.dose = correctedDose // mcg/kg/min\n    },\n    convertCorrectedUnitConcentration() {\n      // Nồng độ = -> mcg/mL\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      let correctedConcentrat = this.drugStore.currentDrug.AMOUNT! * this.calAmpule / this.calDilution\n      if (this.drugStore.currentDrug.AMOUNT_UNIT == \"mg\") {\n        correctedConcentrat = correctedConcentrat * 1000\n      } else if (this.drugStore.currentDrug.AMOUNT_UNIT == \"gram\") {\n        correctedConcentrat = correctedConcentrat * 1000000\n      }\n      // console.info(\"convertCorrectedUnitConcentration \", correctedConcentrat)\n      this.unitConverted.concentration = correctedConcentrat\n    },\n    convertToShowDose(calculatedDose) {\n      let correctedDose = calculatedDose\n      if (this.drugStore.currentDrug.DOSE_UNIT == \"mg/kg\") {\n        correctedDose = correctedDose / 1000 // -> mcg/kg\n      } else if (this.drugStore.currentDrug.DOSE_UNIT == \"gram/kg\") {\n        correctedDose = correctedDose / 1000000 // -> mcg/kg\n      }\n      if (this.drugStore.currentDrug.PER_TIME == \"hour\") {\n        correctedDose = correctedDose * 60\n      }\n      this.calDose = correctedDose\n    },\n    changeToCalWhat() {\n      this.information = ''\n      if (this.toCalWhat != \"toCalMgInAmpules\") {\n        this.calDuration = 0\n      }\n      this.calculateDrug_TruyenLienTuc('')\n\n    },\n    calculateDrug_TruyenLienTuc(whoChanged) {\n      if (this.toCalWhat == \"toCalInfusionRate\") {\n        if (whoChanged == \"infusionRate\") {\n          return false;\n        }\n        /* \n        Tính toCalInfusionRate nếu nó là single hoặc dose hoặc day\n        */\n        if (this.drugStore.currentDrug.PER_TIME == \"single\" || this.drugStore.currentDrug.PER_TIME == \"dose\") {\n          // Hiển thị thời gian truyền\n          this.calDuration == 0 ? this.calDuration = 1 : false\n          // Ẩn luôn Ampules\n          this.convertCorrectedUnitConcentration()\n          this.calInfusionRate = this.calDilution / this.calDuration\n          // Tính số mg/ml phải lấy\n\n          this.information = `\n          To get the dose <b>${this.calDose} ${this.drugStore.currentDrug.DOSE_UNIT}/${this.drugStore.currentDrug.PER_TIME}</b>\n          <br/>\n          You get <b>${this.calDose * this.patientStore.currentPatient.weight!}mg (= ${this.drugStore.currentDrug.SOLVENT! * this.calDose * this.patientStore.currentPatient.weight! / this.drugStore.currentDrug.AMOUNT!}ml) of ${this.drugStore.currentDrug.GENERIC_NAME}</b> and diluted up to ${this.calDilution}ml of dilution.\n          <br/>\n          Infusion rate is: <b>${this.calInfusionRate} mL/hour</b>\n          <br/>\n          Frequency: each ${this.drugStore.currentDrug.FREQ} hours (= x${24 / Number(this.drugStore.currentDrug.FREQ)} time each day)\n          <br/>\n          Estimation time is: ${this.calDilution / this.calInfusionRate} hours.<br/>\n\n          `\n\n        } else if (this.drugStore.currentDrug.PER_TIME == \"day\") {\n          this.calDuration = 1\n        }\n        /* Nếu không phải infusionRate thì tính infusionRate */\n        // if (this.currentDrug.PER_TIME == \"min\" || this.currentDrug.PER_TIME == \"hour\") {\n        //   /*\n        //     Infusion rate (mL/h) = Dose (mcg/kg/min) * Weight (kg) / Concentration (mcg/mL) * 60\n        //     r = d * w / c * 60\n        //   */\n        // }\n\n        this.convertCorrectedUnitDose()\n        this.convertCorrectedUnitConcentration()\n        if (this.drugStore.currentDrug.PER_TIME == \"min\" || this.drugStore.currentDrug.PER_TIME == \"hour\") {\n          this.calInfusionRate = nerdamer(\"r = d * w / c * 60\", { d: this.unitConverted.dose, w: this.patientStore.currentPatient.weight, c: this.unitConverted.concentration }).solveFor(\"r\").toDecimal()\n\n          this.information = `Dilute <b>${this.calAmpule} ${this.drugStore.currentDrug.DOSE_FORM}</b> of <b>${this.drugStore.currentDrug.GENERIC_NAME}</b> up to <b>${this.calDilution} mL</b> of dilution.<br/>\n          Final concentration: ${this.unitConverted.concentration} mcg/mL.<br/>\n          Infusion rate is: <b>${this.calInfusionRate} mL/hour</b> <br/>\n          Dose is: <b>${this.calDose} ${this.drugStore.currentDrug.DOSE_UNIT}/${this.drugStore.currentDrug.PER_TIME}</b> <br/>\n          Estimation time is: ${this.calDilution / this.calInfusionRate} hours.<br/>\n          `\n        } else if (this.drugStore.currentDrug.PER_TIME == \"single\" || this.drugStore.currentDrug.PER_TIME == \"dose\") {\n          this.calInfusionRate = this.calDilution / this.calDuration\n          console.log(\"A\")\n        }\n      }\n      else if (this.toCalWhat == \"toCalDose\") {\n        /* Nếu  infusionRate thì tính infusionRate: calDose hoặc số mg ml trong ampulse\n        1. Hiện cái lock khóa cho 2 cái calDose và calAmpulse\n        2. Khóa thằng nào thì tính thằng còn lại\n        */\n        // Dose (-> mcg/kg    /min)\n        this.convertCorrectedUnitConcentration()\n        let cal = nerdamer(\"r = d * w / c * 60\", { r: this.calInfusionRate, w: this.patientStore.currentPatient.weight, c: this.unitConverted.concentration }).solveFor(\"d\")\n        this.convertToShowDose(nerdamer(cal.toString()).toDecimal())\n\n        this.information = `Dilute <b>${this.calAmpule} ${this.drugStore.currentDrug.DOSE_FORM}</b> of <b>${this.drugStore.currentDrug.GENERIC_NAME}</b> up to <b>${this.calDilution} mL</b> of dilution.<br/>\n          Final concentration: ${this.unitConverted.concentration} mcg/mL.<br/>\n          Infusion rate is: <b>${this.calInfusionRate} mL/hour</b> <br/>\n          Dose is: <b>${this.calDose} ${this.drugStore.currentDrug.DOSE_UNIT}/${this.drugStore.currentDrug.PER_TIME}</b> <br/>\n          Estimation time is: ${this.calDilution / this.calInfusionRate} hours.<br/>`\n      }\n      else if (this.toCalWhat == \"toCalMgInAmpules\") {\n        /* Nếu  infusionRate thì tính infusionRate: calDose hoặc số mg ml trong ampulse\n        1. Tính số mg trong ống theo liều định trước (dose, single)\n        */\n        this.calDuration = 25\n\n        this.convertCorrectedUnitConcentration()\n        let cal = nerdamer(\"r = d * w / c * 60\", { r: this.calInfusionRate, w: this.patientStore.currentPatient.weight, c: this.unitConverted.concentration }).solveFor(\"d\")\n        this.convertToShowDose(nerdamer(cal.toString()).toDecimal())\n        // console.log(nerdamer(\"r = d * w / c * 60\", { r: this.calInfusionRate, w: this.weight, c: this.unitConverted.concentration }).solveFor(\"d\").toString())\n\n        this.information = `Dilute <b>${this.calAmpule} ${this.drugStore.currentDrug.DOSE_FORM}</b> of <b>${this.drugStore.currentDrug.GENERIC_NAME}</b> up to <b>${this.calDilution} mL</b> of dilution.<br/>\n        Dose is: <b>${this.calDose} ${this.drugStore.currentDrug.DOSE_UNIT}/${this.drugStore.currentDrug.PER_TIME}</b> <br/>\n        Infusion rate is: <b>${this.calInfusionRate} mL/hour</b> <br/>\n        Final concentration: ${this.unitConverted.concentration} mcg/mL.<br/>\n        Estimation time is: ${this.calDilution / this.calInfusionRate} hours.<br/>`\n      }\n    }\n  },\n  created() {\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      // this.calculateDrug(\"\")\n      //TODO: tạo lại Thuốc hiện tại trong store\n      this.drugStore.updateCurrentDrug(Number(this.$route.params.id))\n      // TODO: chỉnh liều tối thiểu cho nó\n      this.calDose = this.drugStore.currentDrug.MIN_DOSE! | 0\n      this.calculationStore.inputCalParams.dose = this.drugStore.currentDrug.MIN_DOSE! | 0\n      // Nếu là = CHÍCH NHÁT, thì cài đặt ban đầu lại\n      if (this.drugStore.currentDrug.cal_typeCalculate != 'truyenLienTuc') {\n        this.calDuration = 0\n        this.calDilution = 10\n        this.calculationStore.calBolusDoseChanged()\n      }\n      // Chích nhát\n      else {\n        return false;\n      }\n\n    } catch (error) {\n      this.$router.push({\n        name: \"drugs\"\n      })\n    }\n  },\n});\n","import { render } from \"./drugsCalculateDose.vue?vue&type=template&id=31b2cba7&ts=true\"\nimport script from \"./drugsCalculateDose.vue?vue&type=script&lang=ts\"\nexport * from \"./drugsCalculateDose.vue?vue&type=script&lang=ts\"\n\nimport \"./drugsCalculateDose.vue?vue&type=style&index=0&id=31b2cba7&lang=css\"\n\nimport exportComponent from \"d:\\\\AppCreator\\\\_IONIC ALL\\\\ionic-thuoc-tim-mach\\\\thuc-tim-mch\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["nerdamer","core","getCore","_","PARSER","N","groups","P","S","EX","FN","PL","CP","CB","keys","Utils","even","variables","format","round","Frac","isInt","Symbol","CONST_HASH","Settings","math","importFunctions","evaluate","Polynomial","symbol","variable","order","isSymbol","this","parse","isNaN","undefined","exceptions","InvalidVariableNameError","coeffs","fill","Factors","factors","length","MVTerm","coeff","terms","map","sum","image","fromArray","arr","p","fit","c1","c2","n","base","Array","t","Math","pow","i","b","q","sign","c","floor","abs","prototype","isPoly","NerdamerTypeError","text","power","absEquals","expand","group","multiplier","toDecimal","x","symbols","sub","Number","l","trim","equalsZero","equals","pop","modP","j","subtract","add","d","mod","w","divide","up_one","next","poly","max","a","dividend","arrayClone","divisor","mp","quotient","multiply","p1","p2","l1","l2","x1","k","x2","e","isZero","clone","deg","lc","monic","gcd","T","mp1","mp2","Math2","QGCD","apply","diff","new_array","push","integrate","gcf","toPolynomial","fnz","ca","indexOf","parr","quad","incl_img","roots","Error","dsc","sqrt","squareFree","output","equalsNumber","y","z","toSymbol","end","str","plus","String","toString","with_order","error","s","distributeMultiplier","isComposite","isConstant","isImaginary","m","each","imaginary","tBase","collectSymbols","g","nterm","sym","value","updateCount","altVar","sameVars","groupTerms","f","egrouped","grouped","el","decompose_fn","collectFactors","getNumberSymbolics","fo","firstObject","symfunction","PARENTHESIS","obj","negate","key","preAdd","pFactor","is_constant","v","factored","Object","values","sort","factor","fname","unwrapPARENS","merge","o","isLinear","args","call","count","clean","h","lessThan","getVars","vars","term","getRevMap","rev_map","join","len","mapped","generateImage","getImg","mvterm","new_mvterm","toMapObj","filledArray","clss","arrSum","haveIntersection","some","subFunctions","subbed","previousGroup","val","tvar","inBrackets","getFunctionsSubs","subs","__","Algebra","version","proots","decp","zeros","known_roots","get_roots","rarr","powers","calcroots","concat","unshift","lowest_pow","arrayMin","lowest_symbol","toUnitMultiplier","minpower","arrayMax","isArray","last_power","MAXDEGREE","slice","ValueLimitExceededError","zeroi","degreePar","Degree","zeror","QuadSD_ak1","NN","u","iPar","calcSC_ak1","DBL_EPSILON","K","qk","sdPar","dumFlag","a3","a1","a7","nextK_ak1","tFlag","qp","temp","newest_ak1","a4","a5","b1","b2","c3","c4","Quad_ak1","sr","si","lr","li","QuadIT_ak1","uu","vv","calcPar","ee","omp","relstp","ui","vi","zm","qPar","triedFlag","NZ","szr","szi","lzr","lzi","RealIT_ak1","kv","ms","pv","nm1","Fxshfr_ak1","MDP1","L2","betas","betav","oss","ots","otv","ovv","ss","ts","tss","tv","tvv","fflag","spass","stry","vpass","vtry","svk","iFlag","rpSolve","degPar","bnd","df","dx","ff","moduli_max","moduli_min","sc","xm","aa","bb","cc","xxx","jj","NM1","zerok","RADFAC","LB2","LN2","pt","Fxshfr_Par","LO","MIN_VALUE","cosr","cos","sinr","sin","xx","yy","MAX_VALUE","log","exp","img","real","num","replace","nroots","Vector","froot","guess","newtonraph","xn","mesh","build","Calculus","fn","Function","done","safety","r","delta","sumProd","invert","wrt","contains","polyPowers","for_variable","arrayUnique","Factor","split","mix","include_negatives","ll","common","zeroes","exit","tp","allSame","n_terms","n_zeroes","div","_symbol","retval","_factor","create","_factored","quadFactor","degree","cf","root","filter","root1","root2","cubeFactor","sign_a","sign_b","isCube","m_root_a","getNth","m_root_b","arg","isSimple","greaterThan","untouched","den_array","num_array","den","dfact","nfact","Simplify","strip","getDenom","getNum","unstrip","ret","toLinear","IMAGINARY","multiVar","all_S","all_unit","coeff_factors","coeffFactor","power_factors","powerFactor","mfactor","t_factors","trialAndError","tf_symbol","t_factor","addPower","reduce","nn","result","sqfr","allNumeric","LT","updateHash","factor_array","cnst","cfactors","ifactor","search","forEach","check","candidate","ltfactors","isubbed","nfactors","cp","ceil","lc_is_neg","cnst_is_neg","factor_found","isPrime","mSqfrFactor","reverse","can_divide","is_factor","sqdiff","remove_square","block","separated","separate","obj_array","constants","powSimp","factors2","unwrapSQRT","sorted","maxes","new_factor","divided","has_fractions","neg_numeric_factor","rem","allLinear","set","status","sg","arguments","elements","arguments2Array","appeared","splice","every","aggregate","gcd_","lcm","gcd_m","GCD","gcd_v","gcd_p","vars_a","vars_b","multipliers","denom","numer","prev","curr","denom_args","input","size","mask","results","total","isVariableSymbol","symbol1","symbol2","remainder","fail","symbol1_has_func","hasFunc","symbol2_has_func","parse_funcs","quot","reconvert","get_unique_max","any","idx","get_det","lookat","det","umax","is_equal","max1","max2","idx1","idx2","item1","item2","d1","d2","s2","cterm","t_map","init_sort","is_larger","s1","target","lead_var","try_better_lead_var","checked","tt","sf","blv","alv","fdt","fnt","nd","dividend_larger","InfiniteLoopError","shift","neg","cur","remove","line","v1","v2","convertToVector","isVector","dy","PartFrac","createTemplate","denom_factors","f_array","factors_vec","degrees","efactor","partfrac","as_array","ofactors","nterms","dterms","M","ks","template","tfactors","Matrix","fillHoles","transpose","partials","denominators","e2","sd","depth","distributeExponent","sqComplete","raw","br","sqrt_a","stop","msg","complexSimp","ac","bd","bc","ad","cd","r1","r2","i1","i2","realpart","imagpart","trigSimp","containsFunction","sym_array","tr","fnTransform","simplify","fracSimp","n1","n2","ratSimp","sqrtSimp","isSQRT","trial","simp","patternSub","patterns","has_CP","found","collect","getU","simplified","Classes","Expression","useAlgebraDiv","divideFn","calls","ans","useParserDiv","register","name","visible","numargs","sq","updateAPI","LOG","EXP","ABS","SQRT","SIN","COS","TAN","SEC","CSC","COT","ASIN","ACOS","ATAN","ASEC","ACSC","ACOT","SINH","COSH","TANH","CSCH","SECH","COTH","ASECH","ACSCH","ACOTH","NoIntegralFound","message","hasIntegral","double_angle","transformed","hasTrig","in_trig","in_inverse_trig","toCommonDenominator","denominator","numerator","inv_trig_fns","trig_fns","in_htrig","jacobian","eqns","arrayGetVariables","eq","gt","cMatrix","all_functions","cosAsinBtransform","cosAsinBtranform","cosAsinAtransform","cosAsinAtranform","sinAsinBtransform","trigTransform","integration_depth","max_lim_depth","index","start","isNumericSymbol","modifier","product","nth","vector","isMatrix","matrix","sp","derive","polydiff","product_rule","qdiff","x_","y_","LOG10","altVal","integration","u_substitution","try_combo","do_fn_sub","Q","g1","g2","poly_integrate","dc","decompose_arg","xp","dc2","new_val","by_parts","integrated","A","B","f1","f2","warn","partial_fraction","opt","partial_fractions","get_udv","parts","setSymbol","dv","part","trig_sub","du","integral","clearU","udv","vdu","uv","integral_vdu","vdu_s","previous","stripVar","isE","is_cyclic","original_symbol","dt","decomp","ax","b_is_positive","unwrapAbs","C","D","E","F","L1","sqrt_ax","sqa","sqb","aob","bsqi","was_factored","fx","u_du","ag","decomposed","a_","b_","rd","rd2","na","parse_str","cfsymbol","unwrapped","sym1","sym2","fn1","fn2","arg1","arg2","new_sym","p1_even","p2_even","trans","bx","sym1_is_linear","pd","min","pc","f_is_linear","dummy","bksub","u_transform","expanded","U","scope","U2","cosn","X","sym2_clone","sa","sb","nq","syma","symb","first","intg","DivisionByZero","defint","from","to","get_value","point","lim","Limit","limit","num_integrate","upper","lower","interval","diverges","gin","lim_sign","isInfinity","fm","gm","L","lim1","lim2","indeterminate","ft","t_symbol","den_is_zero","infinity","rewriteToLog","getSubbed","isInterval","isConvergent","_num","_den","isOne","symbol_","lim_base","lim_pow","evaluates","s_arg","pi","divergent","FACTORIAL","_lim","_symbols","fns","Fresnel","Laplace_integration_depth","findFunction","Extra","LaPlace","transform","depth_is_lower","integration_expr","inverse","s_","input_symbol","den_p","finalize","fact","factorial","completed","tf","new_num","a_has_sin","b_has_cos","a_has_cos","b_has_sin","s_terms","fc","Statistics","frequencyMap","xi","mean","median","mid","mode","freq","gVariance","variance","sampleVariance","standardDeviation","sampleStandardDeviation","zScore","stdev","Units","table","foot","meter","decimeter","module","exports","_A","_C","explode","knownVariable","range","Equation","lhs","rhs","NerdamerValueError","LHS","RHS","SOLVE_RADIUS","ROOTS_PER_SIDE","make_pi_conversions","STEP_SIZE","EPSILON","MAX_NEWTON_ITERATIONS","MAX_NON_LINEAR_TRIES","NON_LINEAR_JUMP_AT","NON_LINEAR_JUMP_SIZE","NON_LINEAR_START","NEWTON_SLICES","NEWTON_EPSILON","SOLUTION_PROXIMITY","FILTER_SOLUTIONS","MAX_SOLVE_DEPTH","ZERO_EPSILON","MAX_BISECTION_ITER","BI_SECTION_EPSILON","hasNegativeTerms","option","toLHS","eqn","removeDenom","_t","newRHS","latex","functions","solveFor","solve","setEq","checkAll","test","Solve","solutions","solution","es","solveCircle","svars","arraySum","y_points","x_points","SOLUTIONS_AS_OBJECT","solveNonLinearSystem","tries","max_tries","halfway","iters","xn1","norm","lnorm","jump_at","jump","create_subs","get","max_iter","f_eqns","J","systemSolutions","expand_result","callback","valueOf","solveSystemBySubstitution","arrayEqual","solveSystem","var_array","sol","reduced","knowns","all_zero","setVar","err","tparts","determinant","SolveError","discriminant","cubic","d_o","c_o","b_o","a_o","quartic","D0","D1","x3","x4","divideAndConquer","solve_for","sols","csolve","pn","pf","toPolarFormArray","getPoints","step","points","x0","last","last_sign","rside","lside","left","right","test_side","side","num_roots","hits","isFinite","bisection","epsilon","middle","x_point","Newton","fp","maxiter","iter","fx0","rewrite","sqrts","sqrtSolve","existing","known","add_to_result","has_trig","r_is_symbol","PRE_ADD_SOLUTION","PI","r_str","numvars","cfact","fractionals","correct_denom","expand_denominator","expand_functions","original","is_sqrt","min_p","corrected","inverseFunctionSolve","fkeys","getCoeffs","was_calculated","points1","points2","points3","t_points","console","expr_str","rw","neq","zero","parent","imports","Parser","bigInt","bigDec","precision","Groups","PRIMES","CUSTOM_OPERATORS","callPeekers","init_primes","exclude","suppress_errors","PARSE2NUMBER","SAFE","FUNCTION_MODULES","ALLOW_CHARS","USE_MULTICHARACTER_VARS","POWER_OPERATOR","VALIDATION_REGEX","IMPLIED_MULTIPLICATION_REGEX","ALIASES","POSITIVE_MULTIPLIERS","CACHE","SILENCE_WARNINGS","PRECISION","EXPRESSION_DECP","DEFAULT_DECP","VECTOR","DOUBLEFACTORIAL","LONG_PI","LONG_E","LOG10_LATEX","MAX_EXP","SCIENTIFIC_MAX_DECIMAL_PLACES","SCIENTIFIC_IGNORE_ZERO_EXPONENTS","nthpow","EXPRESSIONS","VARS","RESERVED","WARNINGS","ErrorObj","customError","stack","isReserved","SHOW_WARNINGS","validateName","typ","regex","scientificToDecimal","nsign","toLowerCase","coeff_array","dec","isNumber","isFraction","isExpression","prevgroup","toNumber","insert","isSet","Set","isNegative","stringify","stringReplace","with_str","substr","customType","custom","sameSign","new_str","match","both","compare","comparison","random","setFunction","params_array","body","mapped_function","params","arr1","arr2","arrayAddSlices","slices","_roots","formula","comboSort","combined","nb","as_obj","nround","indx","hasOwnProperty","evenFraction","item","removeDuplicates","condition","conditionType","seen","reserveNames","indexOrKey","setting","current_setting","info","generatePrimes","upto","last_prime","allNumbers","allConstants","isPi","ParseError","UndefinedError","OutOfFunctionDomainError","MaximumIterationsReached","ParityError","OperatorError","OutOfRangeError","DimensionError","UnexpectedTokenError","csc","sec","cot","tan","acsc","asin","asec","acos","acot","atan","erf","derivative","half","fromContinued","contd","fractions","whole","continuedFraction","absn","ni","bigpow","isInteger","nthroot","gamma","bigfactorial","times","bigLog","quick","is_int","NaN","dfactorial","LCM","ifactors","sfactor","lcprime","prime","lt","rho","xf","cz","minus","sm","boxfactor","fib","integer_part","simpson","tol","maxdepth","adsimp","fa","fb","V0","state","nanEncountered","sl","V1","V2","maxDepthCount","Ci","Si","Ei","Infinity","Shi","Chi","cosh","Li","gamma_incomplete","rect","sinc","tri","dk","dk0","d0","xk","powb","dk_dec","gte","ld","same_delta","decimal","useGroup","asHash","wrapCondition","asDecimal","frac","exec","negative","digits","passed","prefix","cycle","divmod","operator","Scientific","om","txt","pg","pwg","E_TO_EXP","charAt","cv","parens","primeFactors","startsWith","isScientific","fromScientific","convert","simple","Fraction","quickConversion","bin","preprocessors","names","actions","Slice","Collection","Token","node","node_type","column","type","OPERATOR","operators","FUNCTION","precedence","MAX_PRECEDENCE","leftAssoc","append","getItems","pretty_print","collection","is_prefix","VARIABLE_OR_LITERAL","UNIT","KEYWORD","classes","complex","prec","re","im","sinh","removeDen","squared","tanh","sech","csch","coth","acosh","asinh","atanh","asech","acsch","acoth","hyp","phi","USE_BIG","atan2","trig","getQuadrant","dividedBy","trigh","units","action","postfix","operation","overloaded","overloadAction","overloadLeftAssoc","vectorFn","brackets","id","is_open","is_close","maps_to","radians","continued_fraction","scientific","pfactor","imatrix","cbrt","expandall","dot","cross","vecget","vecset","vectrim","matget","matset","matgetrow","matsetrow","matgetcol","matsetcol","rationalize","IF","is_in","conjugate","polarform","rectform","union","intersection","difference","intersects","is_subset","print","fmodules","fmodule","override","which","with_what","restore","what","extend","force_call","extended","fn_name","callfunction","allowed_args","fn_settings","num_allowed_args","is_array","min_args","max_args","num_args","error_msg","numericArgs","bigConvert","operator_filter_regex","ostr","RegExp","setOperator","postif","getOperator","aliasOperator","getOperators","getBrackets","prepare_expression","group1","group2","before","e_org","Node","token","initConstants","CONSTANTS","peekers","pre_operator","post_operator","pre_function","post_function","tokenize","col","lpos","tokens","scopes","open_brackets","has_space","SPACE","EMPTY_STRING","COMMA","MINUS","MULT","addScope","scope_type","new_scope","goUp","get_operator_str","start_at","substring","chunkify","operator_str","_operators","ch","add_token","at","add_function","set_last_position","position","adjust_column_position","last_token_is_numeric","is_multiplication","bracket","pair","nxt","is_operator","toRPN","prefixes","collapse","destination","next_is_operator","last_on_stack","parseRPN","rpn","substitutions","is_comma","fromSet","fn_args","next_is_comma","getter","il","element","isUnit","rethrowErrors","toHTML","indent","tab","repeat","html","tree","location","toObject","expression_string","objectify","isConversion","chunkAtCommas","chunks","rem_brackets","remove_redundant_powers","narr","next_is_array","next_is_minus","before_last","V","rows","cols","retnum","retden","is_negative","setPower","qa","tw","sigfigs","asbig","theta","symMinMax","numVal","SYMBOLIC_MIN_MAX","getval","aval","bval","log_sym","log_base","img_part","sIsConstant","toExponential","quadrant","new_den","rank","identity","tolerance","col_index","vec1","vec2","mat","set1","set2","testSQRT","testPow","fct","toTeX","expression_or_obj","decimals","TeX","cdot","nobj","LaTeX","braces","expr","lb","ub","argSplit","getFunction","addPreprocessor","shift_cells","PreprocessorError","getPreprocessors","removePreprocessor","aIsSymbol","bIsSymbol","unit","Unit","aneg","bneg","inf","ap","bp","h1","h2","powEQ","aIsComposite","bIsComposite","PN","PNEQ","valEQ","attach","shell","canIterate","bothPL","bIsMatrix","eachElement","row","dimensions","toFixed","bnum","bden","a_pow","a_multiplier","ONN","combine","bm","isSymbolP1","isSymbolP2","toEX","isEven","logV","ndiv","ddiv","ps","isMatrixB","isMatrixA","isVectorA","isVectorB","raised","aIsZero","bIsZero","nre","nim","bIsConstant","aIsConstant","bIsInt","multiplyPower","abs_b","sgn","_a","_b","log_a","neg_num","nr","tn","evenr","evenp","evennp","_result","isEX","IGNORE_E","comma","percent","assign","function_assign","bool2Symbol","lte","log10","LOG10E","trunc","getExpression","expression_number","asType","expression","text_","first_arg","buildFunction","Build","isPolynomial","for_symbol","otype","hasFunction","exponent","removeLeadingZeroes","removeTrailingZeroes","dot_location","leadingZeroes","wholes","copy","rounded","next_two","ed","is_neg","isFrac","nstr","m_dc","qcompare","isnegative","all","isToNth","nthPower","nthMultiplier","isNth","isSquare","mfactors","out_","in_","xt","multivariate","exclude_x","toArray","fn_group","same_pow","a_is_unit_multiplier","find","needle","nargs","isMonomial","check_all","check_symbols","retainSign","isSymbolic","isInverse","properties","keepSign","deep","power_only","is_one","isImgSymbol","keyForGroup","hash","contents","is_parens","sort_fn","expand_symbol","collected","isCombination","opts","qc","fullConversion","stripSign","nparts","cparts","parser","keep","space","LaTeXArray","rowTeX","m_array","v_array","formatFrac","p_array","greek","alpha","beta","zeta","eta","iota","kappa","lambda","mu","nu","omnikron","sigma","tau","upsilon","chi","psi","omega","Gamma","Delta","Epsilon","Theta","Lambda","Xi","Pi","Sigma","Phi","Psi","Omega","arccos","ker","limsup","arcsin","lg","ln","Pr","sup","arctan","hom","LN","dim","liminf","inverted","formatSubscripts","t_varray","den_map","num_map","num_c","den_c","setBrackets","container","counter","laTex","isDenom","combine_power","isBracketed","formatP","mn","md","vn","vd","top","bottom","glue","is_pow","bracketTypes","square","brace","angle","filterTokens","filtered","next_token","raw_tokens","parse_next","items","lw","rl","arrayPrefill","modulus","eql","toUnitVector","angleFrom","mod1","mod2","theta_val","isParallelTo","isAntiparallelTo","isPerpendicularTo","magnitude","tex","zeroMatrix","raw_values","nc","toRightTriangular","isSingular","augment","rr","np","els","new_element","ki","kp","inverse_elements","nel","fel","nj","canMultiplyFromLeft","sameSize","MM","kj","toVector","newline","to_decimal","row_tex","_union","_intersection","dependencies","_rename","reformat","deps","getProperName","compileDependencies","dep_string","replacements","components","getArgsDeps","arg_array","supplements","ftext","xports","ftext_complex","ftext_function","bn","alias","LOG_FNS","libExports","fndec","convertToLaTeX","convertFromLaTeX","add_on","getWarnings","setConstant","constant","getConstant","getEquation","reserved","asArray","clear","equation_number","keep_EXPRESSIONS_fixed","flush","expressions","asObject","asLaTeX","parent_obj","ref_obj","validVarName","varname","supported","numEquations","numExpressions","getVar","clearVars","load","loader","disallowed","linker","replaceFunction","new_num_args","withOperator","htmlTree","addPeeker","removePeeker","BASE","LOG_BASE","MAX_INT","MAX_INT_ARR","smallToArray","LOG_MAX_INT","Integer","radix","parseValue","parseBase","BigInteger","isSmall","SmallInteger","isPrecise","arrayToSmall","compareAbs","createArray","truncate","l_a","l_b","carry","addAny","addSmall","a_l","b_l","borrow","subtractAny","subtractSmall","multiplyLong","a_i","b_j","multiplySmall","shiftLeft","multiplyKaratsuba","abcd","useKaratsuba","multiplySmallAndArray","a_j","divMod1","quotientDigit","divisorMostSignificantDigit","divModSmall","divMod2","xlen","highx","highy","divModAny","self","qSign","mSign","isBasicPrime","isDivisibleBy","lesser","millerRabinTest","nPrev","modPow","small","_multiplyBySmall","over","isPositive","isOdd","compareTo","notEquals","greater","greaterOrEquals","geq","lesserOrEquals","leq","strict","bits","bitLength","logN","isProbablePrime","iterations","randBetween","modInv","lastT","lastR","newT","one","newR","powersOfTwo","powers2Length","highestPower2","shift_isSmall","bitwise","xSign","ySign","xRem","not","yRem","xDigit","yDigit","xDivMod","yDivMod","toJSNumber","shiftRight","remQuo","and","or","xor","LOBMASK_I","LOBMASK_BI","roughLOB","integerLogarithm","tmp","low","high","restricted","digit","absBase","charCodeAt","parseInt","charCode","parseBaseFromArray","toBase","out","toBaseString","parseStringValue","decimalPlace","isValid","parseNumberValue","toJSON","minusOne","isInstance","rounding","modulo","toExpNeg","toExpPos","minE","maxE","crypto","O","absoluteValue","constructor","comparedTo","cmp","cosine","G","cubeRoot","Z","decimalPlaces","dp","dividedToIntegerBy","divToInt","greaterThanOrEqualTo","hyperbolicCosine","hyperbolicSine","hyperbolicTangent","inverseCosine","isNeg","inverseHyperbolicCosine","inverseHyperbolicSine","inverseHyperbolicTangent","inverseSine","inverseTangent","isPos","lessThanOrEqualTo","logarithm","naturalExponential","naturalLogarithm","negated","sine","squareRoot","tangent","mul","toBinary","toDecimalPlaces","toDP","R","toFraction","toHexadecimal","toHex","toNearest","toOctal","toPower","LN10","toPrecision","toSignificantDigits","toSD","truncated","I","H","$","W","Y","en","rn","sn","on","un","cn","an","defaults","getRandomValues","randomBytes","hn","dn","gn","wn","Nn","En","yn","Mn","qn","On","Dn","Uint32Array","Fn","An","Sn","Zn","Pn","Rn","Ln","Tn","Un","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","config","isDecimal","hypot","log2","default","Decimal","_hoisted_1","_hoisted_2","_createElementVNode","_hoisted_3","_hoisted_4","render","_ctx","_cache","$props","$setup","$data","$options","_component_ion_title","_resolveComponent","_component_ion_back_button","_component_ion_buttons","_component_ion_button","_component_ion_toolbar","_component_ion_header","_component_ion_label","_component_ion_input","_component_ion_content","_component_ion_modal","_component_ion_card_title","_component_ion_card_subtitle","_component_ion_card_header","_component_ion_segment_button","_component_ion_segment","_component_ion_item","_component_ion_col","_component_ion_row","_component_ion_grid","_component_ion_card_content","_component_ion_card","_component_ion_page","_openBlock","_createBlock","_withCtx","_createVNode","_createTextVNode","_toDisplayString","drugStore","currentDrug","GENERIC_NAME","slot","shape","patientStore","currentPatient","weight","class","ref","trigger","breakpoints","placeholder","modelValue","$event","onIonChange","calculateDrug_TruyenLienTuc","color","DOSE_FORM","AMOUNT","AMOUNT_UNIT","SOLVENT","SOLVENT_UNIT","MIN_DOSE","MAX_DOSE","DOSE_UNIT","PER_TIME","FREQ","cal_typeCalculate","_createElementBlock","toCalWhat","changeToCalWhat","calDose","disabled","calAmpule","calDilution","calInfusionRate","_withDirectives","calDuration","_vShow","onClick","calculationStore","__truyenLienTucCalWhat","inputCalParams","dose","calBolusDoseChanged","from_Ampule_to_Dose","duration","dilution","ampule","innerHTML","howToUseInfo","usePatientsStore","defineStore","async","getters","useDrugStore","patientsStore","useCalculationStore","infusionRate","unitConverted","concentration","ampuleUnit","changeWcalW","_convertCorrectedUnitConcentration","_convertCorrectedUnitDose","_convertToShowDose","correctedDose","correctedConcentrat","calculatedDose","cal","defineComponent","IonHeader","IonToolbar","IonTitle","IonContent","IonPage","IonButtons","IonBackButton","IonButton","IonCard","IonCardContent","IonCardHeader","IonCardSubtitle","IonCardTitle","IonCol","IonGrid","IonRow","IonInput","IonItem","IonLabel","IonSegment","IonSegmentButton","IonModal","setup","calculatorOutline","data","information","methods","convertCorrectedUnitDose","convertCorrectedUnitConcentration","convertToShowDose","whoChanged","created","updateCurrentDrug","$route","$router","__exports__"],"sourceRoot":""}